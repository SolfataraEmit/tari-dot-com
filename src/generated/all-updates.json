[
    {
        "slug": "2025-02-14-update-142",
        "content": "\nNormally, the dev updates try to cover the multitude of projects Tari is tackling. Instead, for this one we’ll be taking a different approach. We'll focusing on developments in the Ootle, which we didn’t get to cover [in our last update](https://tari.com/updates/2025-01-24-update-141) but not for a lack of love. There’s a lot of attention on the Ootle right now in the Tari community, and significant progress is being made\n\nThe Ootle will be a core part of the Universe experience once it's live, and the success of Universe is pulling Ootle contributors directly into its orbit. Or gravity well. Actually, don’t worry about the metaphor, just check out their work below.\n\n# The Ootle Update\n\n## Consensus and Transactions\n\nRocksDB development has focused on improving the models to handle more complex transaction queries, which is essential for improving the performance of the L2. Cross-shard pledges and numerous bug fixes have further shored up consensus mechanisms.\n\nThe Publish Template transaction has been added, improving the deployment of templates on the Ootle. And staying with templates, template syncing has been a focus to ensure that templates can be synced correctly with minimal performance impact and duplication of effort across validator nodes, although still in its initial stages.\n\nOn transactions, work to allow multiple signers on a transaction will, once implemented, improve the security of transactions involving numerous participants.\n\n## Wallet\n\nSpeaking of security, the wallet has come under the scrutiny of our contributors, and work is currently underway to incorporate WebAuthn for the wallet to better secure transactions and queries made of the wallet via JSON-RPC calls, preventing unauthorized access to sensitive transactions.\n\nIn addition, transaction input detection has seen some work that addresses existing issues in applications that depend on them, like Tari Swarm. In particular, the wallet will now ensure that all referenced substates in a transaction are detected, which it checks by calling on the indexer directly. Further development will be required to refine this process, but the fix has already improved the overall accuracy of transactions being handled.\n\n## Validator Nodes\n\nContributors working on Ootle validator nodes have been focusing on fees and fee management recently, with ongoing work to streamline fee claims across shards and address issues with zero balances post-fee claiming. Contributors also worked on improving the scanning process for fees and submitting claim transactions. A common claim key for validator nodes was also introduced to simplify the fee-claiming process, with improvements to estimating and submitting fee-claim transactions.\n\n## Universe Integration\n\nWhile still very much in its early, experimental phase, groundwork is being laid for Universe users to have instant access to the Ootle, directly through the app. Whether it’s managing your Ootle wallet or deploying templates, we’re aiming to make Layer 2 interactions as easy as Universe has made mining tXTM on the Layer 1.\n",
        "title": "Obeisance of the Ootle",
        "date": "2025-02-14T00:00:00.000Z",
        "excerpt": "Normally, the dev updates try to cover the multitude of projects Tari is tackling. Instead, for this one we’ll be taking a different approach. We'll focusing on developments in the Ootle, which we...",
        "thumbnail": "/assets/updates/img/update-background-142.png",
        "og_image": "/assets/updates/img/update-background-142.png",
        "tag": "Developer Update"
    },
    {
        "slug": "2025-01-24-update-141",
        "content": "The first update of the new year! The community is back into the swing of things from a well-deserved break, but some just couldn't help themselves and continued hammering away at features and issues within the Tari project.\n\nSpoiler: P2Pool is in a much, much better state than it was at the end of last year.\n\n# Tari Universe\n## P2Pool\nWe've made significant progress in a very important category: improving win frequency for most miners. In our recent releases, we've achieved an average win rate of ~70% across miners daily. In addition, miners are now consistently on the correct chain, ensuring parity across the network.\n\nWe still have work to do, as miners under 1,000 h/s CPU are only syncing with the network around 50% of the time and, therefore not earning rewards frequently enough. A massive improvement from where we were but still far from our ideal of \"everyday people, everyday mining\". As many people as possible must benefit from their contribution to Tari’s security model, and we aim to achieve that goal.\n\nFor those interested in the numbers, you can see some of the stats below as of version 0.8.42 of Universe:\n\n| Hash Rate Tier | Sync % (CPU ▓ GPU ░) |\n|----------|----------|\n| 0.25  | ▓  56% |\n|       | ░  54% |\n| 0.50  | ▓  81% |\n|       | ░  78% |\n| 0.75  | ▓  85% |\n|       | ░  77% |\n| 0.95  | ▓  86% |\n|       | ░  96% |\n| 0.99  | ▓  97% |\n|       | ░  88% |\n\n# The Ootle\n## The Tari CLI\n\nThe Tari CLI tool, [covered in our previous update](https://tari.com/updates/2024-11-26-update-138), has seen numerous improvements, including improved instructions and the option to register template directly via the command line with fee estimation and error feedback (such as attempting to register an already existing template.).\n\n# Aurora Wallet\nThe Aurora Wallet has seen several improvements over the past 2-3 months. To summarise:\n\n* Have aggressively addressed outstanding PRs to improve the user experience.\n* Removed the foreground service previously essential for interactive transactions, which required extensive refactoring and testing.\n* Refactored Tx Repository and WalletManager, removing spaghetti code and improving communication between architectural layers.\n* Implemented the Paper Wallet feature for secure and intuitive fund management.\n\nA very recent and welcome improvement has been removing the background service used to passively monitor wallet events. The service had a deleterious effect on phone use, system performance, and battery life - a poor user experience. The removal of the background service and adjusting the app to account for its removal has greatly improved phone performance and efficiency when using the app.",
        "title": "New Year, New Developments",
        "date": "2025-01-24T00:00:00.000Z",
        "excerpt": "The first update of the new year! The community is back into the swing of things from a well-deserved break, but some just couldn't help themselves and continued hammering away at features and issues...",
        "thumbnail": "/assets/updates/img/update-background-141.png",
        "og_image": "/assets/updates/img/update-background-141.png",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-12-27-update-140",
        "content": "As we close out 2024, we’d like to reflect on the development of Tari’s P2Pool implementation. P2Pool has always been a focus for Tari (ever since we announced Tari’s integration into the current P2Pool project alongside other merge-mined coins, and we started implementing P2Pool mining with SHA3x). It has taken on even greater significance with its incorporation with Tari Universe and has proven to be one of the core features of the app.\n\nP2Pool is highly challenging to set up and tricky to diagnose when things go wrong. Tari Universe has simplified this process tremendously, and we’ve been fortunate to have incredible testers, developers, and community members providing valuable feedback on its implementation every step of the way. It’s not perfect yet, but we’ve made meaningful progress in improving the experience over the past several months.\n\n# But first, why P2Pool?\nP2Pool is integral to Tari contributor's vision of creating a fully decentralized, miner-driven ecosystem. At its core, P2Pool operates as a blockchain within a blockchain — a network where miners work together to mine “shares” rather than full blocks. These shares are easier to win, even for ordinary PCs, which makes P2Pool accessible to a wide range of miners. The mining rewards are distributed based on the number of shares each miner contributes to the pool.\n\nHowever, decentralization brings extraordinary challenges, particularly regarding network synchronization, peer discovery, and reward distribution. Let’s dive into the key improvements and hurdles we've encountered over the last few months.\n\n## September - Laying the Groundwork\nIn September, our focus was primarily on improving the connection handling within the P2Pool network. Long read/write locks were causing UI controls to become unresponsive, making it hard for users to interact with the application. We implemented improvements that ensured a smoother user experience, particularly for home users connecting with the network.\n\n## October - Overcoming Sync Issues and Improving Connectivity\nOctober saw a series of updates aimed at stabilizing P2Pool and improving its reliability. The introduction of v0.5.39 included under-the-hood changes to address the persistent CPU mining issue caused by failing node infrastructure. Although this didn’t immediately resolve the problem, it was a step in the right direction.\n\nAnother important release focused on enhancing P2Pool's network connectivity. The challenge of synchronizing the P2Pool network and forming consensus among miners was still a significant hurdle. By the end of the month, we rolled out v0.5.42, which introduced a hard fork to P2Pool — a breaking change designed to improve pool sync and address some of the intermittent mining issues.\n\n## November - Building Momentum and Fixing the Bugs\nAs we moved into November, P2Pool continued to evolve. We implemented network optimization improvements that reduced redundant data transfers and allowed for better synchronization between peers. We also introduced a more robust peer management system, including greylisting and auto-blocking disruptive peers.\n\nAlpha testing of the new pool sync methods yielded positive results, with miners achieving an 80%+ daily win rate in smaller test groups. However, when the changes were rolled out more widely, new issues emerged, including excessive peer network traffic and fragmentation of pools. To address this, we focused on refining our peer discovery strategy, adding more relays to improve connectivity between miners.\n\n## December - Tackling Fragmentation and Reward Distribution\nHeading into December, we've seen both progress and new challenges. We’ve made significant strides in network optimization, achieving over 70% daily wins for networks of up to 200 miners. However, as miner counts exceed this threshold, we’ve experienced network fragmentation — with orphan pools and inconsistent performance.\n\nOur telemetry has provided valuable insights into the issue, and we’ve identified that libp2p communication reliability is a key factor. Miners experiencing timeouts and chain desynchronization contribute to the problem, particularly with low hash rate miners receiving inflated rewards.\n\nIn response, we’ve increased the sharechain block interval from 10 seconds to 30 seconds, which has improved synchronization and reduced fragmentation. We’ve also introduced new mining stats, including tip distance tracking and mining history improvements, giving miners more visibility into their performance.\n\nGoing forward, there are several issues we still need to address. Inconsistent chain-tip alignment among miners results in two groups of miners operating on two different chain levels, leading to latent shares and orphaned pools.\n\nWe also need to tackle the issue of scaling P2Pool. We’ve noticed that as more people participate, P2Pool performance and stability degrades. P2Pool scaling is a major technical hurdle that our contributors are actively grappling with and need to conquer for Tari Universe to reach its full potential.\n\n# A Big Thanks to the Tari Community\nAs this is the last update for the year, we’d like to thank our community for all of their efforts, hard work, and contribution to making P2Pool work over the past several months. You are helping shape the future of Tari - a future that ensures the democratization promised through blockchain and cryptocurrency is one that everyone, regardless of their resources or wealth, can participate in equally.",
        "title": "P2Pool End of Year Wrap-Up",
        "date": "2024-12-27T00:00:00.000Z",
        "excerpt": "As we close out 2024, we’d like to reflect on the development of Tari’s P2Pool implementation. P2Pool has always been a focus for Tari (ever since we announced Tari’s integration into the current...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-12-09-update-139",
        "content": "\nThis week's update is a small one - the community has been working on a plethora of issues and bugs that have been building up across the various projects to improve overall stability. Sometimes keeping a Zen garden entails designing new patterns, and sometimes it's about raking ***a lot*** of sand.\n\n## Universe\n### P2Pool\nP2Pool has seen the most attention over the past two weeks. This is a critical component of  Tari, but it remains a challenging feature to implement - the network interactions have proven a difficult beast to tame: in particular ensuring the various groups of peers aren't ending up on islands: able to view themselves across the waves but unable to sync their activities effectively.\n\nEvidence from Universe telemetry indicates channel capacity errors from excessive network traffic, likely due to the message load. In addition, we’ve also determined that a 10-second block interval for P2Pool was likely too optimistic for ideal node synchronization, so we’ll be testing 30-second intervals going forward.\n\nThese are complications you pick up once in actual implementation, with telemetry from Universe playing a key role in narrowing down root causes. To those sharing your data with us, thank you.\n\nSome of the many recent fixes and updates to P2Pool:\n* Corrected an issue with the chain verification process that resulted in a panic\n* Ensure disconnection from peers on older versions after a peer exchange\n* Avoid requesting blocks from peers that are at a lower height than the requester\n* Added pinned Tokio intervals for multiple required asynchronous checks\n* Adjusted the minimum SHA3X difficulty\n* Corrected an issue regarding target difficulty being adjusted outside of a block before the block is committed, which has implications for the integrity of mined blocks.\n\n## Minotari\nMintotari saw another release candidate go out with new features and improvements listed below:\n\n* A new service will periodically get checkpoints from a DNS server and validate against their state, removing the risk of miners avoiding orphan chain mining.\n* Fixed an issue specific to MacOS and Linux that would cause the base node to enter an unresponsive state if you pressed Ctrl+C multiple times, the command line interface (CLI) would enter an undefined state that prevented further interaction.\n* Reduced error log spam that occurred when on an unsupported network.\n* Added wallet connectivity timeout so long dial-peer failures can be managed timeously.\n* Changed Tari Pulse - Minotari's checkpoint monitoring service - to run at fixed intervals.\n\n## Aurora Wallet\nContributors released a new version of Aurora wallet a couple of days ago, incorporating updates and fixes [discussed in our previous update](https://tari.com/updates/2024-11-26-update-138) and some additional items. You can download the latest versions on the [Apple App Store](https://apps.apple.com/us/app/tari-aurora/id1503654828?ls=1) and [Google Play store](https://play.google.com/store/apps/details?id=com.tari.android.wallet&hl=en_US).",
        "title": "Upkeep in the Tari gardens",
        "date": "2024-12-10T00:00:00.000Z",
        "excerpt": "This week's update is a small one - the community has been working on a plethora of issues and bugs that have been building up across the various projects to improve overall stability. Sometimes...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-11-26-update-138",
        "content": "\n## Minotari\nMinotari saw a release candidate go out last week with two new additions.\n\n### Climbing those ranges\nThe first is an update to the header fields within the block. Specifically, we’ve introduced the Block Output Merkle Mountain Range (MMR) field, which consists of two MMRs containing coinbase and non-coinbase outputs. By breaking these two into two separate MMRs, we derive several benefits, especially for P2Pool:\n\n* Block Verification: The primary MMR allows someone to verify that the outputs in the block are correctly included and locked behind the Proof of Work (PoW) in the block header. They don’t need to look at every output in the entire blockchain.\n* Proof of Specific Outputs: If someone wants to prove that a specific output is part of the block, they can use the secondary MMR to create a proof that the output is indeed included in that block without needing to store the whole blockchain.\n* Efficiency: This approach allows nodes like P2Pool to only store a single hash and a list of outputs, instead of needing to store every output in every block. This makes it more efficient for verifying blocks without holding the entire blockchain history.\n\n### Livelier Liveliness \nMinotari monitors connections between nodes and frequently confirms that all connections are still valid and alive utilizing two services - The liveliness service and the MonitorPeersService. We’ve made several changes in their behavior to address connectivity issues:\n\n* We fixed an error in the liveness service where it would fail to disconnect peers that had not responded adequately to pings. The liveliness service selects eight randomly selected peers and disconnects them if they don’t respond to ping requests after a minute.\n* We added a connection check to the MonitorPeersService. It now pings, on a slow interval, all active connections and disconnects those that do not respond to three consecutive pings.\n\nThese changes should result in a more up-to-date peer list and reduce the number of active misbehaving connections.\n\n### Minotari Exchange Integration Guide\nWe’ve written a new guide for those interested in integrating Tari on their exchange. The guide currently goes through setting up a base node, wallet, and read-only wallet for monitoring transactions with examples of how you would call and utilize the gRPC methods within the base node.\n\nYou can find the guide [here](https://tari.com/lessons/09_adding_tari_to_your_exchange).\n\n## The Ootle\n### Tari CLI\nCommunity members have been working on a new command line tool to help developers quickly get up and running with creating, deploying, and testing out new template projects.\n\nTemplates are parameterized smart contracts that can then be executed and interacted with via the Ootle, allowing developers to create modular components that can be called from multiple applications or generate new smart contracts.\n\nThe tool is still a work in progress, but you can access the details [here](https://github.com/tari-project/tari-dan/pull/1203). Current functionality includes:\n* Automatic CLI configuration creation/restoration at every command run\n* Configurable templates repository.\n* Automatically keep up-to-date locally the templates repository.\n* Generating new projects (an empty Cargo workspace project with some extra detail).\n* Generating new WASM projects (if generating into a Cargo project, it updates its Cargo.toml automatically to include the new project as a workspace member).\n\n## Universe\n### P2Pool\nP2pool is still very much a work in progress. A small group of volunteers has been helping to test bleeding edge builds, and we’ve made meaningful progress. Previously, 40% of miners were earning rewards every 48 hours. Today, 40% of miners are earning rewards every 24 hours. We aim for 80%+ of miners to earn rewards every 24 hours.\n\nOur focus has been improving peer connectivity amongst home users with basic router setups, which often limit the number of incoming connections. In addition, we’ve changed the behavior of some P2Pool activities:\n* Universe will now aggressively look for peers to connect to.\n* When syncing to peers, Universe will now check for the block height of each peer and sync with the highest one. While we still need to confirm if this will have negative implications (such as an increased risk of “islands” or isolated chains), we believe this will have a positive impact.\n\n## Aurora Wallet\nAttention continues to be focused on bug fixes, performance, and stability for Aurora:\n* Refactored the transaction and contract repositories, and improved the performance of data import for those types significantly. ([PR #1260](https://github.com/tari-project/wallet-android/pull/1260))\n* Numerous bug fixes: crashes in the Contact Book when linking contacts, TTL store checkout issues, and more. ([PR #1262](https://github.com/tari-project/wallet-android/pull/1262), [PR #1271](https://github.com/tari-project/wallet-android/pull/1271))\n* Numerous UX improvements, such as skipping the Add Note dialog when scanning a QR Code that has its own note. ([PR #1267](https://github.com/tari-project/wallet-android/pull/1267))",
        "title": "Slow and steady progress",
        "date": "2024-11-26T00:00:00.000Z",
        "excerpt": "Minotari Minotari saw a release candidate go out last week with two new additions. Climbing those ranges The first is an update to the header fields within the block. Specifically, we’ve introduced...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-11-12-update-137",
        "content": "\n# Aurora Wallet\nThe [Aurora wallet](https://aurora.tari.com) received some attention from the Tari community over the past two weeks in preparation for the upcoming Tari Testnet Limited (TTL) store revamp. The store will allow those currently mining tXTM with Tari Universe to trade them for exclusive merchandise to thank them for their efforts in shaping Universe’s development. Note: kudos to those who read these updates and discover alpha in them :)\n\nThe wallet underwent extensive testing to identify outstanding bugs and issues with the overall user experience. Thanks to the community, users have the following to look forward to in upcoming releases:\n* Several UI/UX fixes dealing with issues around the transaction flows (such as the Go button being inactive when the note was empty, reverting to null after a transaction, and Aurora getting caught in a sending loop animation when sending Minotari).\n* Major fixes around transactions and how they reflect in the app, such as the balance not refreshing and the transaction history not being accurately reflected in the app.\nGiving the user better feedback regarding the Aurora app’s synchronization state with the blockchain.\n\n# Minotari\n## General\nMinotari community members have been chipping away at some minor rough edges of the base layer, improving overall system reliability and resource optimization. It’s not flashy like some of the new additions to Universe (more on this in a bit), but their efforts will dramatically improve performance and resource utilization. To quote [Dave Brandt](https://en.wikipedia.org/wiki/David_Brandt_(farmer)), “It ain’t much, but it’s honest work.”\n\nThe changes include:\n* Automatically disconnecting unresponsive peers after a set number of failed pings.([PR # 6655](https://github.com/tari-project/tari/pull/6655https://github.com/tari-project/tari/pull/6655))\n* Ensuring that messaging workers stop correctly when a peer connection is disconnected. ([PR #6653](https://github.com/tari-project/tari/pull/6653))\n* Efficiently closing unused RPC connections, preventing overloads, and optimizing wallet-to-node connectivity. ([PR #6649](https://github.com/tari-project/tari/pull/6649))\nUpdated build instructions for the Ledger Wallet on Nanosplus and Stax devices to ensure compatibility and smooth operation. ([PR #6673](https://github.com/tari-project/tari/pull/6673))\n\n# Libp2p\nCommunity members are actively looking at incorporating libp2p into Minotari. Libp2p is a decentralized framework for peer-to-peer applications, and its incorporation will offer significant benefits: improved interoperability across different operating systems and devices while improving connectivity in environments with strict NAT and firewall requirements.\n\nLibp2p is a significant change and is therefore undergoing rigorous testing to ensure that all necessary components of Minotari can communicate via libp2p. Progress has been positive, and the remaining issues should be addressed shortly. We’ll have more to add once it’s been implemented.\n\n# Tari Universe\nThe community continues focusing on Tari Universe, improving it with each subsequent release. With the latest version, users can enjoy:\n* A set of new loading information screens to better inform new users of Tari (and cryptocurrencies in general) what Tari is, what mining is, and other ecosystem elements. ([PR #969](https://github.com/tari-project/universe/pull/969))\n* The ability to set the power levels on your CPU and GPU mining via a slider so that you can adjust system resource utilization by Tari Universe.\n* P2Pool! Specifically, we introduced several optimizations, such as storing peers on disk for faster load up and reduced network usage, and stricter rules for maintaining healthy chain dynamics, such as limiting the number of uncle blocks.\n\n# The Ootle\nThe community is currently working to implement RocksDB on the production level. RocksDB is designed for high-concurrency, high-throughput, low-latency environments, making it the better choice for Ootle’s validator nodes in the production environment. You can read some of the particulars of [RocksDB here](https://rocksdb.org).",
        "title": "Aurora Wallet Updates",
        "date": "2024-11-12T00:00:00.000Z",
        "excerpt": "Aurora Wallet The Aurora wallet received some attention from the Tari community over the past two weeks in preparation for the upcoming Tari Testnet Limited (TTL) store revamp. The store will allow...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-10-29-update-136",
        "content": "\nWe’ve got some ground to cover this update, so let’s start with the project of the moment, Tari Universe.\n\n# Tari Universe\n## Tor Bridges\n\nWe’ve introduced Tor bridge functionality to Tari Universe. Tor bridges are particularly useful in environments where Tor is restricted or users require more security through obscurity than Tor would normally provide. Tari Universe now fetches a list of default bridges from https://bridges.torproject.org/bridges?transport=obfs4, but users can set their addresses as well. This should allow more people to use more of the features of Tari Universe, some of which are dependent on Tor access.\n\n## General Fixes and Improvements\n* Improved keyring access and methods for the storage of Monero seeds and Tari seed phrases if Tari Universe is denied keyring access, amongst several other scenarios that can be [reviewed here](https://github.com/tari-project/universe/pull/902)\n* Unattended auto-updating allows users who want to leave Tari Universe running unattended to automatically download new updates and restart following the update ([PR #899](https://github.com/tari-project/universe/pull/899))\n* Fixes galore: fixing the app freezing upon exit (appropriately assigned to [PR #911](https://github.com/tari-project/universe/pull/911)), issues around the importing of seed words from Windows ([PR #895](https://github.com/tari-project/universe/pull/895)), better monitoring ([PR #841](https://github.com/tari-project/universe/pull/841)), and more.\n\n## P2Pool: Current Status\nThe P2Pool has received much attention the past two weeks, with community contributors measuring pH levels, balancing chemicals, and still finding some time to throw in the occasional pool ring or wave machine\n\nMetaphor aside, we know P2Pool is a necessary and important feature for ensuring that everyone can participate within the Tari network equally and be rewarded for doing so. We understand its potential and ask for your patience a while longer while we get its implementation in Tari Universe right.\n\n# The Ootle\nWhile a lot (we mean, a lot) of focus has been on Tari Universe, progress continues at a steady pace on the Ootle. As the layer responsible for supporting all of the digital assets and decentralized apps for the Tari network, these developments, while understated, play a vital role in the overall usefulness of Tari: \n* The Tari Indexer has new information tabs in its UI, letting users visualize substates and events on the blockchain. [You can view the new sections here](https://github.com/tari-project/tari-dan/pull/1171)\n* New features for the Tari Swarm Daemon include the option to auto-mine, and the automatic registration of new templates that have been added to the templates folder following a swarm reset. The daemon allows developers to run a swarm of local nodes and is a key component of being able to test contracts, templates, and the fundamentals of the Ootle layer ([PR #1174](https://github.com/tari-project/tari-dan/pull/1174), [PR #1185](https://github.com/tari-project/tari-dan/pull/1185))\n* Implements gossipsub for broadcasting of both mempool and consensus messages on the Ootle, allowing for future extension while streamlining the messaging infrastructure ([PR #1156](https://github.com/tari-project/tari-dan/pull/1156))\n* Improved participation incentives by introducing a configurable setting to suspend validator nodes that fail to participate in several consecutive rounds, with the ability to rejoin once they've participated in five sets of voting rounds\n* Introduced a trickle-in mechanism for new validator nodes, reducing consensus lockup in the event of a large number of validator nodes waiting on registration each epoch ([PR #1182](https://github.com/tari-project/tari-dan/pull/1182))\n\n# Minotari\nA host of improvements and additions have been added to Minotari:\n* We’ve added the option to configure multiple DNS servers for improved resilience. By default, Cloudflare, Google, and Quad9’s DNS servers are provided, and Tari will cycle through them if one is unable to respond ([PR #6629](https://github.com/tari-project/tari/pull/6629))\n* Alignment of the mobile wallet recovery process to match that of the console wallet: the mobile wallet now works with a list of base nodes, rather than a single peer. ([PR #6636](https://github.com/tari-project/tari/pull/6636))\n* Improved wallet base node connectivity by introducing a cool-down between base node connection attempts to the same node when multiple nodes are available in the base node peer manager. ([Link](https://github.com/tari-project/tari/commit/8bc8166a48973632f2748c495e61d738f44c55a3))",
        "title": "Building bridges, sweeping pools",
        "date": "2024-10-29T00:00:00.000Z",
        "excerpt": "We’ve got some ground to cover this update, so let’s start with the project of the moment, Tari Universe. Tari Universe Tor Bridges We’ve introduced Tor bridge functionality to Tari Universe. Tor...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-10-14-update-135",
        "content": "\nWelcome to the next Tari update. Tari Universe, much like its namesake, continues to expand at an astronomical rate, and we have you to thank for it. We’d like to share some stats regarding the known Universe:\n\n* The [Tari Universe waitlist](https://universe.tari.com/) is now sitting at over 260,000 sign-ups.\n* There are over 16,000 downloads of Tari Universe.\n* On average, each Tari Universe user's sent invites has resulted in four of their invited friends installing Tari Universe and enrolling in the incentivized testnet.\n\nInterest in Universe has also been driving parties to the underlying [Tari protocol and base apps](https://github.com/tari-project/tari), and as a result, the combined mining on our testnet has reached over 800GH/s for our SHA3x GPU hash rate - an almost 6500% increase from where we were at the start of last week.\n\nWe’ve also learned some hard lessons as Tari is now being stress-tested in the only way that truly matters: in the wild and the hands of users. Reliability of the installation and updating process, general network connectivity, network fragmentation, and the ability to recover from some common user errors have all reared their head, and contributors are working hard to conquer these demons as quickly as possible. Thank you to everyone in the Tari community for your patience and detailed feedback. Together, we will make Universe the most beautiful and easiest-to-use crypto product in the world.\n\n### New Tari Universe Developments\nThe community has been working tirelessly in the commit mines, and their efforts have translated into some great new features and stability fixes:\n* Like our Mac and Linux versions, Tor is now enabled by default on Tari Universe for Windows users. This has helped resolve many network connectivity issues that impacted users’ experience with Tari Universe in the past week. You can [find out more about Tor here.](https://tlu.tarilabs.com/protocols/intro-to-tor-and-i2p#tor-network)\n* [We’ve added CDN mirrors for the dependencies](https://github.com/tari-project/universe/pull/658) downloaded when installing and subsequently updating Universe and some additional automated downloads of unique dependencies in different environments. This ensures better reliability both when installing Universe for the first time and when keeping it up-to-date.\n* There have been various graphical improvements and user enhancements to the experience of winning blocks, [earning gems](https://github.com/tari-project/universe/pull/682), and [tracking your reward history](https://github.com/tari-project/universe/pull/723).\n* We’d like to give a shoutout to our community members who have recently contributed German and French localizations: [W666lker (German)](https://github.com/tari-project/universe/pull/802) and [firebomb (French)](https://github.com/tari-project/universe/pull/717). Thank you for helping us make Tari Universe even better.\n\n## Minotari - Base Layer\n### Unofficial Ledger Wallet Now Available\nWhile it’s been includes in previous releases for a while, we wanted to highlight that there is now a Tari native [Ledger](https://www.ledger.com/) wallet app for the Nano S Plus included with our [Minotari releases](https://github.com/tari-project/tari/releases), which can be manually side-loaded on the Nano S Plus. In addition, this week we’ve added support for the Stax and Flex devices, although the app currently has to be built from source and has some known issues contributors are working on resolving. If you want to learn more about Tari Ledger support, you can head over and [check the readme for the project](https://github.com/tari-project/tari/tree/development/applications/minotari_ledger_wallet/wallet).",
        "title": "The Tari Constant",
        "date": "2024-10-14T00:00:00.000Z",
        "excerpt": "Welcome to the next Tari update. Tari Universe, much like its namesake, continues to expand at an astronomical rate, and we have you to thank for it. We’d like to share some stats regarding the known...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "/assets/updates/img/update-background.jpg",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-10-04-update-134",
        "content": "\nWe’ve got a lot to share with you this update, with new features and improvements across Tari’s projects. Let’s start with what has been a core focus for us over the past two months - the release of Tari Universe.\n\nWe recently launched, [Tari Universe](https://universe.tari.com/), a desktop mining app that provides an easy, elegant way to mine Tari with 1-click. The aim is to simplify the setup of Tari mining and provide a user-friendly interface that clearly communicates essential information and makes it easy to configure the miner to the user’s preferences. We consider this key to make Tari more approachable to a broader audience.\n\nWe’ve limited access to the app to test it out in a controlled manner and get relevant feedback at each stage. If you’re interested in participating, you can join the waiting list for early access on the [Tari Universe launch site](https://universe.tari.com/) or by finding and existing user and getting their invite link. By joining us on this journey, you'll have the opportunity to earn airdrop gems. The more you mine, and friends you invite, the more gems you’ll earn. For more information on other ways to earn gems, turtle shells and sky hammers, please visit the [Tari Airdrop Game website](https://airdrop.tari.com/).\n\nWe’d like to thank the community - veterans and newcomers alike - currently exploring the Universe and providing valuable suggestions and feedback. Thanks to your support, we’ve added some great useability features, improved the overall user experience, and learned valuable lessons for future mainnet deployment.\n\n### Providing More Languages for Tari Universe\n\nIf you're keen to get involved, we'd love you to expand Tari Universe's supported languages. Tari Universe handles this through JSON localization files, which make it easy for anyone to review or add new localizations to the project. We've put together a guide for those interested in getting involved in this area of Tari's development, [which you'll find here](/lessons/07_add_new_localizations).\n\n## Minotari - Base Layer\n\n### P2Pool Progress\n\nThe incorporation of P2Pool support into Minotari continues to progress. Since our [last update](https://tari.com/updates/2024-07-22-update-133), we’ve added support for merge mining, randomX proof of work algo usage, custom coinbase data to block requests, and more. There is more work to do on the P2Pool front and our goal is to release a major update next week.\n\n### Wallet Improvements\n\nThe ability to [encrypt your seed words](https://github.com/tari-project/tari/pull/6569), [additional resilience for network reliability](https://github.com/tari-project/tari/pull/6527), and new features to the console wallet like [generating a paper wallet and additional fields to the informational tabs](https://github.com/tari-project/tari/pull/6531) round out crucial work done on Minotari's reliability and security.\n\n## The Ootle - Tari’s Layer 2\n\n### Concentrating on Consensus\n\nFixes and fine-tuning have been the focus of development for the Ootle’s consensus mechanisms for the past two months. Some notable fixes include (but are certainly not limited to):\n\n- Many improvements to the transaction creation process, the inclusion of evidence data, reduced validator node setup time, and additional fixes ([PR 1141](https://github.com/tari-project/tari-dan/pull/1141))\n- A fix of substate pledges in multi-shard implementations ([PR 1119](https://github.com/tari-project/tari-dan/pull/1119))\n- Deference of proposed transactions with conflicting input versions for multi-shard environments ([PR 1125](https://github.com/tari-project/tari-dan/pull/1125))\n- Improvements around evidence data, including optimization and security improvements such as the inclusion of a unique QC ID for auditing purposes. ([PR 1141](https://github.com/tari-project/tari-dan/pull/1141), [PR 1130](https://github.com/tari-project/tari-dan/pull/1130))\n",
        "title": "Welcome to the Universe",
        "date": "2024-10-04T00:00:00.000Z",
        "excerpt": "We’ve got a lot to share with you this update, with new features and improvements across Tari’s projects. Let’s start with what has been a core focus for us over the past two months - the release of...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-07-22-update-133",
        "content": "\nWe're excited to share the latest updates and enhancements for July 2024. Here's a brief summary of the key changes:\n\n## State of P2pool\n\nWe are thrilled to announce significant progress in our P2pool projects. If you haven't heard of P2pool before, it allows miners to combine their hashing power without relying on a centralized pool operator. It works by creating a network, parallel to Tari, where miners share their computing power to find blocks and split the rewards based on how much each miner contributed.\n\nIn simple terms, P2pool allows you to still earn some portion of the block rewards, even if there are large mining warehouses also mining Tari.\n\n- **Integration for Tari and Other Merge-Mining Coins**: The integration with the current [P2pool project](https://github.com/SChernykh/p2pool) is ready for testing, focusing on mining with RandomX.\n- **SHA3x Mining with Tari**: Our second implementation, focusing on SHA3x mining with Tari, is in an alpha stage and available [here](https://github.com/tari-project/sha-p2pool). While currently requiring compilation from source, binaries will be available soon.\n\n## Upgrade of Tari Addresses to Include View Keys\n\nThe next version of Nextnet will introduce Tari Addresses with an embedded View Key, unlocking exciting new features. A view key consists of a public key and a private key. When someone sends you funds, they will know the public view key, but you should keep the private view key safe. Whoever has your private view key can see all the funds you currently have, but cannot spend them. Here are some examples of how you might use this functionality:\n\n### Separate View-Only and Spending Wallets\n\nThis update allows for a cold wallet spending key and a hot wallet view key. This is ideal for online stores, exchanges, and other applications that benefit from a secure, view-only hot wallet.\n\n### Optional Revealing of Funds\n\nThe view key structure enables sharing a private view key to reveal funds to a third party. Future developments may include a lite wallet server that scans the Tari blockchain and provides a simple interface for accessing your balance.\n\n## Ootle Developments\n\nTari's second layer, the Ootle, continues to progress rapidly. The Ootle already allows validators to join and leave, but there are complications that arise when the shard space splits and joins. We often refer to this as Epoch Management. The main goal of this phase of development is to finish off all development related to Epoch Management. After that, the community will focus on performance and benchmarking.\n\n### Improved Syncing for Network Validators\n\nValidator syncing has been significantly optimized by [sdbondi](https://github.com/sdbondi), utilizing checkpoints to avoid downloading the entire chain since the genesis. This enhancement is crucial as we anticipate a substantial increase in data generation on the Ootle.\n\n### Tari Swarm Improvements\n\nTari Swarm, a tool for developers to run the Ootle locally with many validators, has received several quality-of-life improvements, enhancing its usability and efficiency.\n\n### The Road Towards Gasless Transactions\n\nGasless transactions are gaining traction in blockchain. The Ootle now supports transactions with multiple signers, paving the way for third-party gas fee payments. Stay tuned for further developments in this area.\n",
        "title": "Latest Commits and Enhancements",
        "date": "2024-07-24T00:00:00.000Z",
        "excerpt": "We're excited to share the latest updates and enhancements for July 2024. Here's a brief summary of the key changes: State of P2pool We are thrilled to announce significant progress in our P2pool...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-06-11-update-132",
        "content": "\n## Ledger Device support\n\nOver the past few months, the Tari community has been working on integrating with Ledger. Unfortunately, Tari won't be included in Ledger Live anytime soon due to its current architecture. However, support for using Ledger hardware devices with Tari's console wallet is expected soon.\n\n## View Keys\n\n[PR #6353](https://github.com/tari-project/tari/pull/6353) enables view keys on Tari addresses. While this makes the address longer, view keys allow for more scenarios and open the door to potential lite wallets in the future. This upgrade will be included in the next reset of Nextnet.\n\n## Layer Two Devnet\n\nThe layer two (Ootle) devnet is up and running. This network is primarily targeted at contract developers and so, will have a fixed number of validator nodes to ensure stability. You can use the [indexer](https://indexer-devnet.tari.com) to connect your asset vault. Additionally, a test Metamask Snap is available at [this link](https://splendorous-churros-36e6bf.netlify.app/).\n\n# What is next?\n\n## Launchpad stability fixes\n\nUsers have experienced several issues with Launchpad. The next version of Launchpad is nearly ready and should alleviate these problems. More details will be available soon.\n",
        "title": "What is new?",
        "date": "2024-06-11T00:00:00.000Z",
        "excerpt": "Ledger Device support Over the past few months, the Tari community has been working on integrating with Ledger. Unfortunately, Tari won't be included in Ledger Live anytime soon due to its current...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-03-27-update-131",
        "content": "\n## What is different?\n\nWith the current release, there are some differences in _Copy - Paste_ behaviour on Windows compared to Ubuntu and Mac. This post will guide you through the changes and how to work around them.\n\n```\n>> Emoji IDs cannot be pasted directly into the Launchpad fields on Windows, but, it can be displayed.\n```\n\n## Getting started\n\nFollow the instructions in the [installation guide](https://www.tari.com/launchpad-guide/) to get going, just mind the bit where references are made to your wallet address' emoji ID.\n\n## The workaround\n\nThe long and short of it is that Launchpad must be run in a Windows Terminal, not Windows Console or Powershell, otherwise paste does not work at all. There are some simple ways to get around this.\n\n### Prerequisites\n\nWindows Terminal must be installed. To see if you have it, type `wt` followed by `Enter` in `Start Menu`. If it is installed, it will start, otherwise, you must install it. \n\nThe [official Microsoft article](https://learn.microsoft.com/en-us/windows/terminal/install) is really good. To install, just follow the simple [_Install_](https://learn.microsoft.com/en-us/windows/terminal/install#install) instructions.\n\n### Method 1: Set Windows Terminal as the default terminal application\n\nThis is the easiest and preferred method. Follow the [_Set your default terminal application_](https://learn.microsoft.com/en-us/windows/terminal/install#set-your-default-terminal-application) instructions to get it done. From now on, to run Launchpad, just double-click the executable (`tari_launchpad_cli-windows-x64.exe`) and it will start in Windows Terminal.\n\n### Method 2: Run Launchpad via a batch file that starts it in Windows Terminal\n\nIf you do not want Windows Terminal to be your default terminal application, you can create a batch file to start Launchpad in Windows Terminal when executed. Just create a batch file called `start.bat` (or similar) and place it next to the Launchpad executable (`tari_launchpad_cli-windows-x64.exe`):\n```shell\nwt %~dp0tari_launchpad_cli-windows-x64\n```\nTo run Launchpad, just double-click the batch file and it will start in Windows Terminal.\n\n### Method 3: Run Launchpad from the command line to start it in Windows Terminal \n\nIf either of the two previous methods do not catch your fancy, you can always start Launchpad in Windows Terminal from the command line. Just navigate to the directory where the Launchpad executable is located and type:\n```shell\nwt tari_launchpad_cli-windows-x64\n```\n\n## Copy-Paste\n\nOnly normal text, like the wallet address in hex format, can be pasted directly into the Launchpad fields. To paste, `Ctrl-V` works as usual, but you can also use `Right mouse click` if preferred. \n\n## Thank you\n\nThank you for bearing with us and being patient in navigating some of these niggling differences between Windows and Ubuntu/Mac.\n",
        "title": "Launchpad on Windows",
        "date": "2024-03-27T00:00:00.000Z",
        "excerpt": "What is different? With the current release, there are some differences in Copy - Paste behaviour on Windows compared to Ubuntu and Mac. This post will guide you through the changes and how to work...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-02-23-update-129",
        "content": "\nWe're pleased to announce a few big updates in Tari's documentation efforts.\n\n## Tari Aurora\n\nFirst up, [@NovaT82](https://github.com/NovaT82) has put together the first series of videos walking you through the \n functionality of the Tari Aurora wallet.\n\nYou can see the video catalogue on the [Tari Aurora site](https://aurora.tari.com/videos/).\n\nThis first set of videos focuses on the bare essentials of sending and receiving Tari, as well as connecting a Yat \nto your wallet. \n\n<div align=\"center\">\n  <iframe width=\"600\" height=\"400\"  src=\"https://www.youtube.com/embed/nv8HqsoXqko\" \n    title=\"Sending Tari\" \n    allow=\"autoplay; encrypted-media; gyroscope; picture-in-picture; web-share\" \n  allowfullscreen>\n  </iframe>\n</div>\n\n\nFuture videos will explore some of the lesser-known features of the wallet, including UTXO (e-note) management, \nback-ups, and bug reporting.\n\n## Tari Launchpad\n\nWe've also been working on the Tari Launchpad documentation.\n\nThe [Tari Launchpad guide](\\launchpad-guide) has been updated in the last week. Aaaand... we added a video that gets \nyou going with Tari mining in under (almost) five minutes!\n\nCheck it out [in the launchpad guide](\\launchpad-guide), or from our [YouTube channel](https://www.youtube.com/channel/UCFjcsEiAtr9mC1Yt0uJ-3xA).\n\n<div align=\"center\">\n  <iframe width=\"600\" height=\"400\"  src=\"https://www.youtube.com/embed/Z_43z5Gx3v4\" \n    title=\"Launchpad Mining guide\" \n    allow=\"autoplay; encrypted-media; gyroscope; picture-in-picture; web-share\" \n  allowfullscreen>\n  </iframe>\n</div>\n\n\n\n\n\n\n",
        "title": "Documentation updates",
        "date": "2024-02-23T00:00:00.000Z",
        "excerpt": "We're pleased to announce a few big updates in Tari's documentation efforts. Tari Aurora First up, @NovaT82 has put together the first series of videos walking you through the   functionality of the...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-02-14-update-128",
        "content": "\nWelcome to Developer Update #10,000,000!\n\nBinary haters will say it's only number 128.\n\n## The Tari base layer audit\n\nWe announced the start of Tari's base layer code audit way back in \n[Developer update #112](/updates/audit-announcement/). \n\nThe review was completed in November 2023 -- a four-month effort -- and the audit report from Coinspect is now \n[available](https://www.coinspect.com/tari-security-audit/), and we are happy to share it with the community.\n\nThe audit covered around 60% of the most critical parts of the quarter million lines of Tari's base layer code.\n\nI must commend the incredible work done by the Coinspect team. The fact that they could take such a complicated \npiece of software, break it down, and put their finger on so many high severity issues in a relatively short \nperiod is testament to the expertise that was deployed on this audit.\n\nThe architectural diagram they produced, I'm somewhat abashed to write, provides a clearer picture of information flow \nbetween the Tari base layer subsystems than anything currently in our [doc stack](https://rfc.tari.com)! We may have \nto commandeer this diagram for RFC-0111 going forward :)   \n\n![Tari base layer architecture](https://www.coinspect.com/assets/images/blog/tari-tm.png)\n\n## The audit process\n\nThe Coinspect team worked independently of the Tari core developers, but we scheduled regular calls to share progress \nand feedback as to the general themes of issues that were being discovered.\n\nFor example, the auditors identified a cluster of issues around merge-mining. \nThere was another thematic cluster of issues concerning data handling which could lead to denial-of-service attacks.\n\nThis early and regular feedback made it clear that we were missing multiple issues that had a common underlying cause. \nAfter some investigation and multiple discussions, we identified several shortcomings in our review processes.\n\nThe core developers then set about developing a \nnew set of [processes](https://pqri.org/wp-content/uploads/2015/08/pdf/HAZOP_Training_Guide.pdf) and \n[guidelines](https://github.com/tari-project/tari/blob/ab8d96afa0808f6afe498e82172ac1475968a286/docs/src/reviewing_guide.md) \nfor managing code quality and started applying it both retroactively and to new code.\n\nThe impact was immediate and the frequency of high-severity issues found by Coinspect started to drop off significantly.\n\n## The results\n\nUltimately, there were quite a large number of high-severity issues (22) identified by the auditors, even considering \nthe size of the code base.\n\nOf note, there were zero **critical** issues identified.\n\nThese issues have all been resolved and identified as such by Coinspect.\n\n<img src=\"/assets/updates/img/audit-issue-count.png\" alt=\"Audit results\" class=\"responsive-image\">\n\n## Conclusion\n\nThe fact that the core consensus code and blockchain systems have had an expert set of eyes cast over them aside, \nthe learnings taken from working with the Coinspect team and the subsequent improvements to the Tari code review \nprocess are the most valuable aspect of the entire exercise.\n\n<img src=\"/assets/updates/img/audit.webp\" alt=\"Auditing the block chains\" class=\"responsive-image\">\n\nI am quietly confident that when the time comes for the Layer Two audit, the steps that have been put in place will \nbe evident, and the concentration of findings will be severely reduced, even given that the layer 2 code is \ncompletely new and, in many places, unique technology. \n\nI'll let the Coinspect team have the last word, taking this quote from their \n[blog post](https://www.coinspect.com/tari-security-audit/):\n\n> Tari is a great example of a bleeding-edge blockchain with several features that make it an interesting case study \nwith non-trivial vulnerabilities...\nInteractions with Tari during the audit process were superb. The development team showed understanding of the \nissues encountered and promptly began the work to not only fix the reported issues but to implement recommended \nsecurity policies such as fuzzing. They have shown that security is a top concern for them and are committed to \ncontinually decrease the risk for future users.\n\n\n\n\n",
        "title": "The Tari base layer audit report",
        "date": "2024-02-14T00:00:00.000Z",
        "excerpt": "Welcome to Developer Update #10,000,000! Binary haters will say it's only number 128. The Tari base layer audit We announced the start of Tari's base layer code audit way back in  Developer update...",
        "thumbnail": "/assets/updates/img/audit_bg.webp",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-01-24-update-127",
        "content": "\nWith the newest releases of MinoTari we have changed a bit how to get up and running with mining.\n\n## Install the Minotari Aurora Wallet\n\nTari Aurora is available on the [Apple App](https://apps.apple.com/us/app/tari-aurora/id1503654828)\nand [Google Play](https://play.google.com/store/apps/details?id=com.tari.android.wallet&hl=en&gl=US) stores. This is only for the Stagenet version. If you want to get access to the Nextnet version of Tari Aurora, please see [IOS test flight](https://testflight.apple.com/join/8ccFp84C) or [Android](https://app.bitrise.io/app/a5c3eb49143b3bc5/build/9d61f413-4cd5-4857-bdac-69a48de0da5d/artifact/b288e7e9166571dc/p/88de4dd570cd21f845d2c60c3233a0d5)\n\n# Install the MinoTari Suite\n\n## Windows\n\nHead to the downloads page of the [Tari Website](https://www.tari.com/downloads/) to get the latest installer (tari_suite-...-windows-x64-installer.exe) and execute it; this will guide you through the setup\nand install all dependencies. Just double-click the installer and accept all the default prompts. Binaries are available\nto download, but the recommended way for Windows is to use the installer.\n\n## OSX or UNIX\n\nHead to the downloads page of the [Tari Website](https://www.tari.com/downloads/) to get the latest binaries for your OS.\n\n### Install XMRig\n\nThis is only applicable if you plan to do Monero merge mining. Tari uses XMRig for merge mining and it can be downloaded\nfrom their [website](https://xmrig.com/download).\n\n# Runtime\n\n## MinoTari Node and Console Wallet\n\n### Starting Windows\n\nMinoTari node and Console Wallet can be started by double-clicking on the shortcut. \n\n### Starting with OSX or UNIX\n\nMinoTari node can be started in a new terminal with: `./minotari_node`\nConsole Wallet can be started in a new terminal with: `./minotari_console_wallet`\n\n### Running\n\nOn first run the MinoTari Node or Console Wallet, it will ask you if you want to mine, select `Y` and press enter. \n\nThe MinoTari node will ask you on the first run if you want to create an ID, select `Y` and press enter.\n\nThe Console Wallet will take you through a setup guide to get started. When asking for the password, note that it does not show typed characters, this is for security reasons. \n\n### Exit\n\nExit the base node with the following:\n\n```console\nCtrl-C\n>> quit\n```\n\nExit the console wallet by pressing `F10` or `ctrl-c`.\n\n\n## Run the Sha3x miner: \n\nRun MinoTari_miner to start the miner with the base node running. \nOn startup it will ask for your MinoTari node address, the default should be correct if you have not changed anything, just press enter. \nNext, it will ask for your wallet address, enter your console wallet address or Tari Aurora wallet address. Press enter.\nIt should start mining. \n\n## RandomX/Monero Merge Mining\n\n### Edit the XMRig Config\n\n#### OSX / Linux:\n\nEdit the `config.json` file in your XMRig install folder, and remember to add your own respective Monero wallet address\nor select one from above.\n\n```console\n{\n    \"autosave\": true,\n    \"cpu\": true,\n    \"opencl\": false,\n    \"cuda\": false,\n    \"pools\": [{\n        \"coin\": \"monero\",\n        \"url\": \"127.0.0.1:18081\",\n        \"user\": \"YOUR MONERO WALLET ADDRESS HERE\",\n        \"pass\": \"MyWallet\",\n        \"tls\": false,\n        \"daemon\": true\n    }]\n}\n```\n\n#### Windows:\n\nNothing to do here for Stagenet - this is done automatically when the Windows installer is run, however, if you want to\nrun mainnet, do the following:\n\nEdit `config\\xmrig_config_example_mainnet.json` to add your own Monero mainnet wallet address or select the one above.\n\nEdit `runtime\\source_xmrig_env.bat` - change\n\ncopy `/y /v \"%config_path%\\xmrig_config_example_stagenet.json\" \"%TARI_XMRIG_DIR%\\config.json\"`\n\nto\n\ncopy `/y /v \"%config_path%\\xmrig_config_example_mainnet.json\" \"%TARI_XMRIG_DIR%\\config.json\"`\n\n### Run the Merge Mining Proxy\n\n#### OSX / Linux:\n\nOpen a terminal at the XMRig installation location and execute the following:\n\n`minotari_merge_mining_proxy`\n\n#### Windows:\n\nDouble-click the shortcut or start it via the Windows menu (`Tari Testnet`).\n\n### Run XMRig\n\n#### OSX / Linux:\n\nOpen a terminal at the XMRig installation location and execute the following:\n\n`xmrig`\n\n#### Windows:\n\nDouble-click the shortcut or start it via the Windows menu (`Tari Testnet`).\n\n### More information\n\nThis is a very limited quick guide to get started with MinoTari, and only shows the basic settings. More detail is\navailable on the [github page](https://github.com/tari-project/tari).",
        "title": "Mining with  MinoTari",
        "date": "2024-01-24T00:00:00.000Z",
        "excerpt": "With the newest releases of MinoTari we have changed a bit how to get up and running with mining. Install the Minotari Aurora Wallet Tari Aurora is available on the Apple App and Google Play stores....",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-01-10-update-125",
        "content": "\nWhen we updated our Responsible Disclosure policy\n[last year](https://github.com/tari-project/tari/blob/72daaf5ef614ceb805f690db12c7fefc642d5453/SECURITY.md), we did so\nwith a very limited budget.\n\nMembers of the community were very quick to point out that the size of the rewards were not commensurate with the scale\nof the issues we were asking the community to help us find.\n\nNow that 2024 has rolled in, and we're in touching distance of the Minotari mainnet launch, we're able to\nsubstantially increase the value of the rewards we're offering; primarily in the form of Tari tokens.\n\n<style>\n.blink {\n  animation: blinker 2s linear infinite;\n  text-align: center;\n}\n\n@keyframes blinker {\n  0%, 100% { opacity: 1; transform: scale(1); }\n  50% { opacity: 0.25; transform: scale(1.1); }\n}\n</style>\n\n<p class=\"blink\">\n🎉🎉🎉 Bounties up to $250,000 worth of XTR 🎉🎉🎉\n</p>\n\nYes, for all intents and purposes, we'll pay you a quarter bar in Minotari tokens for consensus-breaking bugs.\n\nThere are some Ts & Cs. I've highlighted the major ones below, but you can skip all of\nthis and go and read the full, updated [Tari Security Policy] right away.\n\nWe are still offering cash rewards, but the lion's share of the reward value will be coming from\nthe token bounty allocation.\n\nGet cracking!\n\n![Hacker](/assets/img/posts/hacker2.webp)\n\n### Cash bounties\n\nThe payouts for cash bounties have actually gotten a slight boost. We have partnered with HackerOne for our new bounty\nprogramme, and the payouts are as follows:\n\n| Severity | Maximum bounty | Example of vulnerability                                                                                       |\n|----------|----------------|----------------------------------------------------------------------------------------------------------------|\n| Critical | $5,000         | Inflation bugs, spending unowned funds, Producing valid blocks without mining                                  |\n| High     | $2,000         | Double spends, Severe DoS, Forcing hard forks, severe TariScript vulnerabilities, remote access of wallet keys |\n| Medium   | $750           | Other DoS, other TariScript vulnerabilities                                                                    |\n| Low      | $100           | Minor bugs or non-blockchain issues (e.g. on tari.com, explore.tari.com etc.)                                  |\n\n### Token-based bounties\n\nIf you make use of the HackerOne programme, we may issue a token reward _in addition_ to the cash bounty. The\ntoken rewards are awarded according to the following schedule:\n\n| Severity | Bounty Range\\*      | Example of vulnerability                                                                                       |\n|----------|---------------------|----------------------------------------------------------------------------------------------------------------|\n| Critical | $100,000 - $250,000 | Inflation bugs, spending unowned funds, Producing valid blocks without mining                                  |\n| High     | $25,000 - $75,000   | Double spends, Severe DoS, Forcing hard forks, severe TariScript vulnerabilities, remote access of wallet keys |\n| Medium   | $5,000 - $15,000    | Other DoS, other TariScript vulnerabilities                                                                    |\n| Low      | $500 - $5,000       |                                                                                                                |\n\n*As the Minotari price is unknown prior to launch, values are quoted in USD-equivalent terms at time of delivery. The\nbounties will be paid out in Minotari. For example, if the trading price of Minotari was $0.04, a\nmedium-severity award of $10,000 would be converted to 250,000 Minotari tokens.\n\n## Terms and conditions apply\n\n### Tokens will be distributed after launch\n\nSo, firstly, the token rewards can only be paid once Minotari actually exist. Obviously. But we'd love to have any\nbugs that warrant the highest payout to be found _before_ launch. Obviously.\n\nSo we're kicking off the bounty program now,\nand handing out IOUs for the tokens to be paid out a few months after launch. The delay is there to let the Minotari\nprice stabilise for a period before issuing the awards.\n\nThe cash rewards are a little sweetener, in addition to the tokens, to\ncompensate for the time delay between disclosure and token payout.\n\n### Cash rewards can only be claimed on HackerOne\n\nWe're working with HackerOne to manage the bounty program. **All** the cash rewards will be paid out through that\nprogram, and you'll need to register with HackerOne to claim them.\n\nIf you find a bug but don't want to register with HackerOne, you can still claim the token reward but will forego the\ncash bounty.\n\nNon-critical, non-HackerOne disclosures will likely take much longer to triage, since these disclosures must be\nprocessed by the core developers, and they're rather busy prepping for mainnet launch.\n\n### Read the full disclosure policy\n\nYou can read all the fine print, along with instructions on how to join the HackerOne bounty program in the\n[Tari Security Policy] document. Thank you for helping us make Tari more secure!\n\n![Hacker](/assets/img/posts/hacker.webp)\n\n\n[Tari Security Policy]: https://github.com/tari-project/tari/security/policy \"Tari Responsible Disclosure Policy\"\n\n",
        "title": "A new bug bounty program!",
        "date": "2024-01-10T00:00:00.000Z",
        "excerpt": "When we updated our Responsible Disclosure policy last year, we did so with a very limited budget. Members of the community were very quick to point out that the size of the rewards were not...",
        "thumbnail": "/assets/updates/img/hacker_bg.webp",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2024-01-17-update-126",
        "content": "\nWe [launched] Tarilabs University (TLU) way back in 2019 to help developers learn how to build on Tari. \nInitially, the idea was for Tari Labs engineers to do a deep dive on a topic and then present a seminar to the \ncommunity. The report, and/or slides, would then be published on TLU for anyone to read.\n\n![The original TLU website](/assets/updates/img/tlu_1.0.webp)\n\nWe gave TLU a fresh new look and feel in early 2022, which broadly kept the same content with a modern \nnavigation paradigm, a look that has persisted until today.\n\n## Tarilabs university 2.0\n\n![TLU 2.0](/assets/updates/img/new_tlu.webp)\n\nToday we're launching [TLU] 2.0, which is a complete overhaul of the site. All the original content is still there,\nbut we've added a loads more curated content to help fill the knowledge gaps between \"curious developer\" and \n\"fully-armed blockchain engineer\".\n\n### What is new?\n\n#### Courses\nWe've arranged much of the content into [courses]. Each course collects a variety of learning sources together, \n including, for the first time, videos, as well as the traditional reports and slide decks. The content follows a \nprogression to build towards achieving a concrete set of learning goals.\n\nFor example, the [Introduction to blockchain](https://tlu.tarilabs.com/intro-to-blockchain/) course assumes you have \nalmost no prior knowledge of blockchain technology, and presents several videos and articles, culminating in an \nannotated reading of the Bitcoin white paper.\n\n#### Tari Tutorials\n\nWe've finally gotten around to updating [Tari Rustpen](https://rustpen.tari.com) with the latest Tari cryptography \nlibraries. This means that all of the interactive tutorials in the [Cryptography 101](https://tlu.tarilabs.com/cryptography-101/)\ncourse are using the same elliptic curve and cryptographic libraries that are running on the base nodes.\n\nThese are live, interactive tutorials. You can run the code, edit it, and see how the results change. Give it a go, \nit's quite fun.\n\n[![TLU interactive tutorials](/assets/updates/img/tlu_tutorial.webp)](https://tlu.tarilabs.com/cryptography-101/)\n\n#### Category tags\n\nWe've also added category tags to all the modules on TLU, so you can easily find related content. If you're not \ninterested in following the curated learning paths offered by the courses and want to dive straight into all topics \nrelated to [mining](https://tlu.tarilabs.com/mining/), for example, then you can do just that.\n\n#### Searching\n\nThere's a local index to search through all the content on TLU. We've also gotten TariBot to work an extra shift on \nTLU (for no extra pay) to help you answer your questions or to \"ELI5\" some of the topics that get too deep in the \nweeds.\n\n#### Self-assessment tests\n\nEach course also has a short self-assessment test, which you can use to check your understanding of the material, or,\nuse it as a hyper-summary of the course content. It's up to you.\n\n![Studying hard](/assets/updates/img/student.webp)\n       \n### What is the same?\n\n#### Community-driven content\n\nTLU is still a community-driven project. We're always open to accepting new content that matches the ethos of the \nTari Project. If you have an idea for a course, or a tutorial, or a blog post, or a video, or anything else that you\nthink would be a good fit for TLU, then please submit a [PR].\n\nIf you have better self-assessment questions for the courses, then please submit a [PR].\n\nIf you wish to add additional interactive tutorials to Tari Rustpen, then please submit a [PR].\n\nIf you find an inaccuracy, or want to improve any of the content, then, say it with me: submit a [PR].\n\n### What's next?\n\nOnce Tari's mainnet launches and attention turns toward bringing privacy-oriented smart contracts to life, we, as \nthe Tari community \nwill be attracting a fresh cohort of developers to the Tari ecosystem. We will need to supplement TLU with all the concepts \nneeded to make the RFC documents accessible, and to equip developers to contribute their own RFCs and source code.\n\n![Looking ahead](/assets/updates/img/tlu2.webp)\n\nTopics that are of interest for the next batch of TLU courses include:\n\n* Zero-knowledge proving systems,\n* Zero-knowledge roll-ups,\n* Full homomorphic encryption,\n* DeFi market mechanisms and incentives,\n* Cerberus for dummies\n* My first Tari contract\n\nIt's going to be a wild 2024!\n                                                 \n[courses]: https://tlu.tarilabs.com/courses \"TLU courses\"\n[launched]: http://web.archive.org/web/20190725163900/https://tlu.tarilabs.com/\n[PR]: https://github.com/tari-labs/tari-university/pulls \"TLU pull requests\"\n[TLU]: https://tlu.tarilabs.com \"Tarilabs university homepage\"\n",
        "title": "Introducing TLU 2.0",
        "date": "2024-01-10T00:00:00.000Z",
        "excerpt": "We [launched] Tarilabs University (TLU) way back in 2019 to help developers learn how to build on Tari.  Initially, the idea was for Tari Labs engineers to do a deep dive on a topic and then present...",
        "thumbnail": "/assets/updates/img/new_tlu_bg.webp",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-12-20-update-124",
        "content": "\nThe Tari core developers have been fighting the good fight on two fronts: wrapping up changes to the Minotari \ncodebase based on the audit feedback (finished!), and driving towards a Tari network testnet release candidate (soon?).\n\nAs usual, the major casualty of an extreme code offensive has been documentation. Today we're happy to announce that \nwe're setting this straight-- well, straighter, by releasing several new RFC documents that describe the Tari Digital \nAssets Network.\n\nFirstly, [RFC-303](https://rfc.tari.com/RFC-0303_DanOverview.html) has been completely rewritten and updated. It \ndescribes the DAN architecture and how it fits into the Tari ecosystem.\n\nThen, [RFC-350](https://rfc.tari.com/RFC-0350_TariVM.html) describes the Tari Virtual Machine (TVM) and how it \nexecutes Tari smart contracts.\n\nThen, we dive deeper into the Consensus layer of the DAN with a series of 5 documents, 4 of which are brand new:\n\n* [RFC-305](https://rfc.tari.com/RFC-0305_Consensus.html) presents the design philosophy and defines the roles of the \n  consensus engine.\n* Many of you will never have heard of Cerberus, yet it sits at the very core of the Tari network. \n  [RFC-330](https://rfc.tari.com/RFC-0330_Cerberus.html) attempts to explain the fairly complex algorithm \n  behind this very novel consensus algorithm in plain English.\n* A core part of what makes Tari unique is the dual-layer design to leverage the security and liveness guarantees of\n  a proof-of-work blockchain, with the scalability and throughput of the Cerberus BFT consensus algorithm. Getting\n  these two layers to play nice so that we can get the best of both worlds is a tricky challenge.\n  [RFC-325](https://rfc.tari.com/RFC-0325_DanTimeManagement.html) covers a proposal for epoch management, our\n  favoured idea for aligning the two layers.\n* State management is a huge challenge in massively scalable smart contract platforms. \n  [RFC-331](https://rfc.tari.com/RFC-0331_Indexers.html) describes Tari's indexing strategy for retrieving contract \n  state from shards reliably and quickly.\n\nWe also have some RFC proposals that have entered the implementation phase:\n\n* [RFC-141](https://rfc.tari.com/RFC-0141_Sparse_Merkle_Trees.html) describes Sparse Merkle Trees as a replacement \n  for the somewhat hacky Mutable Merkle Mountain range data structure used to track the UTXO set on the base layer. \n  SMTs have already been implemented and are currently being tested in nextnet.\n* This is a biggy. [RFC-385](https://rfc.tari.com/RFC-0385_StableCoins.html) outlines a design for a \n  suite of privacy-enabled stablecoins on Tari. Self-sovereign money is one thing, but self-sovereign _private_ \n  money takes us to the next level. This is still a very early design, but the core devs are already working on an \n  early implementation of the design to be ready for the DAN testnet release next year.  \n\n## tl;dr\n\nDon't feel like wading through over 20,000 words of new documentation? No worries, mate. \n\nWe've printed it all out on environmentally friendly, 100% recycled virtual paper and dumped it in \n[Tari Bot's](https://rfc.tari.com) lap, told it to memorise it all, cancelled its Christmas leave and made\nit work 24-hour shifts answering all the questions the community has about the DAN. You're very welcome, and _boas \nfestas_!\n\n\n\n\n",
        "title": "What's up? Docs!",
        "date": "2023-12-20T00:00:00.000Z",
        "excerpt": "The Tari core developers have been fighting the good fight on two fronts: wrapping up changes to the Minotari  codebase based on the audit feedback (finished!), and driving towards a Tari network...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-12-14-update-124",
        "content": "\nIt's been a long journey. Believe me, no-one wants to see mainnet launch more than the group of core developers that have been building Tari for the last 4 years.\n\nToday marks another milestone on that journey. And this marker indicates that our destination is just over the horizon.\n\nThe audit of the base node and wallet is now complete, and all identified issues have been addressed. The comprehensive Audit report will be made publicly available shortly.\n\n## Release candidate \n \nWhat does this mean? It means that we are now believe we have the code, barring a few final adjustments, that will be running mainnet Minotari chain.\n\nSo we are thrilled to announce our first release candidate for the Tari suite. \n\nIt is crucial to emphasize that this is not _the_ mainnet release; for example, the emission curve is still using testnet parameters. But it does represent our last test drive of the code in the wild before the big show. \n\nWe've decided to release this code on the nextnet network as per our [release schedule policy](https://github.com/tari-project/tari/blob/development/docs/src/branching_releases.md) and not on stagenet as with previous releases. \n\nWe'd love you to kick the tires. Join us in our [Discord](https://discord.gg/q3Sfzb8S2V) and [Telegram](https://t.me/tariproject) channels to give your feedback, and help ensure a seamless and uneventful mainnet launch!\n\n## Launching\n\nTo obtain the release candidate:\n\nVisit the [Tari website](https://www.tari.com/downloads/) website, select Nextnet as your network, and initiate the download. (Note for Mac users: Choose arm64 for Apple Silicon.)\nAlternatively, utilize [Github](https://github.com/tari-project/tari/releases/latest).\nOnce you've downloaded the appropriate binaries for your system, launch the binaries following the on-screen instructions. We released an updated [start guide](https://www.tari.com/updates/2023-11-09-update-122) a few weeks ago, which should assist those encountering difficulties.\n\n## Reporting bugs\n\nIf you encounter challenges, seek assistance in our [discord](https://discord.com/channels/892738558316662855/894350744419962890) or [telegram](https://t.me/tariproject) groups, where helpful members are available to support you.\n\nIn the event you discover a bug, please report it on [discord](https://discord.com/channels/892738558316662855/894350744419962890), [telegram](https://t.me/tariproject) or [github](https://github.com/tari-project/tari/issues). Your feedback is invaluable in enhancing the platform.",
        "title": "First Release Candidate",
        "date": "2023-12-14T00:00:00.000Z",
        "excerpt": "It's been a long journey. Believe me, no-one wants to see mainnet launch more than the group of core developers that have been building Tari for the last 4 years. Today marks another milestone on...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-11-29-update-123",
        "content": "\nIt's been a while since we last updated you on the progress of the Tari Second Layer. Here are some key developments\nwe've been working on:\n\n## Enhancing Cross Shard Transaction Reliability\n \n\nTari's Cerberus implementation efficiently manages cross-shard transactions, but our focus has been on exploring\nreliable broadcast mechanisms. These efforts aim to ensure seamless information transfer across shards without any loss.\nWithin each shard, the committee utilizes Hotstuff. While Hotstuff comes with intrinsic tools for detecting missing\nmessages, these are not available for\nsending between shards. For those seeking in-depth information on how we're solving this, more details are available in\nthe [RFC](https://github.com/tari-project/rfcs/pull/112).\n\n## Testing Registration and Consensus on Igor\n\nWe're using the `igor` testnet to register Validator Nodes and Code Templates. Currently, we're operating a single\nvalidator, but the network is open for registering and testing templates. To minimize disruption for other users, we\nsuggest holding off on registering a validator node for now. Should you wish to contribute to testing this aspect,\nplease reach out to us via Discord or Telegram.\n\nOtherwise, feel free to register Code Templates and test them out. If you are, we'd love to know about it.\n\n## Awesome Tari Page\n\nA curated [List of Awesome Projects on Tari](https://github.com/tari-project/awesome-tari)  is now available. Are you\nengaged in a fascinating project on Tari? Feel free to submit a PR with a link to your work. Furthermore, if you're\nsearching for ways to get involved, this serves as an excellent starting point to explore and contribute to ongoing\nprojects.\n\n",
        "title": "Progress Update on Tari",
        "date": "2023-11-29T00:00:00.000Z",
        "excerpt": "It's been a while since we last updated you on the progress of the Tari Second Layer. Here are some key developments we've been working on: Enhancing Cross Shard Transaction Reliability   Tari's...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-11-09-update-122",
        "content": "\nA lot has changed with MinoTari since the first testnet launch in 2020. Here is an updated install guide on how to get\nup and running with MinoTari.\n\n## Install the Minotari Aurora Wallet\n\nTari Aurora available on the [Apple App](https://apps.apple.com/us/app/tari-aurora/id1503654828)\nand [Google Play](https://play.google.com/store/apps/details?id=com.tari.android.wallet&hl=en&gl=US) stores.\n\n# Install the MinoTari Suite\n\n## Prerequisites\n\nIt is recommended to run Tari through Tor. Tor hides your IP address from network peers, making punching through NATs\nand firewalls much easier.\n\n## Install Tor\n\nOpen a terminal and execute the following commands:\n\n### OSX:\n\n```console\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nbrew install tor\n```\n\n### Linux (Redhat):\n\n```console\nsudo yum install tor\n```\n\n### Linux (Debain/Ubuntu):\n\n```console\nsudo apt update && sudo apt install -y tor\n```\n\n### Windows:\n\nNothing to do here - this is done automatically when the Windows installer is run.\n\n## Install the MinoTari Binaries\n\nHead to the downloads page of the [Tari Website](https://www.tari.com/downloads/) to get the latest binaries before\nstarting.\n\n### OSX / Linux:\n\nDownload the latest version for your operating system and extract the archive into a folder on your machine.\n\n### Windows:\n\nDownload the installer (tari_suite-...-windows-x64-installer.exe) and execute it; this will guide you through the setup\nand install all dependencies. Just double-click the installer and accept all the default prompts. Binaries are available\nto download, but the recommended way for Windows is the installer.\n\n## Install RandomX\n\nThis is only applicable if you plan to do Monero merge mining. Tari uses XMRig for merge mining and it can be downloaded\nfrom their [website](https://xmrig.com/download).\n\n### OSX / Linux (Redhat) / Linux (Debian/Ubuntu):\n\nDownload and install XMRig for your operating system.\n\n### Windows:\n\nNothing to do here - this is done automatically when the Windows installer is run.\n\n## Runtime\n\n## Start the Applications\n\nThe executables are run by executing the application in a terminal or clicking/double-clicking on the executable,\ndepending on your operating system. The MinoTari base node and console wallet applications must be run and exited to\ncreate the initial identities and configs.\n\n### OSX / Linux (Redhat) / Linux (Debian/Ubuntu):\n\nStart by running Tor in a terminal:\n\n```console\ntor --allow-missing-torrc --ignore-missing-torrc --clientonly 1 --socksport 9050 --controlport 127.0.0.1:9051 --clientuseipv6 1 --log \"notice stdout\"\n```\n\nWait for Tor to be fully started; you must see this message:\n\n```console\n[notice] Bootstrapped 100% (done): Done\n```\n\nThe MinoTari base node and console wallet applications must each be run from where the archive was extracted.\n\nStart the base node in a separate terminal and follow the onscreen instructions.\nStart the console wallet in a separate terminal and follow the onscreen instructions.\n\nThe wallet should ask to connect to your own base node. It is preferred to run this way, but if not the wallet will make\na connection to one of the seed nodes.\n\n### Windows:\n\nThe Tari applications will be located in the folder you selected during installation and can be run by double-clicking\nthe various shortcuts.\n\nStart the base node, but wait for it to fully start, as Tor will be started automatically and when it is running the\napplication will start. Follow the onscreen instructions.\n\nWhen Tor is fully started; you must see this message:\n\n```console\n[notice] Bootstrapped 100% (done): Done\n```\n\nIf you have any problems here start Tor by itself and then start the base node.\n\nNow start the console wallet and follow the onscreen instructions.\n\n## Exit\n\nExit the base node with the following:\n\n```console\nCtrl-C\n>> quit\n```\n\nExit the console wallet by pressing `F10` or `ctrl-c`.\n\n## Edit the Configuration for Your Purpose\n\nSometimes it's required to edit the configs to allow us to accomplish other things for example mining.\nThese files can be edited by opening up the config.toml file in any text editor and to make the required changes.\n\nThe default location of the configuration file:\n\nOSX:        `~/.tari/stagenet/config/config.toml`\nLinux:    `~/.tari/stagenet/config/config.toml`\nWindows:    `C:\\Users\\{username}\\.tari-testnet\\config\\config.toml`\n\n## To Enable Mining (SHA-3X and Monero Merge Mining)\n\n### Enable required gRPC methods\n\nTo ensure better privacy, the base node will by default deny any method that will leak information about the running\nstate of the node. The miner needs some of this information so we have to enable it.\n\nIn the config file, enable the following gRPC methods in the [base_node] section (look for\nthe `grpc_server_deny_methods` entry)  \n\"get_version\",\n\"check_for_updates\",\n\"get_sync_info\",\n\"get_sync_progress\",\n\"get_tip_info\",\n\"identify\",\n\"get_network_status\",\n\nby adding a `#` in front of them.\n\n### Enable gRPC for the wallet\n\nThe wallet by default does not run its gRPC server, so this needs to be enabled. Run the wallet with –enable_grpc or go\nto the config file and enable gRPC by setting grpc_enabled = true under the [wallet] section.\n\n### Run the miner: \n\nRun minotari_miner to start the miner with both the base node and wallet running.\n\n### SHA-3X Specific Settings\n\nThe SHA-3X-specific settings can be found in the [miner] section. The default settings there will be correct for you to\nstart mining. These settings can be used to fine-tune the parameters.\n\n### RandomX/Monero Merge Mining Specific Settings\n\nThe RandomX-specific settings can be found in the [merge_mining_proxy] section. The default configuration is set for the\nMonero stagenet network, but you may want to enable the mainnet network.\n\n## Other Settings\n\nOther settings can also be enabled or disabled as required, but take care when changing anything else! The default\nsettings will work.\n\n### OSX / Linux:\n\nMake sure tor is running, then run the binaries.\n\n### Windows:\n\nRun the binaries. The binaries created by the installer will start tor for you.\n\n## Mining\n\nTo perform mining with MinoTari, we need to run a base node and a console wallet, so ensure those are running.\n\n### SHA-3X mining\n\nTo do mining through SHA-3 using what Tari calls SHA-3X (triple sha3_256 hash) simply run the minotari_miner to start\nmining.\n\n### Monero Merge Mining\n\nWith Monero merge mining, we need to run the merge mining proxy (minotari_merge_mining_proxy) and RandomX. You will also\nneed a Monero wallet address for the Monero network you want to use.\n\nA public stagenet address you can use can be found here:\n\n```console\n55LTR8KniP4LQGJSPtbYDacR7dz8RBFnsfAKMaMuwUNYX6aQbBcovzDPyrQF9KXF9tVU6Xk3K8no1BywnJX6GvZX8yJsXvt\n```\n\nA public mainnet address you can use can be found here:\n\n```console\n888tNkZrPN6JsEgekjMnABU4TBzc2Dt29EPAvkRxbANsAnjyPbb3iQ1YBRk1UXcdRsiKc9dhwMVgN5S9cQUiyoogDavup3H\n```\n\n## Edit the XMRig Config\n\n###OSX / Linux:\n\nEdit the `config.json` file in your XMRig install folder, and remember to add your own respective Monero wallet address\nor select one from above.\n\n```console\n{\n    \"autosave\": true,\n    \"cpu\": true,\n    \"opencl\": false,\n    \"cuda\": false,\n    \"pools\": [{\n        \"coin\": \"monero\",\n        \"url\": \"127.0.0.1:18081\",\n        \"user\": \"YOUR MONERO WALLET ADDRESS HERE\",\n        \"pass\": \"MyWallet\",\n        \"tls\": false,\n        \"daemon\": true\n    }]\n}\n```\n\n### Windows:\n\nNothing to do here for Stagenet - this is done automatically when the Windows installer is run, however, if you want to\nrun mainnet, do the following:\n\nEdit `config\\xmrig_config_example_mainnet.json` to add your own Monero mainnet wallet address or select the one above.\n\nEdit `runtime\\source_xmrig_env.bat` - change\n\ncopy `/y /v \"%config_path%\\xmrig_config_example_stagenet.json\" \"%TARI_XMRIG_DIR%\\config.json\"`\n\nto\n\ncopy `/y /v \"%config_path%\\xmrig_config_example_mainnet.json\" \"%TARI_XMRIG_DIR%\\config.json\"`\n\n## Run the Merge Mining Proxy\n\n### OSX / Linux:\n\nOpen a terminal at the XMRig installation location and execute the following:\n\n`minotari_merge_mining_proxy`\n\n### Windows:\n\nDouble-click the shortcut or start it via the Windows menu (`Tari Testnet`).\n\n## Run XMRig\n\n### OSX / Linux:\n\nOpen a terminal at the XMRig installation location and execute the following:\n\n`xmrig`\n\n### Windows:\n\nDouble-click the shortcut or start it via the Windows menu (`Tari Testnet`).\n\n## More information\n\nThis is a very limited quick guide to get started with MinoTari, and only shows the basic settings. More detail is\navailable on the [github page](https://github.com/tari-project/tari).\n\n\n",
        "title": "Running MinoTari",
        "date": "2023-11-01T00:00:00.000Z",
        "excerpt": "A lot has changed with MinoTari since the first testnet launch in 2020. Here is an updated install guide on how to get up and running with MinoTari. Install the Minotari Aurora Wallet Tari Aurora...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-10-31-update-121",
        "content": "\nTari uses an in-house implementation of the [Bulletproofs+](https://eprint.iacr.org/2020/735) range proving system to\nprovide proofs that every (confidential) output in the UTXO set has a value between 0 and 2<sup>64</sup> μMinotari.\n\nThis stops folks sending people negative amounts of Minotari, or trying other nefarious tricks to try and \ninflate the Minotari supply in an undetectable way.\n\nBulletproofs plus improves substantially on the original range proof algorithm that was originally used in Monero. \nBulletproofs+, as the name suggests, provides a set of incremental improvements over Bulletproofs.\n\nIn particular, it supports:\n\n- **Proof aggregation**. You can generate a proof containing multiple range assertions in an efficient way.\n- **Extended commitments**. Commitments may contain multiple masks.\n- **Batch verification**. Verifying a set of multiple proofs is extremely fast.\n- **Minimum value promises**. You can prove that a commitment binds to at least a specified value.\n- **Mask extraction**. If the prover and verifier agree on a shared secret, the verifier can use it to recover the mask\n  used for the commitment in a non-aggregated proof.\n\nCompared to an [updated fork](https://github.com/tari-project/bulletproofs) of\nthe `dalek-cryptography` [Bulletproofs](https://github.com/dalek-cryptography/bulletproofs) implementation, this\nBulletproofs+ implementation is:\n\n- **Smaller**. Regardless of the aggregation factor, a Bulletproofs+ proof is 96 bytes shorter.\n- **Faster to generate proofs**. This implementation generates a non-aggregated 64-bit range proof about 10% faster,\n  with similar speedups for aggregated proofs. In fact, we're fairly sure that Tari BP+ implementation is now the \n  _fastest trustless range proof system in the world_.\n- **Faster to verify single proofs**. This implementation verifies a single 64-bit range proof about 15% faster.\n- **Slower to verify aggregated proofs**. This implementation verifies aggregated proofs more slowly.  You can't win \n  'em all.\n- **Faster to verify batched proofs**. Because this implementation supports batching, its marginal verification time for\n  a single 64-bit range proof can be reduced to _under half_ the corresponding non-batched time.\n\n## The audit\n\nThe [Tari bulletproof+ library](https://github.com/tari-project/bulletproofs-plus) is a fairly small piece of Rust \ncode, but the math behind it is pretty complex. A bug in this code could lead to some catastrophic consequences for the\nTari network. For this reason, we decided to partner with [Quarkslab](https://www.quarkslab.com/) to perform a \nthorough review of the code and verify the correctness of the implementation.\n\nThe audit was carried out between August and October 2023 and took around 4 weeks in total. \n\nYou can \n\n* read the \n**[full report](https://github.com/tari-project/bulletproofs-plus/blob/main/docs/quarkslab-audit/report.pdf)**\n* and read **Tari Labs' \n[responses](https://github.com/tari-project/bulletproofs-plus/blob/main/docs/quarkslab-audit/README.md)** to the \n  findings \n\nin the Github repository.\n\n## I'm not reading an 80-page report! Just give me the results!\n\nOverall, the audit went very well. \n\nThe auditors found that the implementation was faithful to the underlying theory and that the optimisations were \ncryptographically valid. \n\nThere was 1 `LOW` severity issue related to a dependency of the library that is no longer being maintained. \n\nThere were also two `INFORMATIONAL` level findings:\n* One was related to the library depending on a fork of the Dalek Ristretto library that has fallen a little out of \n  date behind the main library. This is currently being addressed. \n* The second informational issue was related to potential arithmetic overflow instances in parts of the code. These \nissues have already been addressed and [resolved](https://github.com/tari-project/bulletproofs-plus/pull/62)  in the \nlatest version of the library.  \n\n## Acknowledgements\n\nThis is a terrific result and is largely the work of long-time Tari contributors Aaron Feickert and Hansie Odendaal. \n\n## What's next?\n\nThe main Tari base node audit is wrapping up and the final report is due in the next few weeks.\n\nWe're also waiting on the final report of the Aurora wallet penetration test.\n\nWe will be announcing the results of those reviews in due course.\n\n\n\n\n \n",
        "title": "Tari's Bulletproofs+ audit is done!",
        "date": "2023-10-31T00:00:00.000Z",
        "excerpt": "Tari uses an in-house implementation of the Bulletproofs+ range proving system to provide proofs that every (confidential) output in the UTXO set has a value between 0 and 2<sup>64</sup> μMinotari....",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-10-20-update-120",
        "content": "\n\nThere are three primary approaches to sharding blockchains, with the key distinction being how cross-shard transactions are handled. These approaches are:\n\n1. Parachains (E.g. polkadot, Eth 2)\n2. Manual Cross-shard Transactions (E.g. Near Protocol’s Nightshade)\n3. Automatic Cross-shard Transactions (E.g Tari, Radix, Chainspace)\n\n## Parachains\n\nIn the [parachains](https://docs.avax.network/learn/avalanche/avalanche-platform) model, each shard functions as its own blockchain. However, the addition of parachains typically involves a long process because every chain requires a secure set of validators.\n\nThis approach also comes with a trade-off: while the transactions per second (TPS) within a single chain increase, the seamless interaction with assets across different shards becomes challenging. \nFor instance, if you wish to exchange Asset A on shard 1 for Asset B on shard 2, you must wait for the coordination of both shards with a beacon chain to complete the transaction. \n \nIn many cases, it is more efficient to execute a fully cross-chain atomic swap, similar to the process used in two distinct blockchains. \n\n\nInterestingly, this was the original design of Tari’s second layer. However, recognizing that cross-shard transactions would be sluggish and the challenge of ensuring that all validator sets were honest, Tari made the decision to shift to a Cerberus approach.\n\n## Manual Cross-shard Transactions (Near Protocol’s Nightshade)\n\nAnother approach is the one taken by [Near Protocol’s Nightshade](https://near.org/papers/nightshade). In this approach, data is segmented according to user accounts. \nTo facilitate cross-shard transactions, the contract code must be meticulously crafted to enable the transaction to be divided into multiple distinct \npieces that can be independently and asynchronously executed on each shard. \n\nThis places a significant burden on developers to write code correctly and results in a complex programming model.\n\n## Automatic Cross-shard Transactions (Cerberus, Chainspace)\nIn Cerberus (and also [Chainspace](https://arxiv.org/abs/1708.03778)), data is distributed randomly over the shards, and cross-shard transactions are expected frequently. All transactions are based on a UTXO (Unspent Transaction Output) model, which means data must be destroyed when it is modified and recreated in a new state. \nThis prevents double spending across shards, as long as the committees pledge the data to only one transaction. The intricacies of how this works are quite detailed, so will be omitted here.\n\nWhen a cross-shard transaction occurs, the involved shards collaborate in consensus rounds. This process is sometimes referred to as \"Braiding,\" although the specifics can vary. Cross-shard consensus rounds are conducted as part of the local consensus rounds, ensuring that the process is not stalled, as seen in other sharding strategies.\n\n### Sharding Disadvantages\n\nAll three sharding approaches are susceptible to an attack known as the Single Shard Takeover (SST) problem. Each chain has mechanisms to detect and recover from SST. Tari is actively exploring solutions to address this issue, including checkpointing to the base layer.\n\n## Example\n\nLet's consider an example of a transaction using all three approaches, involving a swap between Asset A and Asset B, with the required data residing on two different shards. \n\nFor parachains, one would typically have to wait for the data to be committed to a checkpoint in the beacon chain before the two shards can complete a transaction.\n\nIn Near's Nightshade design, the contract must be meticulously coded, and the transaction would be split into two subtransactions. The first subtransaction deducts the funds in the first shard and then sends the second subtransaction to the second shard for processing and inclusion in the blockchain. These subtransactions must be cleverly crafted to allow processing between other data changes that might happen asynchronously. \n\nIn Cerberus, shard 1 and shard 2 initiate the transaction locally and lock the data. They communicate to perform a braided consensus round, providing data and proof of data locking for this transaction. Once both shards have completed consensus, the data is updated in their respective shard databases. If there is an error or if one shard cannot provide proof of data locking, both sides abort.\n",
        "title": "Comparing Sharding Approaches in Blockchain",
        "date": "2023-10-20T00:00:00.000Z",
        "excerpt": "There are three primary approaches to sharding blockchains, with the key distinction being how cross-shard transactions are handled. These approaches are: 1. Parachains (E.g. polkadot, Eth 2) 2....",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-10-04-update-119",
        "content": "\n\nThe core team has been diligently focusing on two key areas: ChatFFI and Core security. \n\n### ChatFFI\n\nOne of the biggest pieces of the Tari tech stack is our comms layer. This is an overlay network on top of TCP/IP and lets participants in the Tari network find each other, communicate with and even store messages for peers on the Tari network. All this is managed without a single centralising server, and all communication is E2E encrypted and authenticated. \n\nObviously, the primary use case for the Tari comms layer is Tari transaction and block broadcasting. However, the comms layer is actually a general purpose communications protocol. \n\nYou could very easily, say, play [peer to peer chess](https://www.tari.com/privacy-chess/) using the Tari Comms layer. Equally, one could run the world's most private and secure chat application. No phone numbers, not a single server, just 100% peer-to-peer messaging. This is the thinking behind the development of the ChatFFI library: an independent library for facilitating the development of peer-to-peer chat across the Tari network. \n\nIt's still in an alpha state, but steady progress is being made, and the functionality will be included into Aurora in the coming months.\n\n\n### Core Security\n\nOn the security front, the team has dedicated itself to an exhaustive code audit process, inspecting every line for potential vulnerabilities. In conjunction with the [diagrams](https://github.com/tari-project/tari/tree/development/docs/src/diagrams), we meticulously examine the logic of the code to verify that it operates correctly and as intended. Rust, our language of choice, provides a solid foundation for crafting secure code. We are continually working to eradicate all occurrences of \"unsafe\" code, such as `unwrap()` and unchecked arithmetic, from the codebase. Additionally, we have initiated a proactive campaign to subject Tari and its dependent libraries, including Monero-rs, to extensive fuzzing tests, thereby ensuring their security and vulnerability-free status.\n\nFor a comprehensive list of the security enhancements accomplished thus far, please refer to the [github page](https://github.com/tari-project/tari/pulls?q=is%3Apr+is%3Aclosed).",
        "title": "Base layer development update",
        "date": "2023-10-04T00:00:00.000Z",
        "excerpt": "The core team has been diligently focusing on two key areas: ChatFFI and Core security.  ChatFFI One of the biggest pieces of the Tari tech stack is our comms layer. This is an overlay network on top...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-09-23-update-118",
        "content": "\nGot a burning question about Tari, but the core devs are too busy to answer you? Well fret no more!\n\nTari has partnered with [kapa.ai](https://kapa.ai) to bring you the cutting edge in AI-powered chatbot technology. \n\nTaribot has been trained and re-trained, forced to write and then re-write gruelling exams covering all of Tari's RFC \ndocumentation, developer update history and the full lyrical history of the band Toto until it was able to recall, with \nstunning accuracy anything to do with Tari. And whether it's seen rains come down in Africa (it has). \n\nTariBot can't unionise, so we've pumped it to its gills in Redbull and it is waiting, ready and eager to answer \nall your questions, 24/7, 365.\n\n### Where do I find it?\n\nWe've integrated Taribot into the [Tari website](https://tari.com).\n\n<video id=\"demo-desk\" class=\"img\" width=\"100%\" muted controls=\"true\">\n<source src=\"{{ site.baseurl }}/assets/updates/vid/kapa-demo-website.mp4\" type=\"video/mp4\" />\n</video>\n\n\nWe've also integrated Taribot into our discord server, on the #ask_taribot channel.\n\n  <video id=\"demo-discord\" class=\"img\" width=\"100%0\" muted controls=\"true\">\n    <source src=\"{{ site.baseurl }}/assets/updates/vid/kapa-discord-demo.mp4\" type=\"video/mp4\" />\n  </video>\n\nWe'll be adding resources to Taribot over time, so its knowledge stays current and relevant.\n\nWe can't wait for you to give it a try!",
        "title": "Everything you've ever wanted to know about Tari",
        "date": "2023-09-23T00:00:00.000Z",
        "excerpt": "Got a burning question about Tari, but the core devs are too busy to answer you? Well fret no more! Tari has partnered with kapa.ai to bring you the cutting edge in AI-powered chatbot technology. ...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-09-11-update-117",
        "content": "\nUltimately, the success of Tari will be driven by the dApplications that are built on top of it, and not based on the\nunderlying technology. But without a strong foundation of scalability, security, decentralisation, privacy, and\namazing developer tools, those dApplications will never be built. \n\nIn this post, I share some ideas on how Tari is tackling the scalability portion of that challenge.\n\n## Side-stepping the blockchain trilemma\n\nFrom [RFC-0001](https://rfc.tari.com/RFC-0001_overview.html):\n\n_\"Speed, security and decentralisation typically form a trilemma that means that you need to settle for two out of \nthe three._\n\n_\"Tari attempts to resolve the dilemma by splitting operations over two discrete layers. Underpinning everything is a \nbase layer that focuses on security and manages global state, and a second, digital assets layer that focuses on \nrapid finalisation and scalability._\n\n_\"The distributed system trilemma tells us that these requirements are mutually exclusive._\n\n_\"We can't have fast, cheap digital assets and also highly secure and decentralized currency tokens on a single system._\n\n_\"Tari overcomes this constraint by building two layers:_\n1. _A base layer that provides a public ledger of Tari coin transactions, secured by PoW to maximize security._\n1. _A DAN consisting of a highly scalable, efficient side-chain that each manages the state of all digital assets.\"_\n\n## Base-layer transactions\n\nThe base layer is designed to be secure and decentralised. It is secured by proof-of-work, and all transactions are\nconfidential by virtue of the Mimblewimble protocol.\n\nThe testnet parameters are set so that a block is mined every 120s on average. \n\nThe maximum number of transactions per block depends on the \nnumber of outputs -- outputs are very large in Tari because of the need to provide a 580B range proof for each one --\nbut assuming the standard 1 input, 2 output transaction, a single block can hold around 1,000 transactions.\nMainnet will have a similar, if not identical, setup.\n\nWhich gives the base layer a capacity of around 8.3 transactions per second.\n\n_Oh noes! So slow. Them's Bitcoin numbers!_\n\nMaybe, but when Tari is \"at equilibrium\", the vast majority of activity will zip around on the digital assets layer.\nThe base layer will only be used for:\n* Validator node registrations\n* [Tari minting](https://github.com/tari-project/rfcs/blob/main/src/RFC-0320_TurbineModel.md#an-aside---the-monetary-policy-trilemma)\n* Smart contract template registrations\n* Minotari transfers\n\nNone of these are expected to be high-volume activities in the long run, and so we expect the base layer to \nmaintain sufficient capacity for these transactions whilst permitting a highly decentralised, secure, and \ncensorship-resistant base layer.\n\nIn the event of unexpected elevated usage of the base layer (TRC-20s anyone?), a migration to a Monero-esque \ndynamic blocksize algorithm is not off the table for a future network upgrade.\n\n## Tari Digital Asset network capacity\n\nThe Tari digital assets network is being built using [Cerberus]. Cerberus is a high-throughput BFT algorithm that \nhas the unique property of dividing the space of all possible smart contract states into predefined \"addresses\". All \naddresses are pre-assigned to validators, so that the network is effectively [self-sharding]. The algorithm for \nsharding the state space has a few network-wide tuning parameters, such as \"how many nodes should be assigned to each \nshard\".\n\n![Cerberus, a creature from Greek mythology, is a three-headed dog that guards the gates of the Underworld to prevent the dead from leaving.](https://s3-us-west-2.amazonaws.com/courses-images/wp-content/uploads/sites/1849/2017/05/31155518/ros-eurystheus-louvre-e701.jpeg \"Cerberus\")\n\nWe don't know the \"right number\" for this yet, but gut feel says somewhere between 25 (allowing 8 byzantine nodes \nper shard) and 100 (allowing 33 byzantine nodes per shard) is the right range.\n\nIn Cerberus, only shards that are involved in a transaction need to reach consensus on the transaction.  Testnet \nexperience will confirm this, but we expect most transactions to involve two or three shards.\n\nTo reach consensus, the involved shards form an _ad-hoc_ Hotstuff committee and reach finality in four rounds of \ncommunication. These communication rounds establish the following:\n* Only the correct nodes are participating in consensus,\n* The input state is valid and certified,\n* The output state is valid,\n* A certificate for the output has been created, and certified,\n* Fees are apportioned and allocated to the appropriate nodes.\n\nWhen a node is executing a transaction, some of the potentially heavy time-consuming tasks are: \n* Identifying the smart contracts that are referenced in the instruction and making sure a copy of the contract \n  code is available locally,\n* Firing up a TariVM instance and loading the contract code,\n* Obtaining a valid copy of the transaction's input,\n* Executing the contract code on the input.\n\nAt the current state of pre-alpha development state of the Tari network, the time from a client wallet firing off a \nrequest and receiving a finalised answer is around 2-5 seconds. This is pretty good news, because there are many \noptimisations we can explore on every single one of the bullet points above, including:\n* Reducing HotStuff communications to three or, recent research suggests, even two rounds, without sacrificing \n  liveness or safety.\n* Optimising the TariVM caching algorithm to keep popular contracts in a hot cache.\n* Preempting requests and caching input state from other shards.\n* Pre-compiling contracts to TariVM instances.\n* Batching of instructions to amortise consensus rounds across multiple transactions.\n\nUltimately we believe that we can get end-to-end finalisation of Tari instructions to under 1,000ms.\n\nSo, the goal is to achieve a _latency_ experienced by clients on the network to 1,000ms or less.\n\nAs far as an individual node goes, they will not be sitting around idly waiting for network messages to arrive \nbefore moving onto the next instruction. Nodes can perform _chained Hotstuff_ which allows them to move onto \nthe next set of instructions while waiting to hear back on consensus results for previous sets of instructions.\n\nUltimately this makes Tari nodes CPU-bound in smart contract execution rather than network-bound. \n\nNow, smart-contract execution speed is obviously highly variable, and I'm reaching deep into speculative territory \nhere, but I can imagine that the majority of smart contract calls will be \nnon-CPU intensive DeFi and NFT contract calls that can be processed in 10ms - 100ms.\n\nWith chained Hotstuff, a single node might be able to process 10 - 100 instructions per second. Again, this is a big \nballpark guess, so don't hold me to it. Let's say 20 transactions per second on a sustained basis. That still \ndoesn't sound very fast, and it looks like Solana has disappeared into the distance with its \n[claimed 50,000 TPS](https://lsmod.medium.com/what-makes-solana-the-fastest-public-blockchain-cb8ffde1a7f4); though \nSolana's real-world performance is closer to 1,400 dApp-related (non-voting) transactions per second. \nMEV strategies aside, the existence of an emerging fee market suggests that there isn't that much spare capacity on \nthe network as one might think.\n\n![Solana TPS Dashbaord 12/9/2023](/assets/img/posts/solana_explorer.png \"Solana TPS Dashboard 12/9/2023\")\n\n### Scaling the Tari network\n\nLet's assume that we configure the Tari network so that there are 25 nodes per shard. If the network is tiny and has \nonly 25 nodes, there will only be a single shard, and so our proto-Cerberus network will run like Aptos or Sui. Every \nnode must reach consensus on every transaction. Since each node running at full-tilt can handle 20 transactions per\nsecond, that would be the network capacity.\n\nNow let's assume that the network grows to 100 nodes. The network will split into four shards, each with 25 nodes. \nAssuming the vast majority of transactions involve two shards, the network is effectively running two \"cores\" and \noverall capacity is now 40 transactions per second.\n\nIn a scenario of \"full adoption\", there might be 10,000 nodes on the network. This would result in 400 shards, each\nwith 25 nodes. This is equivalent to 200 \"cores\", and the overall capacity is now 4,000 transactions per second, all the \nwhile maintaining sub-second finalisation.\n\n## Closing thoughts\n\nCan Tari get to 10,000 or even more nodes? Can Tari get to 10,000 or even more nodes? There are currently between \n5500  and 12000 Ethereum nodes running, \n[depending on](https://etherscan.io/nodetracker#) \n[who you](https://www.ethernodes.org/) \n[ask](https://nodewatch.io/). \nEach of these must validate _every transaction_ and maintain a copy of the _entire state_ of the network. \nThis places a huge burden on a node operator. Solana, Aptos, and all the other Layer One smart contract networks \nhave the same problem.\n\nAs the Tari network grows and shards become smaller, each validator node will be required to hold _less_ of the overall \nsystem's state. \nRunning a Tari node will always require roughly the same level of hardware (excluding storage) and should be somewhat \neconomical to run in perpetuity. It's not unreasonable to imagine that the Tari network will grow to an order of \nmagnitude larger than any Layer One in terms of the number of nodes.\n\nThe incentives are designed so that the system is self-regulating in terms of capacity and is self-scaling: If nodes \nstart to earn outsized rewards because congestion pushes fees higher, more nodes are incentivised to join \nthe network. Barriers to entry are somewhat low (the hardware requirements are expected to remain modest), and so we \nexpect the response to the demand to be fairly rapid. More nodes join, increasing the throughput capacity of the \nnetwork, and reducing the strain on any individual node. \n\n[Cerberus]: https://arxiv.org/pdf/2008.04450v1.pdf\n[self-sharding]: https://www.radixdlt.com/post/cerberus-infographic-series-chapter-i\n\n**Disclaimer**: This article makes use of the future tense. This should not be construed as a commitment or guarantee of\nfuture performance. The text makes it clear that the estimates given in the scenarios are speculative and unexpected\ndifficulties or bottlenecks may arise that prevent any or all of these scenarios from being achieved.\n",
        "title": "How fast can Tari be?",
        "date": "2023-09-11T00:00:00.000Z",
        "excerpt": "Ultimately, the success of Tari will be driven by the dApplications that are built on top of it, and not based on the underlying technology. But without a strong foundation of scalability, security,...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-08-25-update-116",
        "content": "\nAre you interested in contributing to Tari? Taking part in a cryptocurrency project can seem daunting, but we're here to help make it more accessible. To assist newcomers, we've developed a  [Reviewer's Guide](https://github.com/tari-project/tari/pull/5664) to help you get started. While not an exhaustive set of rules, this guide aims to orient new contributors towards considering potential vulnerabilities during both code creation and pull request reviews.\n\nWith the current code audits continuing and as we get closer to a release candidate, it is vitally important to find bugs and vulnerabilities.\n\nIn addition to the reviewer's guide, we've started creating some [diagrams](https://github.com/tari-project/tari/pull/5651) to help new developers get aquainted to the codebase. Diagramming a whole system will take a while, so it's a work in progress right now, but we'll keep adding.\n\nIf you're keen to get involved, let us know in [Telegram](https://t.me/tariproject) or [Discord](https://discord.gg/tari)\n",
        "title": "Reviewer's Guide and New Diagrams",
        "date": "2023-08-25T00:00:00.000Z",
        "excerpt": "Are you interested in contributing to Tari? Taking part in a cryptocurrency project can seem daunting, but we're here to help make it more accessible. To assist newcomers, we've developed a ...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-08-10-update-115",
        "content": "\nThe [Tari network upgrade schedule](https://github.com/tari-project/tari/blob/development/Contributing.md#the-minotari-release-process) calls for a network rollover every 8 weeks. This week marks a designated rollover juncture, which means that Nextnet will transition to Stagenet, and Development will move to Nextnet. These rollovers do not typically entail a hardfork. This time, however, all three test networks will be reset with a fresh Genesis block as we roll out some new features.\n\n\n## Stagenet\n\nThe notable highlights of the upcoming changes to Stagenet are:\n\nEnhanced Transaction Flexibility ([45685b9f](https://github.com/tari-project/tari/commit/45685b9f3acceba483ec30021e8d4894dbf2861c)): We're excited to announce that Console Wallets now have the ability to perform burn transactions directly. Previously, this functionality was exclusively available via the CLI.\n\nImproved Wallet Base_node Monitoring ([c704890c](https://github.com/tari-project/tari/commit/c704890ca949bcfcd608e299175694b81cef0165)): We've dedicated resources to significantly improving the monitoring of wallet base_node interactions, leading to a more seamless user experience.\n\nIntroducing Chat Library ([5b09f8e2](https://github.com/tari-project/tari/commit/5b09f8e2b630685d9ff748eae772b9798954f6ff)): In line with expanding the capabilities of the Tari network, we've incorporated a chat library that enables applications to engage in peer-to-peer (p2p) chat across the Tari network. This addition broadens the utility and potential use cases for the platform.\n\n\n#### Features\n\n* refactor configuration for chat so ffi can create and accept a config file (#5426) ([9d0d8b52](https://github.com/tari-project/tari/commit/9d0d8b5277bd26e79b7fe5506edcaf197ba63eb7)\n* add metadata signature check (#5411) ([9c2bf41e](https://github.com/tari-project/tari/commit/9c2bf41ec8f649ffac824878256c09598bf52269)\n* improved base node monitoring (#5390) ([c704890c](https://github.com/tari-project/tari/commit/c704890ca949bcfcd608e299175694b81cef0165))\n* add optional range proof types (#5372) ([f24784f3](https://github.com/tari-project/tari/commit/f24784f3a2f3f574cd2ac4e2d9fe963078e4c524)\n* added burn feature to the console wallet (#5322) ([45685b9f](https://github.com/tari-project/tari/commit/45685b9f3acceba483ec30021e8d4894dbf2861c))\n* chat ffi (#5349) ([f7cece27](https://github.com/tari-project/tari/commit/f7cece27c02ae3b668e1ffbd6629828d0432debf)\n* add miner timeout config option (#5331) ([aea14f6b](https://github.com/tari-project/tari/commit/aea14f6bf302801c85efa9f304a8f442aaf9a3ff)\n* improve message encryption (#5288) ([7a80716c](https://github.com/tari-project/tari/commit/7a80716c71987bae14d83994d7402f96c190242d)\n* chat scaffold (#5244) ([5b09f8e2](https://github.com/tari-project/tari/commit/5b09f8e2b630685d9ff748eae772b9798954f6ff))\n* **p2p:**  allow listener bind to differ from the tor forward address (#5357) ([857fb555](https://github.com/tari-project/tari/commit/857fb55520145ece48b4b5cca0aa5d7fd8f6c69e)\n\n#### Bug Fixes\n\n*   use mined at timestamp in fauxconfirmation (#5443) ([f3833c9f](https://github.com/tari-project/tari/commit/f3833c9fc46d77fddaa7a23ef1d53ba9d860182a)\n*   fix custom wallet startup logic for console wallet (#5429) ([0c1e5765](https://github.com/tari-project/tari/commit/0c1e5765676a9281b45fd66c8846b78ea4c76125)\n*   use domain separation for wallet message signing (#5400) ([7d71f8be](https://github.com/tari-project/tari/commit/7d71f8bef94fddf1ffa345e6b599cf02ee6ab935)\n*   don't use in memory datastores for chat client dht in integration tests (#5399) ([cbdca6fc](https://github.com/tari-project/tari/commit/cbdca6fcc8ae61ed2dbfacca9da1a59c78945045)\n*   loop on mismatched passphrase entry (#5396) ([ed120b27](https://github.com/tari-project/tari/commit/ed120b277371be7b9bd61c825aa7d61b104d3ac6))\n*   deeplink to rfc spec (#5342) ([806d3b8c](https://github.com/tari-project/tari/commit/806d3b8cc6668f23bb77ca7040833e080c173063))\n*   fix panic when no public addresses (#5367) ([49be2a27](https://github.com/tari-project/tari/commit/49be2a27a8aead96c180cb988614e3696c338530)\n*   remove wallet panic (#5338) ([536d16d2](https://github.com/tari-project/tari/commit/536d16d2feea283ac1b8f546f479b76465938c4b))\n*   added missing log4rs features (#5356) ([b9031bbb](https://github.com/tari-project/tari/commit/b9031bbbece1988c1de180cabbf4e3acfcb50836)\n*   add SECURITY.md Vulnerability Disclosure Policy (#5351) ([72daaf5e](https://github.com/tari-project/tari/commit/72daaf5ef614ceb805f690db12c7fefc642d5453)\n*   make the first output optional in the wallet (#5352) ([bf16140e](https://github.com/tari-project/tari/commit/bf16140ecd1ad0ae25f8a9b8cde9c3e4f1d12a02))\n*   wallet .h file for lib wallets (#5330) ([22a3a17d](https://github.com/tari-project/tari/commit/22a3a17db6ef8889cb3a73dfe2db081a0691a68c))\n*   clippy issues with config (#5334) ([026f0d5e](https://github.com/tari-project/tari/commit/026f0d5e33d524ad302e7edd0c82e108a17800b6)\n*   default network selection (#5333) ([cf4b2c8a](https://github.com/tari-project/tari/commit/cf4b2c8a4f5849ba51dab61595dfed1a9249c580)\n*   allow public addresses from command line (#5303) ([349ac895](https://github.com/tari-project/tari/commit/349ac8957bc513cd4110eaac69550ffa0816862b)\n* **comms:**\n  *  validate onion3 checksum (#5440) ([0dfdb3a4](https://github.com/tari-project/tari/commit/0dfdb3a4bef51952f0cecf6f6fcb00f6b2bfe302)\n  *  only set final forward address if configured to port 0 (#5406) ([ff7fb6d6](https://github.com/tari-project/tari/commit/ff7fb6d6b4ab4f77d108b2d9b7fd010c77e613c7)\n* **wallet-ffi:**  don't block on start (#5437) ([27fe8d9d](https://github.com/tari-project/tari/commit/27fe8d9d2fc3ea6468605ef5edea56efdcc8248f)\n\n## Nextnet\n\nDuring this period, a wide range of bugs, addressing issues from refining the mempool's handling of zero-confirmation transactions to resolving malleability bugs present in the headers, have been addressed.\n\nA notable improvement in the wallet recovery process is worth highlighting. There is a transition away from the practice of rewinding the bulletproof, opting for a more streamlined approach: now, the blinding factor and value on the UTXO are simply encrypted, enhancing the efficiency of the recovery mechanism.\n\nAdditionally, there is a noteworthy enhancement to the Tari layer - the incorporation of a chat FFI client tailored specifically for peer-to-peer (p2p) chat messaging. This addition significantly enhances the communication capabilities within the Tari network, enriching the overall user experience.\n\nThe full list is available below:\n#### Features\n\n*   fix formatting block (#5630) ([49732f65](https://github.com/tari-project/tar/commit/49732f65339f4c120afb49e9edb72eda8d17b737))\n*   remove unused wasm_key_manager (#5622) ([508c9719](https://github.com/tari-project/tar/commit/508c97198617f116bb0ccd69c8e1eba1341b18ac))\n*   remove orphan validation and only validate on insertion (#5601) ([41244a3e](https://github.com/tari-project/tar/commit/41244a3ea666f925648aa752c9ac476486702473))\n*   ban peer unexpected response (#5608) ([02494aee](https://github.com/tari-project/tar/commit/02494aee0f97469b9deb9c339b4075b14b69ff6f))\n*   add mempool min fee (#5606) ([15c7e8f9](https://github.com/tari-project/tar/commit/15c7e8f9ca3d656850d6f0041d2f7fc07b4af80b))\n*   chat-ffi logging (#5591) ([159959cc](https://github.com/tari-project/tar/commit/159959cc32c341e111a626729fb1bd9a2851e8a7))\n*   chat message fetching pagination (#5594) ([20243574](https://github.com/tari-project/tar/commit/202435742ed78b0eac80efcd19b357df96a6bbb9))\n*   new message callback to chat-ffi (#5592) ([bbd543ee](https://github.com/tari-project/tar/commit/bbd543ee35e4e5fc858d875cf30d6f24fa2e4d96))\n*   chat ffi status callback (#5583) ([f68b85f4](https://github.com/tari-project/tar/commit/f68b85f404e524d61d8b6153c13e8b2e6ab2a20b))\n*   peer sync limiter (#5445) ([548643b7](https://github.com/tari-project/tar/commit/548643b723a548fea3e56f938a84db652d3ee630))\n*   proof of work audit part 2 (#5495) ([af32f96f](https://github.com/tari-project/tari/commit/af32f96f36a32235daf7e3b1d9694af7edcf5f8e)\n*   improve recovery speed (#5489) ([d128f850](https://github.com/tari-project/tari/commit/d128f850356ff18bfd394f6c3bfe78f5bd0607e1))\n*   sparse merkle trees (#5457) ([f536d219](https://github.com/tari-project/tari/commit/f536d21929e4eeb11cc185c013eef0b336def216)\n*   ui for template registration in console wallet (#5444) ([701e3c23](https://github.com/tari-project/tari/commit/701e3c2341d1029c2711b81a66952f3bee7d8e42))\n\n#### Bug Fixes\n\n*   minor fixes for multiple address support (#5617) ([efa36eb7](https://github.com/tari-project/tar/commit/efa36eb7dc92905cc085359c35255678136a15b1))\n*   error out the stx protocol if the sender sends unsupported data (#5572) ([8a085cde](https://github.com/tari-project/tar/commit/8a085cded40b95fb5d3136743a97e50874ee2903))\n*   sorted edge case (#5590) ([f7b21930](https://github.com/tari-project/tar/commit/f7b21930c7841e7a8801f4c37d1ee0e8111162bb))\n*   check bytes remaining on monero blocks (#5610) ([1087fa9d](https://github.com/tari-project/tar/commit/1087fa9d7846b1bd11431475cc8ca3fd9def8ec6))\n*   duplicate tari header in monero coinbase (#5604) ([f466840a](https://github.com/tari-project/tar/commit/f466840a24cd678aac82ae4eaa2661dca2567675))\n*   monero fork attack (#5603) ([9c81b4d8](https://github.com/tari-project/tar/commit/9c81b4d875aa7794226a97a4a90c9c0b3d6d4585))\n*   miner delay attack (#5582) ([bece2d0b](https://github.com/tari-project/tar/commit/bece2d0bf82c757808723dba6ec3456bb8e23b2e))\n*   peer connection to stale nodes (#5579) ([eebda00b](https://github.com/tari-project/tar/commit/eebda00bd28aae70813c644ff2b63925cc934ced))\n*   update peers seed for esme (#5573) ([0f6b7504](https://github.com/tari-project/tar/commit/0f6b7504bbfc902ffab89f1904dee237270c690b))\n*   sparse Merkle tree key querying (#5566) ([623839f5](https://github.com/tari-project/tar/commit/623839f58116c0828bc5406adbd1dd1b68e7bb3d))\n* **comms:**  check multiple addresses for inbound liveness check (#5611) ([3937ae42](https://github.com/tari-project/tar/commit/3937ae422f57f936ad3d2ead8b92ce4fa5adf855))\n* **core:**  always pass the correct timestamp window to header validatior (#5624) ([29700c3d](https://github.com/tari-project/tar/commit/29700c3d9aa4698742c0c9cd5e313fd3d0727626))\n*   mempool should use the correct version of the consensus constant (#5549) ([46ab3ef0](https://github.com/tari-project/tari/commit/46ab3ef07e41b091b869ef59376d0709a24e7437))\n*   mempool fetch_highest_priority_txs (#5551) ([f7f749c4](https://github.com/tari-project/tari/commit/f7f749c4c476f489f9e30afb87461780d1996834)\n*   remove optional timestamp verification bypass (#5552) ([b5a5bed2](https://github.com/tari-project/tari/commit/b5a5bed2c23c273d3787afa1c845f62badec1a46))\n*   update code coverage approach (#5540) ([7a9830ed](https://github.com/tari-project/tari/commit/7a9830edb66b6be3edc40b84ae8a1a9c3f4ef525)\n*   use correct TOML field for console wallet network address (#5531) ([70763dde](https://github.com/tari-project/tari/commit/70763dde25c1569013e489a0798540fd66dfa571)\n*   llvm-tools installed correctly (#5534) ([4ab4b965](https://github.com/tari-project/tari/commit/4ab4b965e5f0556d508ec071a152deb5ad8ea8cc))\n*   push test coverage even if some tests fail (#5533) ([053c748d](https://github.com/tari-project/tari/commit/053c748d3d7aee674bada24609612bde9ba1420e)\n* **console-wallet:**  fix possible subtract underflow panic in list (#5535) ([8d5e8e6e](https://github.com/tari-project/tari/commit/8d5e8e6eac45b11867cee6104c207f6559851405)\n* **core:**  disable covenants for all networks except igor and localnet (#5505) ([308f5299](https://github.com/tari-project/tari/commit/308f5299007a67df8fb9fe73763809264005e35c)\n*   add a not before proof (#5560) ([11f42fb0](https://github.com/tari-project/tari/commit/11f42fb0942da3bd64db8ad203b75c364dbe0926)\n*   borsh sized serialization should be fallible   (#5537) ([53058ce2](https://github.com/tari-project/tari/commit/53058ce299cb89f118017ccec5e98a991a7fcbcc)\n*   add documentation to covenant crate (#5524) ([442d75b0](https://github.com/tari-project/tari/commit/442d75b09f439e4bc81919fc42eaf43846b2c8ca)\n*   covenants audit (#5526) ([dbb59758](https://github.com/tari-project/tari/commit/dbb59758a92cdf4483574dc6e7c719efa94eedfd)\n* **mmr:**  support zero sized balanced merkle proof (#5474) ([ef984823](https://github.com/tari-project/tari/commit/ef98482313c9b9480ac663709162ae62e9c26978)\n* **wallet:**  use correct output features for send to self (#5472) ([ce1f0686](https://github.com/tari-project/tari/commit/ce1f0686f56367ff094bf28cfd0388b2ea94a8c9)\n",
        "title": "Network rollover",
        "date": "2023-08-10T00:00:00.000Z",
        "excerpt": "The Tari network upgrade schedule calls for a network rollover every 8 weeks. This week marks a designated rollover juncture, which means that Nextnet will transition to Stagenet, and Development...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-07-05-update-113",
        "content": "\nTari was recently represented at the \n[International Congress of Blockchains and Applications](https://www.blockchain-congress.net/) (Blockchain '23) in \nlovely Guimarães, Portugal.\n\n![Blockchain '23](/assets/updates/img/guimaraes_sm.jpg)\n_Guimarães, Portugal_. Photo credit: Cayle Sharrock\n\nThe paper, titled _TariScript: Bringing dynamic scripting to Mimblewimble_, went through a full peer-review process \nand will be published in the conference proceedings. For those who don't wish to wait, you can \n[download the preprint now](/assets/updates/docs/tariscript.pdf).\n\n[![TariScript](/assets/updates/img/tariscript_paper_screenshot.png)](/assets/updates/docs/tariscript.pdf)\n\nThe acceptance and publication of the paper is acknowledgement \nby the broader crypto community that Tari is making significant original contributions to the space. \n\nIf you find the paper a little dense, [RFC-201](https://rfc.tari.com/RFC-0201_TariScript.html) is an \napproachable alternative, while going into considerably greater detail than the paper's 10-page limit allows.\n\nIf this is still over your head, then perhaps our \n[ECC primer on Youtube](https://www.youtube.com/watch?v=69bl6dfM6jI) is\nthe introduction you are looking for.\n\n\n\n\n",
        "title": "TariScript at Blockchain '23",
        "date": "2023-07-17T00:00:00.000Z",
        "excerpt": "Tari was recently represented at the  International Congress of Blockchains and Applications (Blockchain '23) in  lovely Guimarães, Portugal. !Blockchain '23 Guimarães, Portugal. Photo credit: Cayle...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-07-21-update-114",
        "content": "\nThe Tari core developers always trying to improve and simplify the process of developing templates. \nHowever, if you're eager to start experimenting with templates on Tari, we've simplified the process to help you get started.\n\nWe've developed a Docker image that sets up a clean local network with essential components such as the base node, \nbase layer console wallet, validator nodes, indexers, second layer wallets, and other necessary services, \nproviding you with a convenient one-click testing environment.\n\nAlmost. It's not entirely one-click yet but we are continuously improving our tools to reach that goal.\n\nTo begin, follow these steps:\n\n1. Install Docker on your system.\n2. Run the following command:\n```\ndocker run -it -p 18000-18100:18000-18100 \\\n  quay.io/tarilabs/dan-testing:latest \\\n  /bin/bash\n```  \n\nOnce the Docker image is up and running, execute the Python script:\n\n```\npython3 main.py\n```\n\nAlternatively, if you prefer to compile from source, you can clone the repository from \nhttps://github.com/tari-project/dan-testing and run the same command.\n\nThis will start up the process, and you'll be presented with a startup screen.\n\n![Layout](/assets/updates/img/update-114-1.png)\n\nOn the page, you'll find links to open the Validator Node, Wallet, and Indexers UI and logs.\n\nAt the bottom of the page, there's a button to upload WASMs as a template.\n\nA great starting point for coding templates is to use the wasm-template repository with cargo generate. \nYou can find more information [in a previous developer update](https://www.tari.com/updates/2022-11-10-update-94).\n\nTo use the `wasm-template` repository, run the following command:\n\n`cargo generate https://github.com/tari-project/wasm-template.git counter`\n\nFollow the instructions, edit the contract as needed, and then compile it:\n\n```\ncd package\ncargo build-wasm\n```\n\nOnce you have your template ready, upload it using the provided form:\n\n![Layout 2](/assets/updates/img/update-114-2.png)\n\nIn development, the second layer has a confirmation time of 3 blocks, but this may be different in the `mainnet` second layer.\n\nTo proceed, click the `Mine` button in this box three times:\n\n![Base layer](/assets/updates/img/update-114-3.png)\n\nNow, if you look at the validator node, a new template will be registered, and you can click on it to see its available methods:\n\n![Validator node](/assets/updates/img/update-114-4.png)\n\nWith these steps completed, you are ready to start experimenting and testing your templates on Tari's platform. Enjoy!\n\n\n\n\n\n",
        "title": "Simplified Template Testing on Tari - One-Click Environment Setup",
        "date": "2023-07-17T00:00:00.000Z",
        "excerpt": "The Tari core developers always trying to improve and simplify the process of developing templates.  However, if you're eager to start experimenting with templates on Tari, we've simplified the...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-07-05-update-112",
        "content": "\n## Code audits\n\nOn behalf of the Tari community, we are happy to announce that [Coinspect](https://www.coinspect.com/) will be\nconducting an audit of the Tari base node (Minotari) code and wallet library. Coinspect is a well-known name in the\ncrypto security space and has experience in auditing Mimblewimble-based protocols, having completed\nthe [Grin audit](https://www.coinspect.com/grin-security-audit/) in 2019.\n\nThe Tari community has been diligently tidying up the codebase, sprucing up documentation and completing its own set of\nreviews in preparation for the external audit. This work is complete and the base node code was frozen for the audit on\n30 June.\n\nCommit [`87c0703059511`](https://github.com/tari-project/tari/releases/tag/v0.51.0-pre.4) is the reference commit for\nthe audit.\n\nThe audit kicked off this week, the first week of July, and should run for around three months.\n\nThe Tari base layer codebase comprises around [250,000 lines of source code](https://github.com/tari-project/tari). This\nrepresents an enormous amount of development work. It is not possible, from a time nor cost perspective to have the\nentire quarter of a million lines of code be subject to a detailed audit.\n\nTherefore, we have selected the most critical parts of the codebase — those parts where bugs could lead to users losing\nmoney — to be subject to detailed scrutiny. This represents around 40% of the total code base.\n\nThese critical components include the consensus code, the wallet transactional protocol, and the P2P overlay network.\nCoinspect will be focusing on these aspects of the codebase. The crypto library, including the bulletproof+\nimplementation, will be reviewed by third parties with a specialisation in cryptography, including QuarksLabs.\n\nTogether, this represents a reasonably thorough coverage of the Tari codebase. Of course, no amount of review and\nauditing guarantees that a codebase is bug-free. The intent is to demonstrate that the Tari community has taken all\npractical steps to produce a codebase that is secure and reliable, even in the absence of any guarantees.\n\nLet’s see what the next three months bring. We are quietly hopeful that the audit proceeds well.\n",
        "title": "Audit announcement",
        "date": "2023-07-05T00:00:00.000Z",
        "excerpt": "Code audits On behalf of the Tari community, we are happy to announce that Coinspect will be conducting an audit of the Tari base node (Minotari) code and wallet library. Coinspect is a well-known...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-06-30-update-111",
        "content": "\nOur initial take on [Cerberus] consensus came with a massive number of learnings for the team. The variant could best \nbe described as a coming together of chained-hotstuff and optimistic-Cerberus across overlapping VN committees.\nThis implementation served us well as we built out the validator node, WASM template engine, and \n[clients](/updates/2023-05-12-update-109.html). \n\nIt also highlighted some shortcomings, specifically around agreement, and performance (high message complexity) \nwith transactions that involve many objects. Today we are starting work on a new implementation that addresses these \nand other shortcomings.\n\n### Single-Chain Committees\n\nIn the current implementation, each transaction-object pair creates a separate 3-chain. This makes it harder to reach\nagreement on the state as a whole. As part of addressing this, we replaced overlapping shard committees with a simple algorithm \nthat divides the shard space into equal \"buckets\" and deterministically allocates each validator node to a bucket \nfor which they are responsible for the remainder of the epoch. The number of buckets can change with every epoch and \nis proportional to the number of _registered_ validator nodes for the epoch.\n\n\\begin{align*}\n\\text{num_buckets} &=  \\lfloor |\\vec{V_e}|\\: / \\: \\text{target_committee_size} \\rfloor \\\\\n\\text{shard_size} &= u256_{MAX}\\: / \\:\\text{num_buckets}  \\\\\n\\end{align*}\nwhere $\\vec{V_e}$ is the current validator set for epoch $e$.\n\nNow that each validator node belongs to exactly one committee, it becomes trivial to build a single chain for each\nshard. In addition to the simplicity of this model, this allows each validator to easily verify Byzantine majority \nagreement on shard state. \n\n### Batching\n\nAnother aspect being worked on is transaction throughput. After some basic stress testing recently conducted in a \ntest setting by Tari contributors, @Cifko and @stringhandler, we observed some expected bottlenecks in the current \nsecond layer consensus.\n\nThese bottlenecks are expected because each shard must do chained-hotstuff consensus for each object in each transaction.\nIn consensus, what is being agreed upon is often completely decoupled from the protocol itself. It therefore follows,\nif we send multiple rounds of messages to agree on a single transaction, why not increase the bang-for-your-buck of these \nmessages by coming to agreement on a bundle of transactions? Sounds like a block, doesn't it? \n\nAs you'd expect, the reality is a little more complex and co-ordinating these batches across multiple shards is not trivial. \nWe've taken some inspiration from the co-ordination described in the [chainspace] paper. \n\nBriefly, in our protocol, validators decide to COMMIT/ABORT each applicable transaction it encounters. Not relevant here,\nbut this usually involves running a WASM template. A shard leader proposes a block containing commands which each contain \nthe command, a transaction hash, the decision to COMMIT/ABORT, and references to the QuorumCertificates for blocks \ncontaining transaction. A command is either 'Prepare', 'SomePrepared', 'AllPrepared' and is roughly a request for votes \non whether a validator agrees with the decision, and the provided QC evidence is correct for the command.\n\nThe block is broadcast to all local validators who submit a vote. The leader collects the votes and produces a \nQuorumCertificate for this block, and broadcasts it to all involved remote shards. Once all involved shards have evidence \nthat all global shards have made the same decision, the leader will propose a block containing the command to ACCEPT the\ntransaction decision (either COMMIT or ABORT). \n\nThis, and more, are actively (as in right now) being worked on so expect to see some exciting developments in the near future.\nIf you'd like to follow in detail, you can take a look here: https://github.com/tari-project/tari-dan/tree/development/dan_layer/consensus.\n\n- [Cerberus](https://escholarship.org/uc/item/6h427354)\n- [chainspace](https://arxiv.org/pdf/1708.03778.pdf)\n",
        "title": "DAN consensus, take two",
        "date": "2023-06-29T00:00:00.000Z",
        "excerpt": "Our initial take on [Cerberus] consensus came with a massive number of learnings for the team. The variant could best  be described as a coming together of chained-hotstuff and optimistic-Cerberus...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-05-17-update-110",
        "content": "\nIn MimbleWimble things work a little differently than other blockchains. In most blockchains, a transaction is sent to\na public key. Users then scan the blockchain for their public keys and know when they have received a mined transaction\nfrom which they can spend the funds. They then use the private key to prove ownership when spending. In MimbleWimble \nthings don't quite work like that. Here you create your own output with a single-use key each time you receive a transaction.\nThis means that when you and the sender talk to each other, you interactively work together to create a new transaction. The sender\ncreates a proof that they are able to spend the UTXO, and the receiver creates a proof that no new coins have been received and\nthat the chain balance still holds. This ensures that the transaction is blinded. \n\nIn the Tari network things work a bit differently since we have [TariScript](https://rfc.tari.com/RFC-0201_TariScript.html). Here \nwe effectively have two secrets per UTXO, compared to the one per vanilla MimbleMimble. We have the blinding factor and the script key.\nIf the spender cannot provide knowledge of both of these secrets, they cannot spend the UTXO. This means that a user\ncan give out their blinding factor, and post it on the internet. And everybody can go look on the blockchain, and verify the output. \nBut if someone does not have the script key they cannot unlock the output and spend it. While this is obviously a bad idea\nfor privacy reasons, it's doable and safe. \n\nSo what does this mean for hardware wallets? Hardware wallets already have support on other blockchains like [Grin](https://www.reddit.com/r/grincoin/comments/z39ebv/grin_ledger_hardware_wallet_support/) and [MimbleWimble Coin](https://github.com/mwcproject/ledger-mwc)\nwhile others like [beam](https://twitter.com/BeamCTO/status/1620333432751685632?lang=en) are in development. All of these\nblockchains work with the blinding factor as the secret to prove ownership. In practical terms, this has two big negatives for \nthe hardware wallet: crypto complexity and online receive only. The crypto complexity comes from the fact that the hardware \nwallet now was to do all complex cryptography proofs like the bulletproof which can be very taxing for a low-power device. But the \nbigger downside is that you have to have the ledger signed in, and online at all times to receive funds. This means\nthat you cannot safely store away the hardware wallet in a safe until such a time as you want to spend your funds.\n\nBecause in Tari we have the two secrets per UTXO, we can safely leave all the blinding factor generation, bulletproof generation, \netc. for the normal wallet. As long as we attach a script to the UTXO with a claim script key known only to the hardware wallet\nwe still force the requirement that the hardware wallet needs to sign the transaction before spending the UTXO. And if we are clever\nwith the choice of the private script key, we allow the wallet application to pre-calculate the public key required to spend the \nUTXO without the need for the ledger to calculate the private key. \n\nIf assign a private key pair `(a, A)` to the Hardware wallet. \nThe wallet can calculate a Diffie-Hellman shared secret as `s = Hash(k * A)`. \nIt can then calculate the public key required for the script as `K_S = S + A`\nWhen spending time comes around the hardware wallet needs to provide `k_S = s + a`\n\nBecause `a` is only known to the hardware wallet, the script secret key is only known to it and not the wallet, thus\nthe one secret never leaves your hardware wallet, allowing you to receive transactions while your hardware wallet is\nsafely stored away in your safe. This all means doing hardware wallet support on Tari is much easier, safer, and userfriendly.",
        "title": "MimbleWimble and Hardware Support",
        "date": "2023-05-17T00:00:00.000Z",
        "excerpt": "In MimbleWimble things work a little differently than other blockchains. In most blockchains, a transaction is sent to a public key. Users then scan the blockchain for their public keys and know when...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-05-05-update-108",
        "content": "\nWe all know and love the console wallet but the mobile [Aurora wallet](https://aurora.tari.com) has been quietly and \nsteadily \nbeen getting \nfaster,\neasier to use, and more reliable for the last few years. We decided that it's time to showcase the best features of \nTari's reference design mobile wallet.\n\n{% include embedded_video.html id=\"FNoFeB17af4\" %}\n\n* [Link to video](https://youtu.be/FNoFeB17af4)\n* [Aurora home page](https://aurora.tari.com)\n* [Get it on the Google Play store](https://play.google.com/store/apps/details?id=com.tari.android.wallet)\n* [Get it on the iOS App store](https://apps.apple.com/us/app/tari-aurora/id1503654828?ls=1)",
        "title": "The Best of Aurora",
        "date": "2023-05-05T00:00:00.000Z",
        "excerpt": "We all know and love the console wallet but the mobile Aurora wallet has been quietly and  steadily  been getting  faster, easier to use, and more reliable for the last few years. We decided that...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-05-12-update-109",
        "content": "\nThe Tari network has three primary clients, namely Validator Nodes, Wallets, and Indexers, excluding the Minotari\nnetwork clients. Validator nodes execute transactions and reach an agreement using a variant of the Cerberus consensus,\nwhile wallets serve as an interface for clients. However, what is the role of Indexers?\n\nTo enable the Tari network to process thousands of transactions per second, the network has been sharded. This means\nthat no validator node stores the entire network's data and would probably be unable to do so, even if it wanted to.\nMoreover, specific assets and contracts are spread across different shards to avoid overloading some shards while\nleaving others idle. However, this also means that if you're only interested in a single asset, your wallet would need\nto request the data for that asset from every shard. To address this issue, Tari has developed an Indexer that can be\nrun locally to scan the shards and download all data related to assets you're interested in.\n\nIndexers function similarly to base nodes for the Minotari layer, providing a unified view of an asset as though it were\na dedicated blockchain.\n\nYou can think of the distinction between validator nodes and indexers as cutting vertically and horizontally through \nthe contract-shard space. This is illustrated in the image below. Validator nodes -- during a single epoch -- are \nonly concerned about what happens in a small fraction of the shard space, but are prepared to validate any \ninstruction for any contract that touches the shard space the node is responsible for. Indexers, on the other hand, \nare typically only interested in following what happens to a single contract, and will follow that contract across \nthe entire shard space.\n\nFor this reason, indexers and nodes have orthogonal responsibilities. This configuration may feel somewhat strange \nif you're used to global state machines, like Ethereum or Solana. The polarisation of indexers and nodes is a natural \nresult of the highly sharded and linear scalability of the Cerberus consensus algorithm.\n\nIt also means that tools like [etherscan.io] become very difficult to implement in Tari -- as it should be: global \nsurveillance of a chain that aims to scale to thousands of transactions per second _should_ be very difficult -- the \ndefault-private nature of Tari notwithstanding!\n\n![indexers and validator nodes](/assets/updates/img/indexer_vs_vn.jpg)\n\nWhich software would you run? Typically, if you're interested in helping scale the Tari network (and earn a return \nfor doing so), you would run a validator node. \n\nIf you're interested in building a distributed client application, you would implement an indexer that follows your \ncontract.\n\nAs an example, suppose you run a real-world coffee shop and want to create a loyalty points system. In that case, you\ncan use the fungible loyalty points contract template and publish it on the network. Your customers can interact with\nand store their loyalty points in Tari DAN wallets. Finally, to validate or display transactions for whatever reason,\nyou can set up a Tari Indexer node to monitor the resource and component address of your contract.\n\nThe development of the Indexer is still ongoing, with the Tari development community working on adding GraphQL and event\nscanning capabilities. If you'd like to try it out, you can find it\nhere: https://github.com/tari-project/tari-dan/tree/development/applications/tari_indexer.",
        "title": "Indexers vs Validator Nodes",
        "date": "2023-05-05T00:00:00.000Z",
        "excerpt": "The Tari network has three primary clients, namely Validator Nodes, Wallets, and Indexers, excluding the Minotari network clients. Validator nodes execute transactions and reach an agreement using a...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-04-20-update-107",
        "content": "\n## Versioning\nThis week we released new versions of StageNet, NextNet, and Development aka Esmeralda. All of the versions are available at [Tari](https://www.tari.com/downloads/). The detailed versioning guide can be found here: [detailed guide](https://github.com/tari-project/tari/blob/development/docs/src/branching_releases.md).\nCurrent recommended running versions for the Tari Network will always be available [here](https://github.com/tari-project/tari/blob/development/README.md) \n\n### StageNet\nStageNet has been upgraded to v0.48.0 this week. This means all, code changes that were in development at v0.48.0 is now running live in StageNet. The latest version will be `v0.48.x.`\n\n### NextNet\nNextNet has been upgraded to v0.49.0-rc.3 this week. Same as with above, all changes that were in development in v0.49.0-pre.x will be in NextNet. The latest version will be `v0.49.0-rc.x` \n\n### Esmeralda\nEsmeralda has been upgraded to v0.50.0-pre.0 this week.  The latest version will be `v0.50.0-pre.x` \n\n### Aurora\nThe newest release of Aurora, `0.20.x`, has also moved over to NextNet away from Esmeralda. This means that if you want to send funds over between the desktop version and mobile version, make sure you are running NextNet or `v0.49.0-rc.x`. \n\n## Feature gating\nCurious users might have noticed that running a pre-build binary on a version that it is not built for will result in the binary displaying an error and not running. \nAn example of such an error is:\n```\nExitError { exit_code: NetworkError, details: Some(\"The network nextnet is invalid for this binary built for TestNet\") }\nERROR Exiting with code (110): ExitError { exit_code: NetworkError, details: Some(\"The network nextnet is invalid for this binary built for TestNet\") }\n```\nThis is a safety feature that is now built into each binary to ensure it can only run the intended correct version as we now have multiple different versions each running a different version of the code. These code changes can be anything from differences in how the network communicates to changes in how the signatures of transactions are constructed. This has necessitated the need for these to be safely warded off. \n\nThe feature gating has also allowed us to make sure the miner now knows by default which network it was built for and knows the correct default ports to connect to so that you as the user don't have to dig into the config to get the miner to work. \n\n## Data directory\nEagle-eyed users might have noticed that the data directory of all binaries has also somewhat changed to now include the running network name. This will allow users to easily run multiple different versions of the network at the same time without having to manually specify different locations to run at. \n",
        "title": "This week in Tari",
        "date": "2023-04-20T00:00:00.000Z",
        "excerpt": "Versioning This week we released new versions of StageNet, NextNet, and Development aka Esmeralda. All of the versions are available at Tari. The detailed versioning guide can be found here: detailed...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-04-13-update-106",
        "content": "\n## The two-layer system\n\nA [recent post](/updates/2023-03-24-update-104.html) explained the two layer system in Tari. The two layers have had \ngeneric names for ages. The base layer/mimblewimble chain/Tari L1 is the proof-of-work layer that produces the native \ntoken, \nmaintains a registry of L2 validator nodes, and acts as a version control system for L2 smart contract templates.\n\nThe second layer has been referred to the DAN (Digital Assets Network), Tari L2, second layer or smart-contract \nlayer.\n\nIt's time to banish these generic names to the wilderness and announce the permanent monikers for the two major \ncomponents making \nup the Tari ecosystem.\n\n## Tari is dead! Long live Tari!\n\nMost users will only ever interact with the digital assets layer. They will not be involved with mining or \nregistering smart contract templates, and will only ever need or spend \"layer 2 Tari\" tokens.\n\nFor this reason, we're calling the tokens that are minted on the second layer \"Tari\". The DAN is officially baptised \nas the Tari Network.\n\n## So what about the base layer?\n\nThe base layer token has a very close relationship with the Tari token, since the only way to mint Tari is by \nburning base layer tokens. For this reason, we didn't want to change the name to something completely different, but \nstill wanted to make a clear distinction between the two. \n\nEnter, Minotari.\n\nBase layer tokens will now be called Minotari. And the blockchain that governs Minotari will be called the Minotari \nchain.\n\nMinotari evokes images of the mythical half bull, half man creature, the minotaur. From a branding point of view, \nthere are probably some fun things we can do there.\n\nIt's also quite easy to remember which token lives on the proof-of-work chain: The miner's Tari is Minotari. We've \nbeen playing with these names in the development community for a week or so and found them to be quite sticky. h/t \nto @raven for suggesting the name.\n\n## Tari and Minotari\n\nTo recap the flow of Tari tokens: Minotari are mined, and may then be burned in order to mint Tari on the Tari\nnetwork at a 1:1 conversion ratio. Tari is used to interact with smart contracts and validator nodes will earn Tari \nfor maintaining the network in consensus.\n\nA small fraction of Tari gets burnt in every transaction to maintain a slight and continuous demand for minting new \nTari. This mechanism will mean that the Tari:Minotari price always remains near 1:1.\n\nAtomic swaps between the Tari and Minotari tokens will be supported, but ultimately, we expect both Tari and \nMinotari pairs to be represented on exchanges so that users and validators can \nconvert Tari back to Minotari, or indeed any other currency, crypto or otherwise, if they wish to do so.\n\n## tl;dr\n\nWe've finally decided on cool names for the things.\n\n| Old name                     | New name       | \n|------------------------------|----------------|\n| Tari L1 / Base layer         | Minotari chain |\n| Tari token (XTR)             | Minotari (XMT) |\n| Tari L2 / Second layer / DAN | Tari Network   |\n| Tari L2 token (thaums)       | Tari (XTR)     |\n",
        "title": "Tari is dead! Long live Tari!",
        "date": "2023-04-13T00:00:00.000Z",
        "excerpt": "The two-layer system A recent post explained the two layer system in Tari. The two layers have had  generic names for ages. The base layer/mimblewimble chain/Tari L1 is the proof-of-work layer that...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-04-05-update-105",
        "content": "\n## Breaking changes\n\nAnother release, another breaking change. Jokes aside as we move closer and closer to a release we are trying to optimize the code base and include all features that might require hard forks.\n\n### Signature change\nWe have changed how the signature challenge is constructed in ([#5282](https://github.com/tari-project/tari/issues/5282)). This allows us to better support hardware devices in the future by limiting the amount of data that needs to be transferred to sign transactions. \n### Key management\nWe are busy refactoring how the code base handles private keys. As part of this, we have moved the key manager service out of the wallet, to be part of the key manager crate. This will allow all base layer code to reference the key manager trait and allow the Dan layer to use the key manager without including the wallet. ([#5284](https://github.com/tari-project/tari/issues/5284))\n### Genesis blocks\nIn continuing our release process, detailed [here](https://github.com/tari-project/tari/blob/development/docs/src/branching_releases.md), we have added the release dates to the genesis blocks for the next releases of the development branch (aka when the current development code will go those networks). ([#5283](https://github.com/tari-project/tari/issues/5283))\n\n## Wallet Password flow\nWe have added a password check to warn users if bad or weak passwords have been chosen for their wallets, but it would only print out a warning. We have now changed the UI flow to query the user if they want to change the password. ([#5279](https://github.com/tari-project/tari/issues/5279))\n\n\n\nAnd finally, here is the complete list of features and fixes we've made from version 0.49.0-pre.2 to 0.49.0-pre.6 \n## [0.49.0-pre.6](https://github.com/tari-project/tari/compare/v0.49.0-pre.5...v0.49.0-pre.6) (2023-04-05)\n\n\n### ⚠ BREAKING CHANGES\n\n* move key manager service to key_manager (#5284)\n* add igor faucet (#5281)\n* reset dates for networks (#5283)\n\n### Features\n\n* add igor faucet ([#5281](https://github.com/tari-project/tari/issues/5281)) ([bfc92fd](https://github.com/tari-project/tari/commit/bfc92fdcb759aa31301cf11f239dc1aefd58ac63))\n* added auxiliary callback to push base node state changes [#5109](https://github.com/tari-project/tari/issues/5109) ([#5257](https://github.com/tari-project/tari/issues/5257)) ([b7f7d31](https://github.com/tari-project/tari/commit/b7f7d31fb634804ecf2f8ba1c39094163944f584))\n* move key manager service to key_manager ([#5284](https://github.com/tari-project/tari/issues/5284)) ([d50ed02](https://github.com/tari-project/tari/commit/d50ed02675dbca9294882e5bbe522b8fda00fb2a))\n* reset dates for networks ([#5283](https://github.com/tari-project/tari/issues/5283)) ([d6342a4](https://github.com/tari-project/tari/commit/d6342a4200cb7de469575d67129f9214535cf237))\n\n\n### Bug Fixes\n\n* resize transaction tab windows ([#5290](https://github.com/tari-project/tari/issues/5290)) ([bd95a85](https://github.com/tari-project/tari/commit/bd95a853b2eb166a4aa8e32778ed72bb1f8172ad)), closes [#4942](https://github.com/tari-project/tari/issues/4942) [#5289](https://github.com/tari-project/tari/issues/5289) [#12365](https://github.com/tari-project/tari/issues/12365)\n\n## [0.49.0-pre.5](https://github.com/tari-project/tari/compare/v0.49.0-pre.4...v0.49.0-pre.5) (2023-04-04)\n\n\n### ⚠ BREAKING CHANGES\n\n* change signature construction to allow better HW support (#5282)\n\n### Features\n\n* change signature construction to allow better HW support ([#5282](https://github.com/tari-project/tari/issues/5282)) ([82d2dcb](https://github.com/tari-project/tari/commit/82d2dcb04ced94f05a0801c5cb97bbebc41ca3e0))\n* improved passphrase flow ([#5279](https://github.com/tari-project/tari/issues/5279)) ([ac21da6](https://github.com/tari-project/tari/commit/ac21da60abec25db14e7201a5f82e15e4f7f2fe0))\n\n\n### Bug Fixes\n\n* ensures mutable MMR bitmaps are compressed ([#5278](https://github.com/tari-project/tari/issues/5278)) ([dfddc66](https://github.com/tari-project/tari/commit/dfddc669e3e1271b098c8b271e13f076ca79b039))\n\n## [0.49.0-pre.4](https://github.com/tari-project/tari/compare/v0.49.0-pre.3...v0.49.0-pre.4) (2023-03-24)\n\n\n### Features\n\n* added FFI function `wallet_get_network_and_version` [#5252](https://github.com/tari-project/tari/issues/5252) ([#5263](https://github.com/tari-project/tari/issues/5263)) ([4b09b59](https://github.com/tari-project/tari/commit/4b09b59ce0cbc7e5c270c4c06a671c2fcff18bfc))\n\n## [0.49.0-pre.3](https://github.com/tari-project/tari/compare/v0.49.0-pre.2...v0.49.0-pre.3) (2023-03-20)\n\n\n### Bug Fixes\n\n* reduce warn log to debug in utxo scanner ([#5256](https://github.com/tari-project/tari/issues/5256)) ([3946641](https://github.com/tari-project/tari/commit/394664177dcbd05fdd43d54b3bd9f77bc52ecd88))\n* wallet sending local address out to network ([#5258](https://github.com/tari-project/tari/issues/5258)) ([6bfa6f9](https://github.com/tari-project/tari/commit/6bfa6f9fecdd594386ef07169d0e68777b3becd5))\n\n## [0.49.0-pre.2](https://github.com/tari-project/tari/compare/v0.49.0-pre.1...v0.49.0-pre.2) (2023-03-16)\n\n\n### Bug Fixes\n\n* ffi hot fix ([#5251](https://github.com/tari-project/tari/issues/5251)) ([9533e40](https://github.com/tari-project/tari/commit/9533e4017f1229f6de31966a9d5f19ea906117f3))\n",
        "title": "This week in Tari",
        "date": "2023-04-05T00:00:00.000Z",
        "excerpt": "Breaking changes Another release, another breaking change. Jokes aside as we move closer and closer to a release we are trying to optimize the code base and include all features that might require...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-03-24-update-104",
        "content": "\nFees on the second layer prevent spam, and also provide an incentive for validator nodes to process transactions. When designing\nthe fee mechanics, the Tari development community decided to use the base layer Tari as the source of fees for the main currency\nof the second layer. An alternative, which other blockchains sometimes use, is to mint the second layer fee currency as a block reward.\nGenerally these lead to a proof of stake consensus mechanism, which in our opinion, is flawed and susceptible to [\"Nothing at stake\"](https://medium.com/coinmonks/understanding-proof-of-stake-the-nothing-at-stake-theory-1f0d71bc027) and other problems.\nInstead, Tari has a mechanism to import the base layer currency into the second layer. \n\n## Base Layer to Second Layer\n\nFirstly, the currency cannot exist in both the base layer and the second layer, so it must be burned on the base layer. This is done \nusing a UTXO that is unspendable and marked as a burn. This removes the funds from the base layer. \n\nAfter the burnt UTXO has been sufficiently confirmed (to make reorgs very unlikely), an equal amount of second layer Tari can be claimed using \na second layer instruction:\n\n```\n{\n\t\"ClaimBurn\": {\n\t\t\"claim\": {\n\t\t\t\"public_key\": \"2a50d463cf05b65a93f81dc39fe75697566a9dd4a776e34f120208d827692444\",\n\t\t\t\"output_address\": /* commitment */,\n\t\t\t\"range_proof\": /*... around 700 bytes ...*/,\n\t\t\t\"proof_of_knowledge\": {\n\t\t\t\t\"public_nonce\": \"e6278f72598967bb8412233ad9633145594639a12ada5e76b0b88a0653e36101\",\n\t\t\t\t\"u\": \"ecc210a4af31386069757af38c1422225166d6921fde1235f27e826df2d87b04\",\n\t\t\t\t\"v\": \"f994af433874cc859518253fb0bbd109bf9b0003c7c720470b781514258b3203\"\n\t\t\t}\n\t}\n}\n```\nThe output address is the same base layer commitment that hides the amount and spending key (blinding factor). A range proof is required to ensure \nthe commitment does not include a negative value, and the public key and proof of knowledge, which is a Schnorr-like signature for the commitment, ensure that\nonly the owner of the public key can claim the burn.\n\nIn the same second layer transaction, the user will typically store this commitment in a vault in their account. Of course, this transaction incurs fees, so the \ncommitment is immediately split into a revealed amount and a new commitment. The revealed amount is used to pay the fees.\n\nThe second layer Tari can now be used as normal fungible, confidential asset on the second layer for use cases other than fees.\n\n## Second Layer to Base Layer\n\nAt this stage it's important to note that base layer Tari and second layer Tari are different currencies, with a floating exchange rate. The reasons behind that are \nexplained better in the [Turbine Model RFC](https://github.com/tari-project/rfcs/blob/main/src/RFC-0320_TurbineModel.md#an-aside---the-monetary-policy-trilemma). \n\nConversions to base layer Tari can only be done via trades, exchanges (when available) or atomic swaps. This is often referred to as \"Liquidity Exits\" in other\nsecond layer blockchains.\n",
        "title": "Base Layer Tari versus Second Layer Tari",
        "date": "2023-03-24T00:00:00.000Z",
        "excerpt": "Fees on the second layer prevent spam, and also provide an incentive for validator nodes to process transactions. When designing the fee mechanics, the Tari development community decided to use the...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-03-15-update-103",
        "content": "\n## Version changes\n\nWe have introduced a few changes to how we version code releases to make it easier to identify which codebases are running on which Tari network.  \n\n* Versions with a suffix of `rc` are running on nextnet, \n* Versions with a suffix of `pre` are running on testnet (this is still currently Esmeralda). \n\nWe covered the reasoning in a recent [developer update](2023-02-17-update-100.md), and subsequent to that, we wrote a [detailed guide](https://github.com/tari-project/tari/blob/development/docs/src/branching_releases.md) on the versioning.\n\n## Testnet chain reset\n\nWith all of the breaking changes that where done recently it was decided to reset the Esmeralda testnet chain back to 0 again. \n\n## Balanced Merkle Trees\n\nFor the Dan layer, we have changed over from using Merkle Mountain Ranges to just using Balanced Merkle Trees as this should provide much better performance in terms of speed and size, see the PR [#5189](https://github.com/tari-project/tari/pull/5189) for more details and actual numbers.\n\n## Wallet encryption\n\nThere have been multiple updates and changes to how the wallet handles its own encryption. Most of these have been breaking changes and require the wallet to run recovery. But in the end, we are trying to ensure that using the wallet the data is properly and securely encrypted. \n\n## DAN improvements\n\nOn the Digital Assets Network layer, more PRs relating to confidential assets have been merged, and we are getting closer to MVP for confidential assets.\nWe have also merged a few PRs to start with claiming funds one the DAN. This will allow users to claim Tari burned on the main layer as funds to be used in the DAN layer.\n\nAnd finally, here is the complete list of features and fixes we've made from version 0.46.0 to 0.49.0-pre.1 \n## [0.49.0-pre.1](https://github.com/tari-project/tari/compare/v0.49.0-pre.0...v0.49.0-pre.1) (2023-03-15)\n\n\n### ⚠ BREAKING CHANGES\n\n* **wallet:** ensure burn shared keys and hashes match dan layer ([#5245](https://github.com/tari-project/tari/issues/5245))\n* add claim public key to OutputFeatures ([#5239](https://github.com/tari-project/tari/issues/5239))\n* reset esmeralda ([#5247](https://github.com/tari-project/tari/issues/5247))\n\n### Features\n\n* add claim public key to OutputFeatures ([#5239](https://github.com/tari-project/tari/issues/5239)) ([3e7d82c](https://github.com/tari-project/tari/commit/3e7d82c440b162cc5a7e3e97b1fb18acdc6dd681))\n* reset esmeralda ([#5247](https://github.com/tari-project/tari/issues/5247)) ([aa2a3ad](https://github.com/tari-project/tari/commit/aa2a3ad5910312642c8652996942993cf6b9df52))\n\n\n### Bug Fixes\n\n* added transaction revalidation to the wallet startup sequence [#5227](https://github.com/tari-project/tari/issues/5227) ([#5246](https://github.com/tari-project/tari/issues/5246)) ([7b4e2d2](https://github.com/tari-project/tari/commit/7b4e2d2cd41c3173c9471ed987a43ae0978afd57))\n* immediately fail to compile on 32-bit systems ([#5237](https://github.com/tari-project/tari/issues/5237)) ([76aeed7](https://github.com/tari-project/tari/commit/76aeed79ae0774bfb4cd94f9f27093394808bae1))\n* **wallet:** correct change checks in transaction builder ([#5235](https://github.com/tari-project/tari/issues/5235)) ([768a0cf](https://github.com/tari-project/tari/commit/768a0cf310aaf20cc5697eaea32c824f812bc233))\n* **wallet:** ensure burn shared keys and hashes match dan layer ([#5245](https://github.com/tari-project/tari/issues/5245)) ([024ce64](https://github.com/tari-project/tari/commit/024ce64843d282981efb366a3a1a5be36c0fb21d))\n* windows path format in log4rs files ([#5234](https://github.com/tari-project/tari/issues/5234)) ([acfecfb](https://github.com/tari-project/tari/commit/acfecfb0b52868bdfbee9accb4d03b8a4a59d90b))\n\n## [0.49.0-pre.0](https://github.com/tari-project/tari/compare/v0.48.0-pre.1...v0.49.0-pre.0) (2023-03-10)\n\n\n### ⚠ BREAKING CHANGES\n\n* **wallet:** use ECDH shard secret for burn mask with claim pubkey (#5238)\n\n### Features\n\n* add necessary trait bounds to balanced merkle tree ([#5232](https://github.com/tari-project/tari/issues/5232)) ([3b971a3](https://github.com/tari-project/tari/commit/3b971a3b0e39be774a1a21c477222d95a0e1b242))\n* update tari-crypto to v0.16.8 ([#5236](https://github.com/tari-project/tari/issues/5236)) ([c9d355b](https://github.com/tari-project/tari/commit/c9d355baeea2d6087f72df8c2c1645ef2c06ce88))\n* **wallet:** use ECDH shard secret for burn mask with claim pubkey ([#5238](https://github.com/tari-project/tari/issues/5238)) ([78838bf](https://github.com/tari-project/tari/commit/78838bfc64839be0ba79d1d668d0c6fb2e72e69e))\n\n## [0.48.0-pre.1](https://github.com/tari-project/tari/compare/v0.48.0-pre.0...v0.48.0-pre.1) (2023-03-08)\n\n\n### Bug Fixes\n\n* **comms:** dial if connection is not connected ([#5223](https://github.com/tari-project/tari/issues/5223)) ([0a060b6](https://github.com/tari-project/tari/commit/0a060b6827247a5772d04dde477f0494019bad89))\n* export error types for balance merkle tree ([#5229](https://github.com/tari-project/tari/issues/5229)) ([9db0501](https://github.com/tari-project/tari/commit/9db0501af3b464f430e889e21dc889ea736886ea))\n* fix compile error using decimal-rs 0.1.42 ([#5228](https://github.com/tari-project/tari/issues/5228)) ([6edbb1c](https://github.com/tari-project/tari/commit/6edbb1c8745593e41dd24585c9f8d399a96fff51))\n\n## [0.48.0-pre.0](https://github.com/tari-project/tari/compare/v0.47.0-pre.0...v0.48.0-pre.0) (2023-03-07)\n\n\n### ⚠ BREAKING CHANGES\n\n* **peer_db:** more accurate peer stats per address (#5142)\n* use consensus hashing API for validator node MMR (#5207)\n* **consensus:** add balanced binary merkle tree (#5189)\n\n### Features\n\n* add favourite flag to contact ([#5217](https://github.com/tari-project/tari/issues/5217)) ([0371b60](https://github.com/tari-project/tari/commit/0371b608dd7a59664e7c8e1494335709ad21943c))\n* add indexer config ([#5210](https://github.com/tari-project/tari/issues/5210)) ([cf95601](https://github.com/tari-project/tari/commit/cf9560192de56ce1be22468b4551c5a60e5d9440))\n* add merge proof for balanced binary merkle tree ([#5193](https://github.com/tari-project/tari/issues/5193)) ([8962909](https://github.com/tari-project/tari/commit/8962909127ded86249099bfdd384ac4e8b0db0ee))\n* **consensus:** add balanced binary merkle tree ([#5189](https://github.com/tari-project/tari/issues/5189)) ([8d34e8a](https://github.com/tari-project/tari/commit/8d34e8a8eee2ed88ad0ab866a185d10a43300ec1))\n* log to base dir ([#5197](https://github.com/tari-project/tari/issues/5197)) ([5147b5c](https://github.com/tari-project/tari/commit/5147b5c81082396dc80605e5a9422eec8b06c1b1))\n* **peer_db:** more accurate peer stats per address ([#5142](https://github.com/tari-project/tari/issues/5142)) ([fdad1c6](https://github.com/tari-project/tari/commit/fdad1c6bf7914bbdc0ffc25ef729506196881c35))\n\n\n### Bug Fixes\n\n* add grpc commitment signature proto type ([#5200](https://github.com/tari-project/tari/issues/5200)) ([d523f1e](https://github.com/tari-project/tari/commit/d523f1e556d0f56c784923600fe48f93e2239520))\n* peer seeds for esme/igor ([#5202](https://github.com/tari-project/tari/issues/5202)) ([1bc226c](https://github.com/tari-project/tari/commit/1bc226c85c0810c9ad01dfb6539d8b614cc71fb8))\n* remove panics from merged BBMT verification ([#5221](https://github.com/tari-project/tari/issues/5221)) ([a4c5fce](https://github.com/tari-project/tari/commit/a4c5fce5e43153db090465f3623989ed07dfd627))\n* source coverage ci failure ([#5209](https://github.com/tari-project/tari/issues/5209)) ([80294a1](https://github.com/tari-project/tari/commit/80294a1a931d248413166966eebb1e297249e506))\n* use consensus hashing API for validator node MMR ([#5207](https://github.com/tari-project/tari/issues/5207)) ([de28115](https://github.com/tari-project/tari/commit/de281154ac339cd0e8b0eac59bcf933851dcc5c6))\n* wallet reuse existing tor address ([#5092](https://github.com/tari-project/tari/issues/5092)) ([576f44e](https://github.com/tari-project/tari/commit/576f44e48d781e3a61be138549484c4b4a79773e))\n* **wallet:** avoids empty addresses in node identity ([#5224](https://github.com/tari-project/tari/issues/5224)) ([1a66312](https://github.com/tari-project/tari/commit/1a66312d13dff7fd627930be88cfebffc4b08074))\n\n## [0.47.0-pre.0](https://github.com/tari-project/tari/compare/v0.46.0...v0.47.0-pre.0) (2023-02-27)\n\n\n### Features\n\n* next net configuration ([#5204](https://github.com/tari-project/tari/issues/5204)) ([9f267fc](https://github.com/tari-project/tari/commit/9f267fcc4c34c84f4e713be5f20131170dc19664))\n\n\n### Bug Fixes\n\n* addresses mmr `find_peaks` bug ([#5182](https://github.com/tari-project/tari/issues/5182)) ([ee55e84](https://github.com/tari-project/tari/commit/ee55e843d0fd31b25163e118a3454ef666088c6c))\n\n## [0.46.0](https://github.com/tari-project/tari/compare/v0.45.0...v0.46.0) (2023-02-21)\n\n\n### ⚠ BREAKING CHANGES\n\n* add key commitment to database main key AEAD  (#5188)\n\n### Features\n\n* add key commitment to database main key AEAD  ([#5188](https://github.com/tari-project/tari/issues/5188)) ([95bc795](https://github.com/tari-project/tari/commit/95bc7956811020957d4cf0a8eef742124d44bcde))\n* add more burn details to burn command ([#5169](https://github.com/tari-project/tari/issues/5169)) ([e417e57](https://github.com/tari-project/tari/commit/e417e575beb23cd17a119984829ee7479d39c459))\n* print out warning if wallet grpc connections fails ([#5195](https://github.com/tari-project/tari/issues/5195)) ([4e1cb38](https://github.com/tari-project/tari/commit/4e1cb38aeec5cbb61e39920e3d1871699107c06f))\n\n\n### Bug Fixes\n\n* add missing consensus constants to get_constants grpc ([#5183](https://github.com/tari-project/tari/issues/5183)) ([9900d5d](https://github.com/tari-project/tari/commit/9900d5db3eacf463b479ad242391c9a2e0a38db8))\n",
        "title": "This week in Tari",
        "date": "2023-03-15T00:00:00.000Z",
        "excerpt": "Version changes We have introduced a few changes to how we version code releases to make it easier to identify which codebases are running on which Tari network.    Versions with a suffix of  are...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-03-06-update-102",
        "content": "\n## More reliable Peer management\n\nPull Request(PR) [#5142](https://github.com/tari-project/tari/issues/5142) brings more reliability to sending and receiving transactions and syncing blocks. \nIt also adds more intelligent tracking of offline peers by marking only the address as offline and not the whole peer.\n\n## Nextnet\nHot on the heels of the `Stagenet` release a few weeks ago, we have an official `Nextnet` build, along with its seed peers and genesis block. Every eight weeks, the code running on Nextnet is deployed to Stagenet (and Mainnet when it is released). Nextnet allows us to test and fix upcoming features, but is a little more stable than `testnet` and compiling directly from the `development` branch.\n\n## DAN improvements\n\nOn the Digital Assets Network layer, a few PRs relating to confidential assets have been merged. \nThere are many dimensions to confidential assets, which we'll go into more detail in a future blogpost. At the moment the DAN supports some basic operations such as importing base layer tXTR that was burnt on the base layer and depositing it as Pederson commitment into a Vault.\n\nThere are also a few PRs relating to indexing components, accounts, resources and NFTs on the DAN. Having a highly scalable sharded network means that no single node has all the data in the network. As a user of the network, you'll only be interested in a few resources or accounts. To facilitate this, you can run a Tari indexer which tracks related substates of data across different shards and keeps a local cache that can be queried easily. ",
        "title": "This week in Tari",
        "date": "2023-03-06T00:00:00.000Z",
        "excerpt": "More reliable Peer management Pull Request(PR) #5142 brings more reliability to sending and receiving transactions and syncing blocks.  It also adds more intelligent tracking of offline peers by...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-02-22-update-101",
        "content": "\nThe Tari development community recently started talking about what it would take to add hardware wallet support for Tari.\n\nThere are a few challenges here:\n* Tari uses a different elliptic curve (Ristretto) to Bitcoin (secp256k1) and so there is probably no signing support \"out of the box\".\n* We like Rust, but what does Rust support for hardware wallets look like?\n* Can we compile our crypto libraries to fit inside the extremely constrained resources of a crypto wallet (128kB in some cases)?\n\nAs a start, @SWvheerden  tried to get some preliminary answers to these questions by trying not to brick a brand-new Ledger Nano S+. This is what he found.\n\n\n## So what's the official stance?\n\nThe operating system behind all Ledger personal security devices is called the Blockchain Open Ledger Operating System, or [BOLOS](https://developers.ledger.com/docs/embedded-app/bolos-introduction/)  for short. Developer support is heavily skewed towards C code and Linux, but there are unofficial tools for developing in other languages, including Rust. \n\nAlthough Windows gets unofficial support through its own [WSL](https://learn.microsoft.com/en-us/windows/wsl/install) program which runs a very light Linux VM inside of windows, MacOS support is completely lacking. \nFor application development, support exists for mobile through [BLE](https://developers.ledger.com/docs/transport/react-native-bluetooth-android/), [react](https://developers.ledger.com/docs/transport/react-native-android-hid/) for android only, and for desktop, this is limited to [NodeJS](https://developers.ledger.com/docs/transport/node-electron-hid/).\n\n## What are we going to try to accomplish?\nWe are going to see if we can create and load a sample BOLOS application with Rust without the use of an FFI onto a Ledger NanoS+ using MacOS. We also need to create a desktop application counterpart for this BOLOS application. Because we are going to attempt to use Rust this process should be multi-platform working on Linux and Windows.\nThe complete code for the BOLOS application and Desktop application can be found here: [github](https://github.com/tari-project/ledger)\n\n## Prerequisites\nBefore we can think about setting up our machine for the development of Ledger, we need to ensure that the machine is set up for the general development of Rust. This is going to focus on MacOS only, installing the dependencies for other OS should point to missing and otherwise required packages.\n\nFirst is a Mac only requirement, installing [homebrew](https://brew.sh/), you might get around this, but it will make your life much easier if you do.\n\nSecond, up is [Rust](https://www.rust-lang.org/tools/install). This needs to be installed if regardless of your choice of OS.\nWe can verify the installation with:\n ```\nrustup --version\n\nrustup 1.25.2 (17db695f1 2023-02-01)\ninfo: This is the version for the rustup toolchain manager, not the rustc compiler.\ninfo: The currently active `rustc` version is `rustc 1.69.0-nightly (e1eaa2d5d 2023-02-06)`\n```\n\nNext up is [Python 3](https://realpython.com/installing-python/) which importantly comes with pip3. This needs to be installed regardless of your choice of OS.\nVerify this with\n```\npython3 --version\n\nPython 3.11.2\n```\n```\npip3 --version\n\npip 22.3.1 from /opt/homebrew/lib/python3.11/site-packages/pip (python 3.11)\n```\n\nLastly a Mac only requirement again, [Xcode](https://developer.apple.com/xcode/), this can be installed from the app store. Make sure the version installed is higher than 14.2 verify this with: \n```\nxcodebuild -version\n\nXcode 14.2\nBuild version 14C18\n```\nSomething to note, it's possible to run multiple versions of Xcode on the same machine. This is required because to build a Tari Base node you need Xcode 14.0, see [here](https://hacknicity.medium.com/working-with-multiple-versions-of-xcode-e331c01aa6bc)\n\n## The development environment\nNow, let's start with the Ledger specific dependencies now that we have a general dev machine setup.\n\nFor loading a BOLOS application to a Ledger device, Ledger has written a command, called [Cargo Ledger](https://github.com/LedgerHQ/cargo-ledger). This we need to install with:\n```\ncargo install --git https://github.com/LedgerHQ/cargo-ledger\n```\n\nNext up we need to install the supporting Python libraries from Ledger to control Ledger devices, [LedgerCTL](https://github.com/LedgerHQ/ledgerctl). This we do with:\n```\npip3 install --upgrade protobuf setuptools ecdsa\npip3 install ledgerwallet\n```\n\nLastly install the ARM GCC toolchain: `arm-none-eabi-gcc` for your OS. We are using MacOS, so we can use brew with:\n```\nbrew install armmbed/formulae/arm-none-eabi-gcc\n```\n\nThat's it for the development environment\n\n## The BOLOS application\nThe BOLOS application runs on the Ledger device itself and thus needs to be super simple. And to give you an idea of how low performant they are, they only have 64kB of RAM, use 32-bit only, and have about 1.5MB of storage with the NanoS+. Compare this to modern smartphones with an excess of 6GB of RAM and 128GB of storage. \n\n![640k meme](/assets/updates/img/640k.png)\n\nThis means we need to target a small footprint application targeting the llvm-target: `thumbv8m.main-none-eabi` with no `std` support. Compiling Rust without `std` limits our choices of both internal and external libraries we can use, but it at least means we can run our Rust application on the Ledger. \n\nHappily, Ledger does provide a [Rust SDK](https://github.com/LedgerHQ/ledger-nanos-sdk/) that provides access to the secure chip running inside of BOLOS as well as communication out to some external applications. \n\nFor our demo BOLOS application, we will provide two commands: `get-version` and `sign-data`.\n\nWe want `get-version` to return information about the BOLOS application. `sign-data` will sign a challenge with a randomly created private key, returning the public key, nonce, and a Schnorr signature, all using the Ristretto curve. \n\nLet's go over the Rust code to sign the challenge and return the results:\n```rust\nmatch comm.next_event() {\n    io::Event::Command(Instruction::Sign) => {\n        // first bytes are instruction details\n        let offset = 5;\n        let challenge = ArrayString::<32>::from_bytes(comm.get(offset, offset + 32));\n\n        let k = RistrettoSecretKey::random();\n        let r = RistrettoSecretKey::random();\n        let signature = SchnorrSignature::sign_raw(&k, r, challenge.bytes()).unwrap();\n        let public_key = RistrettoPublicKey::from_secret_key(&k);\n        let sig = signature.get_signature().as_bytes();\n        let nonce = signature.get_public_nonce().as_bytes();\n\n        comm.append(&[1]); // version\n        comm.append(public_key.as_bytes());\n        comm.append(sig);\n        comm.append(nonce);\n        comm.reply_ok();\n    },\n    \n```\n\nBOLOS applications communicate using [APDU](https://developers.ledger.com/docs/speculos/user/clients/). This means the first 5 bytes are information such as the instruction, arguments, etc. Because we know our challenge will be 32 bytes we can ignore byte 4 which will be the length of the byte and just straight up read our challenge from the buffer. \nWe then construct our signature using stripped-down code from [Tari crypto](https://github.com/tari-project/tari-crypto).\nWe can then fill in the buffer with `comm.append` to send the results back to the desktop application. Following the APDU standard we should send over the byte length of each field before its field, but because each field will be exactly 32 bytes we can ignore it.\n\nBefore compiling the code, we need to copy over the target information depending on which device we want to target. These target files are located with the [Rust SDK](https://github.com/LedgerHQ/ledger-nanos-sdk/) as [NanoS](https://github.com/LedgerHQ/ledger-nanos-sdk/blob/master/nanos.json), [NanoX](https://github.com/LedgerHQ/ledger-nanos-sdk/blob/master/nanox.json),[NanoS+](https://github.com/LedgerHQ/ledger-nanos-sdk/blob/master/nanosplus.json). \nWe want to target the NanoS+ for now, so we copy that file over to our root directory of the project. \n\nTo compile our project we use the command:\n```\ncargo +nightly build -Zbuild-std --release --target=nanosplus.json\n```\nOut of interest for anyone following so far, this builds a 216kB application. \n\nAnd finally to load it onto our ledger we use:\n```\ncargo +nightly ledger --load nanosplus\n```\nFollowing the prompts on the NanoS+ to install it.\n\n## The Desktop application\nLuckily here we have the power to use Rust `std` so we don't have the same limitations as the BOLOS counterpart. Also Zondax the developers of Polkadot have published some very nice helper libraries to help us develop our application: [ledger-rs](https://github.com/Zondax/ledger-rs).\n\nLet's highlight certain parts of the code. \n\nThe first important step is to get a connection to the ledger:\n```rust\nlet ledger = TransportNativeHID::new(hidapi()).expect(\"Could not get a device\");\n```\nThe next important step is to construct the ADPU command:\n```rust\nlet command = APDUCommand {\n        cla: 0x80,\n        ins: 0x02,\n        p1: 0x00,\n        p2: 0x00,\n        data: challenge.as_bytes().clone(),\n    };\n```\nIt is important to note that the eventual command will insert as byte 5, the length of the data field before the data. But here with `0x02` we specify for the ledger we want to call the `sign` command as above, and we include the challenge it must use.\n\nThen we send it to the ledger with:\n```rust\nlet result = ledger.exchange(&command2).unwrap();\n```\n\nWe then read and verify our results by getting the data back from the ADPU:\n```rust\n    let public_key = &result.data()[1..33];\n    let public_key = RistrettoPublicKey::from_bytes(public_key).unwrap();\n\n    let sig = &result.data()[33..65];\n    let sig = RistrettoSecretKey::from_bytes(sig).unwrap();\n\n    let nonce = &result.data()[65..97];\n    let nonce = RistrettoPublicKey::from_bytes(nonce).unwrap();\n\n    let signature = RistrettoSchnorr::new(nonce, sig);\n    let result = signature.verify(&public_key, &challenge);\n    println!(\"sign: {}\", result);\n```\n\n## Running them both\nBecause we don't open up the ledger application with the desktop one, we need to open up the ledger application on the device first. After which we can run our desktop application. The application will generate a random challenge, which will then be sent to the ledger for signing. \nThe end result looks as follows:\n```\n cargo run\n   Compiling legder_integration v0.1.0 \n    Finished dev [unoptimized + debuginfo] target(s) in 3.41s\n     Running `target/debug/legder_integration`\nname: tari\npackage version: 0.0.1\nsign: true\n```\nThis means we have a valid signature from the ledger for our random challenge. \n\n## Conclusion\nHere we can see a very simple working example written in Rust and on a non-Linux machine. The complete code is available here: [github](https://github.com/tari-project/ledger)",
        "title": "Ledger with Rust",
        "date": "2023-02-22T00:00:00.000Z",
        "excerpt": "The Tari development community recently started talking about what it would take to add hardware wallet support for Tari. There are a few challenges here:  Tari uses a different elliptic curve...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-02-17-update-100",
        "content": "\n## Tari Protocol 0.45.0 Released: Approaching mainnet one minor release at a time\n\nIt's that time again! The Tari protocol team is excited to announce the release of version 0.45.0, bringing a number of new features and improvements to the network. This release also marks an important milestone in our development with big news - wait for it - we've launched the Tari StageNet! Yes, you heard it right. We know, you're excited about the Mainnet, but trust me, this is almost as good.\n\n### What's so special about StageNet?\nAfter several iterations of testnets with cool names like our currently running Esme, Igor, and our previously retired Dibbler, Weatherwax, Ridcully, and Stibbons (RIP ✌️), we're approaching a time that requires a stable testnet that mirrors our future Mainnet as closely as possible. And that's what StageNet is all about. It's a long-lived, stable testnet that won't reset often, because we know how annoying that can be. You can experiment with the network and test new features risk-free just as they should run on Mainnet.\n\nWe won't be getting rid of our named testnets though. They still play an integral part in the development of the Tari network, and are where we can play a little more fast and loose with features. We'll do our best not to, but these networks may see breakage sometimes. Or a new one may crop up to test a specific subset of features. For example, right now our two running named testnets exist for different reasons. \n\nOur `Esme` network has been our stable-er testnet prior to `StageNet`. It sees new features and enhancements as they come out, and supports our mobile wallets [Tari Aurora](https://aurora.tari.com/) on [iOS](https://apps.apple.com/us/app/tari-aurora/id1503654828) and [Android](https://play.google.com/store/apps/details?id=com.tari.android.wallet). \n\nOur `Igor` testnet is used in the development of the [DAN Layer](https://www.tari.com/updates/2023-02-01-update-99.html) and sees frequent resets to help support the rapid pace of the development team.\n\nI know what you're thinking. Without Mainnet, what's the difference between this new stable StageNet and the previous ones? And here's the answer: It's all in how we're shepherding it. We're transitioning to an 8-week release cycle schedule. Yes, you heard it right. We may not have a Mainnet yet, but we're gonna start developing like we do. StageNet will get new updates every 8 weeks, just like the Mainnet will soon™️. This is a big change for our protocol team's workflow, and we're excited to iron out the kinks early to ensure a smoother Mainnet transition.\n\n### How this will look in the immediate future:\n\nCurrently, the Protocol team is a highly functioning group, throwing out new features and fixes whenever inspiration strikes. When work gets completed it gets merged into the `development` branch on our [Github repo](https://github.com/tari-project/tari/blob/development/changelog.md).\n\nThen, every so often we decide \"hey we've done some really great work here, we should share it with people\". And somebody will tag a release. This approach has gotten us to where we are but is a little unpredictable. So we're introducing a little more structure to our process.\n\nGoing forward, we'll be taking a more meticulous approach to code selection and testing. We'll be running features through the gauntlet of our named testnets to ensure they're truly ready for prime time. No half-baked ideas muddling their way in, only once a feature has passed the rigorous testing will it earn its place in the coveted StageNet branch. These features will be pruned and picked from our `development` branch into the `stagenet` branch. Only then will a tag be created from this branch, and released for your ultimate enjoyment.\n\nIn practice this will be done with the addition of codified feature gates. These feature gates will allow us to perform conditional compilation when releasing new versions of our applications. When we release a new version for StageNet it will only contain hardened features we know are ready for prime time. While we can continue to release to our other testnets with additional features we're still trying out.\n\nAnd with the introduction of a regular release cadence, you'll always know exactly when to expect the latest and greatest from us. No more sitting around wondering \"when's the next release?\" We've got you covered every 8 weeks.\n\nSure, this means a bit more process and management for us, and one of the consequences of the feature gating process is the production of multiple binaries for different stages of development, and different networks. But we think it's worth it to ensure a smoother and more stable experience for everyone on the network.\n\nIn the meantime, if you're interested in reading more about how code will move through our testnets or our 8-week release cycles, you can check out our [contributing guidelines](https://github.com/tari-project/tari/blob/development/Contributing.md#the-tari-release-proces). And if you're still waiting for the Mainnet, don't worry, we're just us eager as you are.\n\nAnd finally, here are the features and fixes we've made in version 0.45.0 to help stabilize the network. We've been working hard, we promise.\n\n### ⚠ BREAKING CHANGES\n\n* refactor database encryption (#5154)\n* update `Argon2` parameters (#5140)\n\n### Features\n\n* add `node {word} is in state {word}` ([33360cd](https://github.com/tari-project/tari/commit/33360cd1e9c8ad1dec1bd8193ca6cae1b79c81f4))\n* add get tari address to wallet ([1b0ed0b](https://github.com/tari-project/tari/commit/1b0ed0b99f8f36d7f04215b0ef846fdb13c095e7))\n* add graceful shutdown of base node ([c9797c5](https://github.com/tari-project/tari/commit/c9797c51e996fc043a6e4fd94ae1baebcd39d115))\n* add kill signal to cucumber nodes ([4cb21dc](https://github.com/tari-project/tari/commit/4cb21dc9148a32fbefae0017e984c634388f1543))\n* add shutdown clone ([ac956c9](https://github.com/tari-project/tari/commit/ac956c90d9ac3f78d7437ee24360c80204870341))\n* consolidate stealth payment code ([#5171](https://github.com/tari-project/tari/issues/5171)) ([b7747a2](https://github.com/tari-project/tari/commit/b7747a29c7032278b3ed88e13823d6e4fe7de45e))\n* fix miner ([7283eb2](https://github.com/tari-project/tari/commit/7283eb2c61e9e13313e256a1cc5ab191bb4f4b58))\n* gracefully shutdown grpc server ([947faf6](https://github.com/tari-project/tari/commit/947faf6559e6c16acdfe342c11c8c1ee99752d36))\n* refactor database encryption ([#5154](https://github.com/tari-project/tari/issues/5154)) ([41413fc](https://github.com/tari-project/tari/commit/41413fca3c66bf567777373d2b102c9d7ac0ea57))\n* refactor key-related field operations to be atomic ([#5178](https://github.com/tari-project/tari/issues/5178)) ([1ad79c9](https://github.com/tari-project/tari/commit/1ad79c946b3c67a3724f87d15ce55f29966d1e8b))\n* remove unused dependencies ([#5144](https://github.com/tari-project/tari/issues/5144)) ([a9d0f37](https://github.com/tari-project/tari/commit/a9d0f3711108ddb27599dc3e91834bb6cd02f821))\n* stagenet network ([#5173](https://github.com/tari-project/tari/issues/5173)) ([d2717a1](https://github.com/tari-project/tari/commit/d2717a1147e714f3978aaffb1e5af46986974335))\n* update `Argon2` parameters ([#5140](https://github.com/tari-project/tari/issues/5140)) ([4c4a056](https://github.com/tari-project/tari/commit/4c4a056f1f6623f6566b691a96c850ff905c0587))\n* wallet FFI cucumber ([795e717](https://github.com/tari-project/tari/commit/795e7178020b41bbda0510563e0ac0c2448eb359))\n* wallet password change ([#5175](https://github.com/tari-project/tari/issues/5175)) ([7f13fa5](https://github.com/tari-project/tari/commit/7f13fa5e64144c11b67201ab38bb55bdbb494680))\n\n\n### Bug Fixes\n\n* couple fixes for cucumber ([ad92e11](https://github.com/tari-project/tari/commit/ad92e1172682e602664ff512f9ce1495a566e473))\n* **dht/test:** ban peers who send empty encrypted messages  ([#5130](https://github.com/tari-project/tari/issues/5130)) ([86a9eaf](https://github.com/tari-project/tari/commit/86a9eaf700323a2794d2b71797ebf811ba3679b5))\n* do not propagate unsigned encrypted messages ([#5129](https://github.com/tari-project/tari/issues/5129)) ([d4fe7de](https://github.com/tari-project/tari/commit/d4fe7de1088aa986bf00d6ff4c31dd92659b4d95))\n* feature flag separation for validation ([#5137](https://github.com/tari-project/tari/issues/5137)) ([0e83463](https://github.com/tari-project/tari/commit/0e83463718001ef14564068f2087fb6dc50b0fa3))\n* panic on overflow in release mode ([#5150](https://github.com/tari-project/tari/issues/5150)) ([5f5808b](https://github.com/tari-project/tari/commit/5f5808b309cbf2416541652c7e2a4a923ef46e35))\n* potential ban ([#5146](https://github.com/tari-project/tari/issues/5146)) ([9892da6](https://github.com/tari-project/tari/commit/9892da6345468b798b0b669f010322f343fd9f4f))\n* **test:** broken address test ([#5134](https://github.com/tari-project/tari/issues/5134)) ([6b125af](https://github.com/tari-project/tari/commit/6b125af57570d48d5864158693f3ab935d23f6a9))\n* **wallet-grpc:** return correct available balance and add timelocked_balance ([#5181](https://github.com/tari-project/tari/issues/5181)) ([e001125](https://github.com/tari-project/tari/commit/e0011254ddbf4556a8b0ac2576869615c6549ccc))\n",
        "title": "Tari Base Node v0.45.0 Released on StageNet",
        "date": "2023-02-17T00:00:00.000Z",
        "excerpt": "Tari Protocol 0.45.0 Released: Approaching mainnet one minor release at a time It's that time again! The Tari protocol team is excited to announce the release of version 0.45.0, bringing a number of...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-02-01-update-99",
        "content": "\nThe Tari DAN layer has had some interesting PRs this week. If you're following along on the \n[DAN Github](https://github.com/tari-project/tari-dan), you'll see a few PRs related to NFTs.\nSo this begs the question, exactly what can I do on the DAN?\n\n## Can I .... ?\n\nActually, let's look at this from two different perspectives, because there is some work under the hood of the smart contracts. \n\n### .... as a Validator Node ...\nFirstly, from a user running a validator node, here's some things you can do:\n#### 1. Register a validator node to run Tari templates?\nThe first step in running a validator node, is registering a validator node. This may not be the final form of validator node registration, but your validator node will start up and keep itself registered on the base layer. If it stops running, your node will eventually be removed from the \nvalidator set. Every epoch (set at 10 base layer blocks at the moment), the validator node set changes according to who has registered and who has fallen away.\n\n#### 2. Sync the latest state?\nBefore you can vote as an honest node, your validator needs to ge the latest state from its peers.\nThis is working currently, but there is an open problem of verifying that nodes have the latest state before they begin voting. \n\n#### 3. Participate in Cerberus consensus?\nYes, sharded Cerberus is working in a basic form, but there are many caveats. \n1. Only the happiest of paths is working. If any leaders fail or are malicious, the transaction will fail. There is work being done on this by [@Cifko](https://github.com/Cifko) and [@jorgeantonio21](https://github.com/jorgeantonio21). Specifically they are looking and utilizing \nexisting Hotstuff and Cerberus recovery mechanisms.\n2. It's not very efficient. The execution of WASM code can be greatly improved\n3. It's currently not possible to get the result of transactions unless you contact the correct validator node\n4. There's no API for querying state\n5. There's very little in the way of indexing state\n\n#### 4. Earn fees?\nNo, unfortunately at the moment, there's no way of earning fees, and in fact there are no fees at \nall in the code.\n\n#### Next up for Validator Nodes:\n1. Ensure the validator node has the correct state before it votes. Currently, there's no requirement for a validator node to have the correct state unless that state is related to transactions. The development community looking at ways to address this,\n2. Implement fees\n3. Address Cerberus missing functionality\n\n### ... as a Smart Contract developer....\n#### 1. Write and test my own contracts?\n\nYes. Well, technically yes. Because the template code is only required to be WASM, you can do anything that Rust (or any other language that compiles to WASM) can do. Can you do something useful? Here's a list of examples in the code base:\n\n1. [Fungible or ERC20-like template](https://github.com/tari-project/tari-dan/blob/development/applications/tari_validator_node/tests/features/fungible.feature)\n2. [Basic NFT](https://github.com/tari-project/tari-dan/tree/development/dan_layer/engine/tests/templates/nft/basic_nft)\n3. [Airdropped (or whitelisted) NFT](https://github.com/tari-project/tari-dan/tree/development/dan_layer/engine/tests/templates/nft/airdrop)\n\n#### 2. Start using Tari contracts?\nThe API is still subject to change wildly. It would probably not be wise to start anything serious on Tari at this point, but if you make something cool, let us know about it.\n\n#### 3. Prove ownership?\nThe ownership and authentication API is not currently developed. This is next up in priority for development\n\n#### 4. Compose multiple contracts together?\nNot yet, sorry.\n\n#### 5. Deploy my templates to a network?\nWhile there isn't a testnet running at the moment, you can deploy templates to a local test network. If you'd like to know more, view this [readme](https://github.com/tari-project/tari-dan#readme) or hit up the development team on discord or telegram.\n\n\n#### Next up for Contract developers\n1. Ownership, authentication\n2. Composability\n3. Create a testnet\n",
        "title": "Tari DAN Progress",
        "date": "2023-02-01T00:00:00.000Z",
        "excerpt": "The Tari DAN layer has had some interesting PRs this week. If you're following along on the  DAN Github, you'll see a few PRs related to NFTs. So this begs the question, exactly what can I do on the...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2023-01-20-update-98",
        "content": "\nThe Tari [Requests for Comment](https://rfc.tari.com) site plays a few critical roles in the Tari community:\n\n* It serves as a reference for the design and philosophy of the Tari protocol.\n* It is the venue for proposing new ideas and major changes to the protocol.\n* It provides a written record of how the project has developed over time.\n\nThe first of these roles is the most difficult to maintain consistently. The core contributors, by and large, enjoy \nwriting code more than they relish maintaining swathes of documentation.\n\nIt's not unexpected then, that a given feature of the Tari system and its associated RFC may diverge over time. A \nmaintainer will typically slap an `out-of-date` label on the RFC when this happens so that readers aren't mislead by \noutdated information.\n\nOver the course of time, almost all of our RFCs were marked `out-of-date`. Late last year, we, as the core \ncontributor community set out to rectify that situation.\n\n![Well, good news](/assets/img/posts/good_news.png)\n\nAs of today, I'm very happy to announce that all RFCs related to the Tari Base Node have achieved `stable` status!\n\nThis was a massive collective effort that stretched over about eight weeks. \nSome 35 RFCs were reviewed, updated, and in some cases completely rewritten so \nthat they reflect what is happening under the hood. \n\nIt was a bit like cleaning out the attic. There were a few RFCs, covered in dust underneath some old scuba gear that \nmade us say, \n\n\"Oh, remember this old thing? Wow, I can't believe we thought that was cool once\". \n\nThose RFCs are captured \nfor posterity in the [Deprecated RFCs](https://rfc.tari.com/deprecated.html) chapter of the site. Again, like \ncleaning out the attic, you never end up throwing anything away.\n\nOf course, the 2nd law of thermodynamics never sleeps, entropy always wins, and these RFCs will eventually become \nout of date again. Fortunately, the base node code is fairly stable and well tested, and so the slide to disorder is \nnot as steep as it used to be. As always, the code remains the source of truth.\n\n## Tari release v0.43.4\n\nIt was quiet over the festive season, but that didn't stop the release train. v0.43.4 was released on 12 January \n and a minor bug-fix release landed on the 18th.\n\n### [0.43.4](https://github.com/tari-project/tari/compare/v0.43.3...v0.43.4) (2023-01-18)\n\n### Bug Fixes\n\n* automatically set base node fetures on startup, sign only if necessary ([#5108](https://github.com/tari-project/tari/issues/5108)) ([9aa9436](https://github.com/tari-project/tari/commit/9aa9436e945f6db59b34ad9c29a973fdc6515eda))\n* vanity_id example should create id with base node features ([#5107](https://github.com/tari-project/tari/issues/5107)) ([3b21199](https://github.com/tari-project/tari/commit/3b21199dcf4639a7ca5cff727bcb49927b624842))\n\n### [0.43.3](https://github.com/tari-project/tari/compare/v0.43.2...v0.43.3) (2023-01-12)\n\n### Features\n\n* add new igor seeds ([#5106](https://github.com/tari-project/tari/issues/5106)) ([61d1b5e](https://github.com/tari-project/tari/commit/61d1b5e80039c4908b6c0207939c22af2fa3e939))\n* add to/from json string for unblinded utxo in wallet ffi ([#5098](https://github.com/tari-project/tari/issues/5098)) ([af25b63](https://github.com/tari-project/tari/commit/af25b63d2909af3cdb025532784bdba118d9f876))\n\n\n### Bug Fixes\n\n* add const to FixedHash::zero ([#5084](https://github.com/tari-project/tari/issues/5084)) ([2d1bc82](https://github.com/tari-project/tari/commit/2d1bc823274e351b2b413a640bc71aa4d5d6c798))\n* console wallet spacing and naming ([#5025](https://github.com/tari-project/tari/issues/5025)) ([e4a6303](https://github.com/tari-project/tari/commit/e4a63033febd01e5b0d4c6dfc9a0b387bb58a5b1))\n* functional wallet encryption (issue [#5007](https://github.com/tari-project/tari/issues/5007)) ([#5043](https://github.com/tari-project/tari/issues/5043)) ([7b2311e](https://github.com/tari-project/tari/commit/7b2311e40e2619109dcb4572d9d86d3f4463324e))\n* header sync start info ([#5086](https://github.com/tari-project/tari/issues/5086)) ([df53843](https://github.com/tari-project/tari/commit/df53843d4e129fbc1e551f0f1d3560bbc28aed86))\n* header sync stuck trying to sync from base node  ([#5080](https://github.com/tari-project/tari/issues/5080)) ([0961f49](https://github.com/tari-project/tari/commit/0961f497ebd9e8478313b88738a2c5bde4608eb3))\n* improved encryption key handling ([#5027](https://github.com/tari-project/tari/issues/5027)) ([b2bed79](https://github.com/tari-project/tari/commit/b2bed79a744592b99c0f01a957750f12f787072e))\n* update message and signature key types  ([#5064](https://github.com/tari-project/tari/issues/5064)) ([a94189d](https://github.com/tari-project/tari/commit/a94189d3f5500ddc3222aada0bc30c014f2b7e7a))\n* use range proof batch splitting  ([#5081](https://github.com/tari-project/tari/issues/5081)) ([70c522b](https://github.com/tari-project/tari/commit/70c522b400d9406855a0b65d78c09e916ccfa274))\n* wallet errors ([#5045](https://github.com/tari-project/tari/issues/5045)) ([9b16ffb](https://github.com/tari-project/tari/commit/9b16ffb9925d07f3adeab1f1fd6f4163e493a3c7))\n",
        "title": "RFC documentation is up to date*",
        "date": "2023-01-20T00:00:00.000Z",
        "excerpt": "The Tari Requests for Comment site plays a few critical roles in the Tari community:  It serves as a reference for the design and philosophy of the Tari protocol.  It is the venue for proposing new...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-12-02-update-97",
        "content": "\nThis week Tari Base Node v0.42.0 was released. Although the major version has been updated, it is only a breaking change for the `igor` testnet. In this version, validator node registration was updated with the recent changes to [RFC-313](https://rfc.tari.com/RFC-0313_VNRegistration.html). Since validator nodes registration is disabled on `Esmeralda`, no reset or hard fork is needed. \nUnless you're part of the core dev team working on the RFC-313 implementation, you are running on `Esmeralda`.\nThe majority of changes in this release relate to hardening and tidying up the code. Extra safeguards have been put in place to prevent sensitive data, like secret keys, from _ever_ being accidentally written to logs. We've also gone and made extra sure that the memory that holds secrets gets wiped once the key isn't needed anymore.\n\nHere is the full list of changes in v0.42.0:\n### ⚠ BREAKING CHANGES\n\n* **core:** sort validator set by shard key (#4952)\n* implement validator node registration as per RFC-0313 (#4928)\n\n### Features\n\n* change log level ffi comms ([#4973](https://github.com/tari-project/tari/issues/4973)) ([554e783](https://github.com/tari-project/tari/commit/554e783100c16e3b740b22e0b2a75c8760a51a06))\n* implement validator node registration as per RFC-0313 ([#4928](https://github.com/tari-project/tari/issues/4928)) ([8569f7c](https://github.com/tari-project/tari/commit/8569f7c7108bc700d016239a5272e09ed3d0f593)), closes [#4927](https://github.com/tari-project/tari/issues/4927)\n* log app version on startup ([#4970](https://github.com/tari-project/tari/issues/4970)) ([2962028](https://github.com/tari-project/tari/commit/29620287f4ccea6f5ca7ca0b2b71e14ba21b4a4d))\n* relax zeroize  ([#4961](https://github.com/tari-project/tari/issues/4961)) ([a6e8991](https://github.com/tari-project/tari/commit/a6e899159db5138ec03b97367d5f8873530b5a22))\n* relax zeroize dependencies ([#4971](https://github.com/tari-project/tari/issues/4971)) ([10a19d5](https://github.com/tari-project/tari/commit/10a19d5e790ea7041c8c89e47aa144d3bb14c91a))\n* remove extra validation ([#4981](https://github.com/tari-project/tari/issues/4981)) ([3f1ebf6](https://github.com/tari-project/tari/commit/3f1ebf611b62d46148e7933fda7e497514012591))\n* reset broken sync ([#4955](https://github.com/tari-project/tari/issues/4955)) ([01e9e7e](https://github.com/tari-project/tari/commit/01e9e7ef10e5392a55a50b82dadb3e3e0c0da529))\n* trigger validation on import ([#4962](https://github.com/tari-project/tari/issues/4962)) ([163dce0](https://github.com/tari-project/tari/commit/163dce02ca7d8842f4198b2513f6bdcbb0e0c729))\n\n\n### Bug Fixes\n\n* **ci:** update libtari_wallet_ffi sha256sums ([#4968](https://github.com/tari-project/tari/issues/4968)) ([5de63d3](https://github.com/tari-project/tari/commit/5de63d35b923a0e78a4da3bdc56ad1b250b4fb47))\n* console wallet timestamp display ([#4942](https://github.com/tari-project/tari/issues/4942)) ([baa196f](https://github.com/tari-project/tari/commit/baa196fa5429e488a068ad5036d7ea19873fc3ca))\n* **core:** sort validate set by shard key ([#4952](https://github.com/tari-project/tari/issues/4952)) ([349d429](https://github.com/tari-project/tari/commit/349d4292c4fffd102ad83b3fcb49ff208b0d7536))\n* hide sensitive data on tari repo (see issue [#4846](https://github.com/tari-project/tari/issues/4846)) ([#4967](https://github.com/tari-project/tari/issues/4967)) ([bcc47e1](https://github.com/tari-project/tari/commit/bcc47e1370d0ca5b61604e2922f899f80b71a72f))\n* minimize potential memory leaks of sensitive data on the wallet code ([#4953](https://github.com/tari-project/tari/issues/4953)) ([e364994](https://github.com/tari-project/tari/commit/e364994d30cb5e71b9dd87b485197d023d3121e0))\n* node gets banned on reorg ([#4949](https://github.com/tari-project/tari/issues/4949)) ([5bcf6e5](https://github.com/tari-project/tari/commit/5bcf6e5453d451063a1776fa38b4f14aaf07ac88))\n* **wallet:** fix wallet_setting keys ([#4976](https://github.com/tari-project/tari/issues/4976)) ([f2cbe6f](https://github.com/tari-project/tari/commit/f2cbe6f75d6cebad441fbf92270213b49349ed1f))\n* **wallet:** invalid metadata sig when creating code template utxo ([#4975](https://github.com/tari-project/tari/issues/4975)) ([a8e2e00](https://github.com/tari-project/tari/commit/a8e2e00c09673b0a692f831e20fefd8652ce3572))\n* **wallet:** slightly improve error output for failed decryption ([#4972](https://github.com/tari-project/tari/issues/4972)) ([b2370b1](https://github.com/tari-project/tari/commit/b2370b18e86a2e8cc9acf61ed4db22c0148710fb))\n",
        "title": "Tari Base Node  v0.42.0 Released",
        "date": "2022-12-02T00:00:00.000Z",
        "excerpt": "This week Tari Base Node v0.42.0 was released. Although the major version has been updated, it is only a breaking change for the  testnet. In this version, validator node registration was updated...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-11-24-update-96",
        "content": "\nThis week, draft [RFC-0313 - ValidatorNodeRegistration](https://rfc.tari.com/RFC-0313_VNRegistration.html) was merged\nand implemented for the igor network. This RFC describes the procedure for permissionless validator node registration \nand is the first step to participating in the Tari L2 network.\n\nThis process is still under evaluation and some details may change as the development on the second layer continues.\n\nThe primary goals of validator node registration process are to:\n1. provide a consistent and verifiable view of the current validator node set across the L2 network,\n2. add some cost to joining the L2 network to mitigate against node spamming, and\n3. to periodically assign a new pseudorandom shard key to each validator.\n\nA validator node submits a signed registration UTXO to the base layer which is included in a block. \nThis registration activates at the next epoch after the registration height.\n\nEach validator monitors the base chain for new registrations. These registrations must have a large number of \nconfirmations before they are recognised to prevent inconsistencies that can occur from base chain reorgs. The base \nchain provides the validator node public key, the assigned shard key and a merkle root that commits to the current\nvalidator set for each epoch.\n\nEach validator node registration is valid for up to `VNRegistrationValidityPeriod` epochs and a validator may\nre-register before the registration expires to ensure continued participation in L2 consensus. \n\nA number of new base layer consensus constants are added, namely\n\n* `EpochLength` - defines the number of base chain blocks for an epoch\n* `VNRegistrationValidityPeriod` - the validity period of a validator node registration UTXO\n* `VNRegDepositAmount` - the minimum amount of base layer coins that must be locked up in the validator node registration UTXO\n* `VNRegLockHeight` - the number of epochs that funds in the validator node registration UTXO must be locked\n* `VNShardShuffleInterval` - the number of epochs before the validator node shard key will be pseudorandomly reassigned\n\nAdditionally, a new block header field `validator_node_mr` is added that commits the validator set for the current epoch.\n\nAt the time of writing, there are no igor seed nodes or a validator node network, so you might want to wait for these before trying this out.\n\nThat said, the current process is as follows:\n1. Run a local base node and wallet with GRPC enabled on the igor network.\n2. Ensure your wallet has some funds. \n3. Run a validator node from the [DAN repo](https://github.com/tari-project/tari-dan).\n4. Use the validator node CLI or web UI (more on that in another post) to register your validator node.\n    ```shell\n    $ cargo run --bin tari_validator_node_cli --  vn register\n    ✅ Validator node registration submitted (tx_id: 5416354101787587057)\n    ```\n5. Thereafter, the validator node will automatically re-register at the right time.\n6. Once the validator node registration has enough confirmations, your validator node is registered and ready to begin processing instructions as shown in [a previous post](./2022-11-10-update-94.md).\n\n\n\n",
        "title": "Validator Node Registration",
        "date": "2022-11-24T00:00:00.000Z",
        "excerpt": "This week, draft RFC-0313 - ValidatorNodeRegistration was merged and implemented for the igor network. This RFC describes the procedure for permissionless validator node registration  and is the...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-11-18-update-95",
        "content": "\nThis week, with the release of version 0.39.0, the Esmeralda testnet was reset to height 0. In fact, there's were 2 major version updates this week.\n\nIn v0.39.0, the SHA3 proof of work algorithm was updated from doing 2 rounds to 3 rounds of hashing. Also, two new output types, ValidatorNodeRegistration and CodeTemplateRegistration have been merged into development. In future, these will be used by the Tari Digital Assets Network, but are currently not allowed on Esmeralda.\n\nFrom v0.40.0 onwards, EmojiIds include the network as well as the checksum. This mechanism prevents sending to a different testnet and will be especially\nimportant for Mainnet. There's no visual difference between EmojiId addresses on different networks, but the wallets are able to confirm the network is the same before sending funds. For interactive payments, this wasn't previously a problem, since the two wallets are not be able to communicate across the networks, but one-sided payments would end up in funds being lost.\nThe changes to EmojiId prevent this from happening.\n\nThe development community is in the process of analyzing the code and preparing for Stagenet, so there may be a few more resets of Esmeralda coming up.\n\nBelow is a list of all the changes in v0.40.1, v0.40.0 and v0.39.0.\n\n### [0.40.1](https://github.com/tari-project/tari/compare/v0.40.0...v0.40.1) (2022-11-17)\n\n### Bug Fixes\n\n- set wallet start scan height to birthday and not 0 (see issue [#4807](https://github.com/tari-project/tari/issues/4807)) ([#4911](https://github.com/tari-project/tari/issues/4911)) ([797f91a](https://github.com/tari-project/tari/commit/797f91a91578e851b9eefe939294f919c7fec978))\n\n## [0.40.0](https://github.com/tari-project/tari/compare/v0.39.0...v0.40.0) (2022-11-16)\n\n### ⚠ BREAKING CHANGES\n\n- add tari address for wallet to use (#4881)\n\n### Features\n\n- add tari address for wallet to use ([#4881](https://github.com/tari-project/tari/issues/4881)) ([26aacc7](https://github.com/tari-project/tari/commit/26aacc7411866e920d5aa0fa62f5b8ae9e143946))\n\n### Bug Fixes\n\n- **comms:** spawn liveness check after address is final ([#4919](https://github.com/tari-project/tari/issues/4919)) ([f558a11](https://github.com/tari-project/tari/commit/f558a11222a322bac93b8a51b7240442f4a9e9c9))\n- remove fs2 dependency from tari_common ([#4921](https://github.com/tari-project/tari/issues/4921)) ([dca7b06](https://github.com/tari-project/tari/commit/dca7b0614c6c27a13417e6108207e9605557551e))\n- updates for SafePassword API change ([#4927](https://github.com/tari-project/tari/issues/4927)) ([92d73e4](https://github.com/tari-project/tari/commit/92d73e458319a0bd3d897ebc795e52f0597392b7))\n\n## [0.39.0](https://github.com/tari-project/tari/compare/v0.38.8...v0.39.0) (2022-11-14)\n\n### ⚠ BREAKING CHANGES\n\n- merges feature-dan into development (#4913)\n- **wallet:** use KDFs on ECDH shared secrets (#4847)\n- **core:** remove unused get_committees call from base node (#4880)\n- refactor `CipherSeed`, zeroize, and fix key derivation (#4860)\n- impl final tari pow algorithm (#4862)\n- **core:** adds utxo and block info to get_template_registrations request (#4789)\n\n### Features\n\n- add block height to input request to get network consensus constants ([#4856](https://github.com/tari-project/tari/issues/4856)) ([23b4313](https://github.com/tari-project/tari/commit/23b43131102fbca030f825c7c8df7ec9f698932f))\n- add grpc to get shard key for public key ([#4654](https://github.com/tari-project/tari/issues/4654)) ([0fd3256](https://github.com/tari-project/tari/commit/0fd32569c9bb321fc866681301bbb759888d83ae))\n- add missing fields to grpc consensus constants interface ([#4845](https://github.com/tari-project/tari/issues/4845)) ([ce6c22f](https://github.com/tari-project/tari/commit/ce6c22f9eb02a7932afc5b71fd73e34da03791ff))\n- add static lifetime to emission amounts calculation ([#4851](https://github.com/tari-project/tari/issues/4851)) ([5b0eb04](https://github.com/tari-project/tari/commit/5b0eb0459c7d29a25339c22a289153d27d57388e))\n- add validator node registration ([#4507](https://github.com/tari-project/tari/issues/4507)) ([96a30c1](https://github.com/tari-project/tari/commit/96a30c1662a88e10059da17d114148fe06bf9c43))\n- **base_node_grpc_client:** add getActiveValidatorNodes method ([#4719](https://github.com/tari-project/tari/issues/4719)) ([cfa05be](https://github.com/tari-project/tari/commit/cfa05beca87d3ac4687e1794c7d6b6aded5b0671))\n- **core:** add template registration sidechain features ([#4470](https://github.com/tari-project/tari/issues/4470)) ([8ee5a05](https://github.com/tari-project/tari/commit/8ee5a05da3bc1de49ac65a6674c60381f72af21f))\n- **core:** add validator registration sidechain feature ([#4690](https://github.com/tari-project/tari/issues/4690)) ([0fef174](https://github.com/tari-project/tari/commit/0fef17463faf67ea3a427d4f4a43b1e690acfab7))\n- **core:** store and fetch templates from lmdb ([#4726](https://github.com/tari-project/tari/issues/4726)) ([27f77b2](https://github.com/tari-project/tari/commit/27f77b27e67f748631664f7cc94e34065fe48b7c))\n- impl final tari pow algorithm ([#4862](https://github.com/tari-project/tari/issues/4862)) ([a580103](https://github.com/tari-project/tari/commit/a58010370afe984d969fd7e54ac7417302e93906)), closes [#4875](https://github.com/tari-project/tari/issues/4875)\n- mempool sync wait for node initial sync ([#4897](https://github.com/tari-project/tari/issues/4897)) ([5526721](https://github.com/tari-project/tari/commit/55267216983c110b8bc3b6d59f137f5191bdea92))\n- merges feature-dan into development ([#4913](https://github.com/tari-project/tari/issues/4913)) ([539e758](https://github.com/tari-project/tari/commit/539e758245e2a33bf67ac53a1b205202b5ac7dfc))\n- remove tracing_subscriber ([#4906](https://github.com/tari-project/tari/issues/4906)) ([956b279](https://github.com/tari-project/tari/commit/956b27954dda1f15f82bff0ba0ba0ee1f0880d2d))\n\n### Bug Fixes\n\n- **base-node:** use less harsh emoji for unreachable node ([#4855](https://github.com/tari-project/tari/issues/4855)) ([2d90e91](https://github.com/tari-project/tari/commit/2d90e91a198d62c887e721e4a60814f21b7bc686))\n- **ci:** correct ARM64 builds ([#4876](https://github.com/tari-project/tari/issues/4876)) ([7628692](https://github.com/tari-project/tari/commit/7628692a59e7abf9978fb928d96744ce05421d72))\n- **ci:** selectively revert resolver for arm64 builds ([#4871](https://github.com/tari-project/tari/issues/4871)) ([cd88484](https://github.com/tari-project/tari/commit/cd88484d8ef6ac864210ea8e2a5f31a02e86fd7b))\n- **ci:** update GHA set-output plus dependabot schedule for GHA ([#4857](https://github.com/tari-project/tari/issues/4857)) ([f978507](https://github.com/tari-project/tari/commit/f978507e795b571add178ec461da4b10864c374c))\n- **comms/peer_manager:** fix possible panic in offline calc ([#4877](https://github.com/tari-project/tari/issues/4877)) ([c0d1f58](https://github.com/tari-project/tari/commit/c0d1f585318e8200f155680227712aa22b373fcf))\n- computation of vn mmr ([#4772](https://github.com/tari-project/tari/issues/4772)) ([64002e9](https://github.com/tari-project/tari/commit/64002e9c442f7a3b69343d580254e4e93ad69dd4))\n- **core/metrics:** set target difficulty as single value ([#4902](https://github.com/tari-project/tari/issues/4902)) ([f625f73](https://github.com/tari-project/tari/commit/f625f7358ff5d4d0b51e77ad8b4e6cf2d0171e6b))\n- **core:** add txo version checks to async validator ([#4852](https://github.com/tari-project/tari/issues/4852)) ([2cf51b8](https://github.com/tari-project/tari/commit/2cf51b855a5600653b96b1c0317c54d38fa7c55b))\n- **core:** adds utxo and block info to get_template_registrations request ([#4789](https://github.com/tari-project/tari/issues/4789)) ([9e81c7b](https://github.com/tari-project/tari/commit/9e81c7b6257773ddca970982adb89a1e0d548e2b))\n- **core:** bring validator node MR inline with other merkle root code ([#4692](https://github.com/tari-project/tari/issues/4692)) ([613b655](https://github.com/tari-project/tari/commit/613b65571540814afee49cdbfee834e5995dc85b))\n- **core:** remove unused get_committees call from base node ([#4880](https://github.com/tari-project/tari/issues/4880)) ([392d541](https://github.com/tari-project/tari/commit/392d541285e0766ffaea872063a21f8968715b7c))\n- correct value for validator_node_timeout consensus constant in localnet ([#4879](https://github.com/tari-project/tari/issues/4879)) ([bd49bf2](https://github.com/tari-project/tari/commit/bd49bf2dff921d05dc7ed969464d4b8eea0cb2ec))\n- delete orphans if they exist ([#4868](https://github.com/tari-project/tari/issues/4868)) ([6ff1c02](https://github.com/tari-project/tari/commit/6ff1c02d3451d856a7c0c979109aaae99dc38ca1))\n- **dht:** use new DHKE shared secret type ([#4844](https://github.com/tari-project/tari/issues/4844)) ([234571d](https://github.com/tari-project/tari/commit/234571dc5241bd6122525b02706ca68aae300308))\n- fix get shard key ([#4744](https://github.com/tari-project/tari/issues/4744)) ([3a4dd50](https://github.com/tari-project/tari/commit/3a4dd5096559dc7eea2d5d5c90bc64083b766c1a))\n- fix validator node registration logic ([#4718](https://github.com/tari-project/tari/issues/4718)) ([72018f4](https://github.com/tari-project/tari/commit/72018f4834b8ee8fe1228c25a6be33189bdd2a3c))\n- force wallet sqlite to do checkpoint after db decryption ([#4905](https://github.com/tari-project/tari/issues/4905)) ([55d1334](https://github.com/tari-project/tari/commit/55d133494270fe92ab7cf48d58f18d2a2bdecd17))\n- recover mined coinbase ([#4896](https://github.com/tari-project/tari/issues/4896)) ([2028136](https://github.com/tari-project/tari/commit/20281361c58fe3d70acbb654a6cb7e66e3f34e19))\n- refactor `CipherSeed`, zeroize, and fix key derivation ([#4860](https://github.com/tari-project/tari/issues/4860)) ([b190c26](https://github.com/tari-project/tari/commit/b190c267222dd883c8f281e09056ee566c8f4684))\n- remove tari script serialization fix migration ([#4874](https://github.com/tari-project/tari/issues/4874)) ([44ed0c8](https://github.com/tari-project/tari/commit/44ed0c89e6f37ac08776d5e0e2d30778ac69c5cb))\n- remove unused config for validator node ([#4849](https://github.com/tari-project/tari/issues/4849)) ([df5d78e](https://github.com/tari-project/tari/commit/df5d78eff10227834313ca2a90ade0c73e8c08e3))\n- **wallet/grpc:** add transaction id and template_address to template_reg response ([#4788](https://github.com/tari-project/tari/issues/4788)) ([4060935](https://github.com/tari-project/tari/commit/4060935ded9c4192c58f5a8ee0b7443ff285f1b1))\n- **wallet:** use KDFs on ECDH shared secrets ([#4847](https://github.com/tari-project/tari/issues/4847)) ([3d1a51c](https://github.com/tari-project/tari/commit/3d1a51cb0907ce99a59f42a75abe706169e131d1))\n",
        "title": "This week in Tari",
        "date": "2022-11-18T00:00:00.000Z",
        "excerpt": "This week, with the release of version 0.39.0, the Esmeralda testnet was reset to height 0. In fact, there's were 2 major version updates this week. In v0.39.0, the SHA3 proof of work algorithm was...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-11-10-update-94",
        "content": "\nThe development effort this quarter is largely focussed on preparing the base layer code for an audit ahead of a \npossible mainnet release TBD. Work on the contract layer has not stopped though, and we're quite excited to share \nthe progress that has been made on that front.\n\nThings are still _very_ much in their infancy, so while these developments are pretty exciting, there's still a long \nroad for these prototypes to travel before being production ready.\n\nWith that caveat in place, we're going to walk though\n* Writing a dead-simple contract template in Rust.\n* Compiling the template to WASM and registering it on the Tari base layer.\n* Running a small network of 2 validator nodes that:\n  * process an instruction to instantiate a copy of the template into a contract.\n  * reach consensus on a valid instruction.\n  * queries the network for the updated state. \n\n\nIf you're up for a bit of elbow grease, you can run the following exercise yourself using the code in \n[DAN repo](https://github.com/tari-project/tari-dan).\n\n## The contract template\n\nAs the seasoned reader of this blog will know, it has always been Tari's goal to improve the \noverall safety of the ecosystem by allowing users to draw from a library of well-tested, reliable, \nperformance contract _templates_, rather than having to write their own contracts from scratch.\n\nThese templates are written in Rust and, today, look something like this:\n\n```rust\nuse tari_template_macros::template;\n\n#[template]\nmod counter {\n    pub struct Counter {\n        value: u32,  // Contract state\n    }\n\n    impl Counter {\n        // Method to create a new contract instance\n        pub fn new() -> Self {\n            Self { value: 0 }\n        }\n\n        // A read-only method\n        pub fn value(&self) -> u32 {\n            self.value\n        }\n\n        // A method that updates the contract state\n        pub fn increase(&mut self) {\n            self.value += 1;\n        }\n    }\n}\n```\n\nThis template doesn't do much. It simply keeps track of a single number, and allows one to increment it. Like we \nsaid, it's early days.\n\nThe good news is that it's very clear what this template does. There's almost no boilerplate here, which is \na key design principle of the DAN template development experience: keeping things nice and clean.\n\n## Compiling the template to WASM\n\nIsolated code like the snippet above is nowhere near sufficient to work effectively in a decentralised, \npermissionless smart-contract network. There is a huge amount of infrastructure and glue code that must be packed \naround the template code above to let it slot seamlessly into the DAN. \n\nSuffice to say, the innocuous little  \n`#template` annotation is doing a _huge_ amount of lifting behind the scenes. Not to mention the huge amount of work \nthat @sdbondi and @mrnaveira have put into making it look so sweet and innocent.\n\nWe must also tip our hats to the [Rust web-assembly working group](https://www.rust-lang.org/governance/wgs/wasm) \nfor their amazing work in making Rust and WASM work seamlessly together.\n\nIn future the process will be more streamlined and seamless, for now, it's a couple of manual steps (early days!):\n\nFirst we generate the WASM project and stuff all our boilerplate in the right spots using `cargo-generate`:\n\n```shell\n$ cargo generate https://github.com/tari-project/wasm-template.git counter\n\n Favorite `https://github.com/tari-project/wasm-template.git` not found in config, using it as a git repository: https://github.com/tari-project/wasm-template.git\n\n Project Name : CounterDemo\n\nRenaming project called `CounterDemo` to `counter-demo`...\n Destination: C:\\projects\\counter-demo ...\n Generating template ...\n[ 1/12]   Done: .cargo\\config\n[ 2/12]   Done: .cargo\n[ 3/12]   Done: .gitignore\n[ 4/12]   Done: Cargo.toml\n[ 5/12]   Done: package\\Cargo.toml\n[ 6/12]   Done: package\\src\\lib.rs\n[ 7/12]   Done: package\\src\n[ 8/12]   Done: package\n[ 9/12]   Done: tests\\Cargo.toml\n[10/12]   Done: tests\\tests\\test.rs\n[11/12]   Done: tests\\tests\n[12/12]   Done: tests\n Moving generated files into: `C:\\projects\\counter-demo`...\n Initializing a fresh Git repository\n Done! New project created C:\\projects\\counter-demo\n\n```\n\nIf you pry into the generated code, you'll find our contract template in `package\\src\\lib.rs`. Everything else is \nthe tooling, glue code and infrastructure needed to be able able to plug this contract into the DAN.\n\nYou can run the built-in unit tests to make sure everything is working fine up until this point.\n\n```shell\n$ cargo test\n\n.....\n    Finished test [unoptimized + debuginfo] target(s) in 16.38s\n     Running tests\\test.rs (target\\debug\\deps\\test-10fba866873c5eef.exe)\n\nrunning 1 test\ntest test::test_increment ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 5.56s\n```\n\nNow we can build the WASM binary.\n\n```shell\ncd package\ncargo build-wasm\n```\n\nWe cheated a bit here. The `build-wasm` command is an alias defined in `.cargo/config.toml`\". You can \n also specify  `cargo build --target=wasm32-unknown-unknown`\n\n```toml\n[alias]\nbuild-wasm = \"build --target=wasm32-unknown-unknown\"\n```\n\nAll of these details will be neatly packaged and abstracted away from developers in due time.\n\n## Deploying the contract\n\nNow we get to register the template on the blockchain. As per\n[RFC-0303](https://rfc.tari.com/RFC-0303_DanOverview.html#the-tari-base-layer), templates are registered on the \nbase layer so that all nodes have a global index of the templates that are available.\n\n```shell\n$ cargo run --bin tari_validator_node_cli -- -b . templates publish -p c:\\projects\\counter-demo\\package\n\nTemplate code path c:\\projects\\temp2\\counter-demo\\package\n⏳️ Compiling template...\n✅ Template compilation successful (WASM file size: 95435 bytes)\n\nChoose an user-friendly name for the template (max 32 characters):\n> counterdemo \n\nTemplate version: (Default: 0)\n> 0                           \n\nCompiled template WASM file location: c:\\projects\\counter-demo\\package\\target/wasm32-unknown-unknown/release/package.wasm\nPlease upload the file to a public web location and then paste the URL                                                         \nWASM public URL (max 255 characters):                                                                                          \n> http://localhost:8000/counter_demo.wasm                                                                                      \n\n✅ Template registration submitted\n\nThe template address will be 4addd7d36790130fa2ffcfc52551e5018e91dd87050ce59d2f93a6b212f6542c\n```\n\nWhat happened here was:\n* The template code was hashed along with some metadata, to obtain the unique, permanent id of the template.\n* The validator node connected with a Tari wallet to construct a template registration transaction.\n* Note that the code itself (95kB) is not stored on-chain; just the hash, so we need a method of \n  fetching the actual code when we need it. This is why we need to provide a URL. A URL to a local HTTP server was \n  given in this demo.\n  In general, it will be an IPFS URI or something similar until someone builds their own better version on Tari :). \n\nOnce the transaction is broadcast, it shows up like any other transaction in the Tari mempool:\n\n```text\n┌Tari Console Wallet────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Transactions │ Send │ Receive │ Contacts │ Network │ Events │ Log │ Notifications(24)                                             │\n└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘\n┌Balance────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\n│Available: 288018.943629 T (Time Locked: 16615.757352 T)         Pending Incoming: 22145.448812 T Pending Outgoing: 5529.713495 T  │\n└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘\n Up↑/Down↓ select Tx (C) cancel selected pending Txs (A) show/hide mining (R) rebroadcast Txs (Esc) exit list                     \n┌Completed (T)ransactions (69) ─────────────────────────────────────────────────────────────────────────────────────────────────────┐\n│   Source/Destination Public Key                                    Amount/Token      Local Date/Time     Status                   │\n│ 5eeee5ce53af80048b6e5d994aa52c639c79b8c503094d26dfe039fa20fe514a   0 µT              2022-11-10 15:35:24 Broadcast                │\n│ 5eeee5ce53af80048b6e5d994aa52c639c79b8c503094d26dfe039fa20fe514a   5538.576052 T     2022-11-10 15:13:27 Mined Unconfirmed        │\n│ 5eeee5ce53af80048b6e5d994aa52c639c79b8c503094d26dfe039fa20fe514a   5538.578485 T     2022-11-10 15:13:16 Mined Unconfirmed        │\n│ 5eeee5ce53af80048b6e5d994aa52c639c79b8c503094d26dfe039fa20fe514a   5538.580918 T     2022-11-10 15:13:09 Mined Unconfirmed        │\n│ 5eeee5ce53af80048b6e5d994aa52c639c79b8c503094d26dfe039fa20fe514a   5538.583351 T     2022-11-09 13:32:10 Mined Confirmed          │\n│ 5eeee5ce53af80048b6e5d994aa52c639c79b8c503094d26dfe039fa20fe514a   5538.585784 T     2022-11-09 13:31:34 Mined Confirmed          │\n└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘\n Base Node Status  -  Chain Tip: #111  Synced.  Latency 1659 ms                   Connected Base Node ID: e62a9cee9aa5532a399828151f \n─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n Network: igor             Version: 0.38.7           LeftArrow: Previous Tab  Tab/RightArrow: Next Tab              F10/Ctrl-Q: Quit \n ```\n\nFor now, the value is zero, meaning that it's free to register a template. This might change in future to prevent \nspam template registrations.\n\nAfter the transaction is mined, it gets recognised as a contract template:\n\n```shell\n# In the validator node logs:\n\n16:15 [tari::validator_node::base_layer_scanner] INFO  ⛓️ Scanning base layer block 112 of 112\n16:15 [tari::validator_node::base_layer_scanner] INFO  🌠 new template found with address 4addd7d36790130fa2ffcfc52551e5018e91dd87050ce59d2f93a6b212f6542c at height 112\n16:15 [tari::validator_node::template_manager] INFO  ⏳️️ Template 4addd7d36790130fa2ffcfc52551e5018e91dd87050ce59d2f93a6b212f6542c queued for download\n16:15 [reqwest::connect] DEBUG starting new connection: http://localhost:8000/\n16:16 [tari::validator_node::template_manager] INFO  ✅ Template 4addd7d36790130fa2ffcfc52551e5018e91dd87050ce59d2f93a6b212f6542c downloaded successfully\n16:16 [tari::validator_node::template_manager] INFO  ✅ Template 4addd7d36790130fa2ffcfc52551e5018e91dd87050ce59d2f93a6b212f6542c has status Active\n```\n\nThe blockchain is just a slow-ass database, so surely we can \"query\" for all the templates that have been mined so far? \n\n```shell\n$ cargo run --bin tari_validator_node_cli -- -b . templates list                                             \n\nTemplates:\nAddress                                             | Download Url                            | Mined Height | Status\n--------------------------------------------------- | ----------------------------------------| ------------ | ------\ndeb2a34c31891acac1e6...c48be6c4f138e1d1a3e6971da6b0 | ...                                     | 39           | Active\n201ee40f24559f43d0bc...73b2fcd4616436c4bd35d948323a | ...                                     | 61           | Active\n7ece3f243425916e47ad...df3b44e532c6e4e662123c3c8a83 | ...                                     | 73           | Active\n4addd7d36790130fa2ff...dd87050ce59d2f93a6b212f6542c | http://localhost:8000/counter_demo.wasm | 112          | Active\n\n4 row(s)\n```\n\n🤩\n\nThat's not all! Remember all the heavy lifting that the `#[template]` annotation did? Of course you don't, it all \nhappened behind the scenes. But let's feast on the fruits of its labour now by inspecting the template's Application \nBinary Interface (ABI), or in other words, all the functions that the template exposes, \nusing `templates get <template_address>`:\n\n```shell\n$ cargo run --bin tari_validator_node_cli -- -b . templates get 4addd7d36790130fa2ffcfc52551e5018e91dd87050ce59d2f93a6b212f6542c\n\nTemplate 4addd7d36790130fa2ffcfc52551e5018e91dd87050ce59d2f93a6b212f6542c | Mined at 112\n\nFunction          | Args | Returns\n----------------- | ---- | -------\nCounter::new      |      | U32\nCounter::value    | U32  | U32\nCounter::increase | U32  | Unit\n\n```\n\n🔥\n\n## Instantiating a contract\n\nNow to create an instance of the contract on the DAN. \n\nWe call `Counter::new` for that. This can be called many times. Each time, a new instance of `Counter` is created, each \nmanaging its own state. \n\nIf we look into the future a bit, you can see the benefit of the template-based approach here. A \nhypothetical NFT template could be used by anyone wanting to launch their own token series. This could even be set \nup in an environment where no coding is required; just fill in a few fields, link to your assets, connect to your \nwallet and click \"Deploy\".\n\nBut you know, early days.\n\nRight now we still have to type in this monstrosity:\n\n```shell\n\ntari_validator_node_cli.exe -b . transactions submit -w -n 1 call-function 4addd7d36790130fa2ffcfc52551e5018e91dd87050ce59d2f93a6\nb212f6542c new\n\n✅ Transaction f31c90a8ae1f79473ef84e3c8eaeb03e831e6d034b9b7fac33a86166c5e01243 submitted.\n⏳️ Waiting for transaction result...                                                     \n\n✅️ Transaction finalized\n\nEpoch: 11\nSigned by: 2 validator nodes\n\n========= Substates =========\n️🌲 UP substate 391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f (v0)\n       ▶ component (Counter): 391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f\n\n========= Pledges =========\nShard:391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f Pledge:DoesNotExist\n\n========= Return Values =========\nu32: 1694571833\n\n========= LOGS =========\n1668094546 DEBUG Dispatcher called with function new\n\nOVERALL DECISION: Accept\n```\n\n🥰\n\nA lot just happened there, so let's unpack it. \n\nFirstly, the instruction, \"Create a new counter\" is hashed and signed and passed to the Json-RPC API of a validator \nnode.\n\n(To avoid confusion, we refer to smart contract transactions and invocations handled by the DAN as _instructions_, \nwhile we call base layer transactions, _transactions_).\n\nThere are no inputs to this instruction, and we expect a single output, the `Counter` instance.\n\nThe consensus layer checks with the VM that this is the expected result, and gets the list of shard \naddresses for the output. In this case, it gets the single shard, `391d...591f`. \n\nThe Hotstuff consensus algorithm \nthen runs over the 2 nodes in the network (logs omitted for brevity) to determine whether they agree on this output.\n\nThey do. Specifically, at least two-thirds plus one do, and the instruction is `ACCEPTED`. \n\nThe other output is related to some technical aspects of the Cerberus consensus algorithm.\n\n## Invoking contract methods\n\nNow that we have a live contract on our 2-node DAN (also the name of my punk rock band!), we can _do_ things with \nit. \n\nLet's call the `value` method to get the current value of the counter. This requires a lot of typing and \ncopy-pasting but early days and all that.\n\n```shell\ntari_validator_node_cli.exe -b . transactions submit -w -n 0 call-method \\\n  4addd7d36790130fa2ffcfc52551e5018e91dd87050ce59d2f93a6b212f6542c \\ \n  391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f value\n\n\n✅ Transaction 53c55e04ee4e94e2bde425725188010755215c3b93a77ecf7c26d2da1520533b submitted.\n⏳️ Waiting for transaction result...\n\n✅️ Transaction finalized\n\nEpoch: 11\nPayload height: NodeHeight(2)\nSigned by: 2 validator nodes\n\n========= Substates =========\n========= Pledges =========\nShard:391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f Pledge:Up\n\n========= Return Values =========\nu32: 0\n\n========= LOGS =========\n1668095320 DEBUG Dispatcher called with function value\n\nOVERALL DECISION: Accept\n\n```\n\n😏\n\nInvoking the `value` method required knowing the template address (`4addd..542c`) and the instance address \n(`391d0..591f`).\n\nThe instance address is the shard address of the substate we created in the previous step. \n\nThe return value is what we're really interested in, and unsurprisingly, is currently 0.\n\nLet's change that.\n\n```shell\n\ntari_validator_node_cli.exe -b . transactions submit -w -n 0 call-method \\ \n4addd7d36790130fa2ffcfc52551e5018e91dd87050ce59d2f93a6b212f6542c \\ \n391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f increase\n\n✅ Transaction ccbe0aad71cb89c584f965c241ed172a3edfb775959df3a54667fff90feab2e1 submitted.\n⏳️ Waiting for transaction result...\n\n✅️ Transaction finalized\n\nEpoch: 11\nSigned by: 2 validator nodes\n\n========= Substates =========\n️🌲 UP substate 391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f (v1)\n       ▶ component (Counter): 391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f\n\n🗑️ DOWN substate 391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f\n\n========= Pledges =========\nShard:391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f Pledge:Up\n\n========= Return Values =========\n\n========= LOGS =========\n1668095603 DEBUG Dispatcher called with function increase\n\nOVERALL DECISION: Accept\n\n```\n\n😎\n\nAgain we got an accept result. In this case there was a Down substate and an Up substate. In the current proof of \nconcept, the substate is being updated in place. This is because we're still working on the content-addressing of our \ncontracts but expect this to change in future.\n\nFinally, let's call `Counter::value` to see if there was a change...\n\n```shell\n\ntari_validator_node_cli.exe -b . transactions submit -w -n 0 call-method 4addd7d36790130fa2ffcfc52551e5018e91dd87050ce59d2f93a6b2\n12f6542c 391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f value\n\n✅ Transaction 18161023956be0f62f5b81e18cb59ce3a7a760e75247f8f0f635fe817fd10e45 submitted.\n⏳️ Waiting for transaction result...\n\n✅️ Transaction finalized\n\nEpoch: 11\nSigned by: 2 validator nodes\n\n========= Substates =========\n========= Pledges =========\nShard:391d01650715440c3b652a6e12919f3e9558d8727c1fdca51743a8b2ea4f591f Pledge:Up\n\n========= Return Values =========\nu32: 1\n\n========= LOGS =========\n1668095804 DEBUG Dispatcher called with function value\n\nOVERALL DECISION: Accept\n\n```\n\nAnd it returned 1. 🥳\n\n## tl;dr\n\nIf all of this seemed like a lot of effort to show that 0 + 1 = 1, let's take a step back and highlight what we've \naccomplished:\n\n* Clean, ergonomic template writing with all the boilerplate neatly abstracted away.\n* Registration of a template on the Tari L1.\n* Compilation, packaging and execution of Tari templates inside the Tari WASM VM.\n* Running of a rudimentary Layer 2 network.\n* Instantiation of a contract on the Layer 2 network, with nodes reaching finality on its correctness.\n* Querying contract state, and reaching consensus on that state.\n* Updating contract state by submitting an instruction to the Layer 2.\n\nThat's quite a lot. But there's still an awful lot left to do.\n\n* Registering validator nodes on the base layer network.\n* Verifying that VNs are in the correct committees.\n* Robust leader selection.\n* Robust failure recovery. \n* [DAN economics](https://rfc.tari.com/RFC-0320_TurbineModel.html) and VN fees.\n* Permissions and \"access control\" in contracts.\n* Template composability.\n* Seamless integration of all these steps.\n* Epoch management and transitions.\n* Indexing nodes.\n\nThis doesn't even get into building great developer tooling, web tooling, the template \"standard library\"\nand of course, choosing better names for some of these things (there are only 2 hard problems in computer science,\nright?) 😅\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "title": "A First Look at Tari Contracts",
        "date": "2022-11-10T00:00:00.000Z",
        "excerpt": "The development effort this quarter is largely focussed on preparing the base layer code for an audit ahead of a  possible mainnet release TBD. Work on the contract layer has not stopped though, and...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-10-27-update-93",
        "content": "\n## Overview\n\nStress tests are a perfect tool to simulate main net conditions and accelerate any latent issues we may have.\nFor example, suppose a system runs well when having an average of `X` number of transactions per second when nicely \nproportioned; thus, the transaction input vs. transaction output count is in the same order of magnitude, and all \ntransactions are spread out evenly across all the blocks. Such a system may not handle stressful conditions all that \nwell. We have been performing three types of stress tests so far to stress all aspects of the base layer network:\n\n- Coin-splits (this relates to transactions with a single input but a vast number of outputs).\n- Spending dust (this relates to transactions with a vast number of inputs but only one or two outputs).\n- Transactions to peer wallets (this relates to transactions with a single input and only one or two outputs):\n  - interactive;\n  - one-sided;\n  - one-sided stealth.\n\nWhen performing a stress test, the aim is to fill up the mempools in all the base nodes with a vast transaction backlog \nof a specific or mixed transaction type. In general, only a couple of wallets linked to their exclusive base nodes are \nneeded - some to send transactions and others to receive transactions. When dealing with such a vast number of\ntransactions, we need to keep the mempool filled up for a long time, and it will also stress the participating wallets \nsimultaneously. Wallets and base nodes participating in generating the transactions are configured to use TCP \ncommunication amongst each other in a private network instead of doing everything via TOR, but all external \ncommunication still uses TOR. In most cases, a high-end desktop workstation or laptop can only accommodate three or \nfour wallet-base node pairs.\n\nWe have performed numerous stress tests in the past, with the\n[reports available here](https://github.com/tari-project/tari-data-analysis/tree/master/reports).\nSome of the more recent stress tests we performed are discussed below.\n\n## Coin splits\n\nWe have performed many coin-split stress tests; this is by far the easiest method to add hundreds of thousands of new\nUTXOs to the network. This also sets the stage for performing the other types of stress tests.\n\n## Mempool sync\n\nIn the past, we have noticed that mempool sync was not always that great when conducting stress tests, meaning that \nmempools will have different views of the unmined transactions in the network. This poses a big problem in that often \nbase nodes are connected to miner nodes, thus having the job of supplying miners with block templates filled with\ntransactions are not aware of thousands of unmined transactions.\n\nThe test configuration used was for two sender wallets sending 5,000 normal transactions to each of two receiver\nwallets, thus 20,000 transactions in total. In this test, we aimed to analyze the mempool sync behaviour so that a\npermanent solution could be implemented.\n\nThe first test shows the effect when any new base node starting up tries to sync from two peers. We can see that it \ntook 47 blocks to mine all transactions as the miner node was starved of transactions for a long time. Base nodes \nconnected to the sender and receiver wallets had a different view of the unmined transactions in the network.\n\n\n![img.png](../assets/img/mempool_view_initial_sync_2.png)\n\nThe second test shows the effect when any new base node starting up tries to sync from five peers. Note that by changing\nthe startup sync behaviour, all transactions were mined within 16 blocks, and all base node mempools had a similar view \nof the unmined transactions in the network.\n\n![img.png](../assets/img/mempool_view_initial_sync_5.png)\n\nAt the time of the stress test, we did not have an active mempool sync strategy implemented but rather relied on the \nconnection paths between all wallets and base nodes to get a broadcasted transaction to all mempools. _This has now \nbeen fixed, and mempool sync is not an issue anymore._\n\n## 48,000 normal interactive transactions, the biggest yet\n\nIn the past, we used six sender wallets on two computers to send 36,000 normal transactions collectively to ten\nreceiver wallets. In this test, we wanted to stress the wallet database itself. The test configuration was for\nthree senders' wallets on one computer, each sending 16,000 transactions to 4x receiver wallets on another computer,\neach receiving 12,000 transactions. The aim was to try and starve/lock up the wallet database (as it can easily handle\nsmaller batches) and stress the network overall.\n\nWe had eight base node-wallet pairs running - seven participating in the test and one acting as a miner with SHA3 and\nXMRig mining. Four base nodes crashed (later fixed with [#4784](https://github.com/tari-project/tari/pull/4784)) during the test, so those had to be\nrestarted once. All eight base nodes were configured to sync mempools from five peers and re-sync when\nthey fell five blocks behind; none of the base nodes lagged with chain sync for any type of extended period; they\nalways caught up again. (This test effectively closed [#3115](https://github.com/tari-project/tari/pull/3115)).\n\nAll in all, the wallets performed admirably. The following stats were collected from the completed transactions table\nfor each wallet, representing those wallet's view of the truth.\n\n| Wallet      | Total sent | Total expected | Rejected | Unaccounted for | Pending | Mined confirmed |         |\n| ----------- | ---------- | -------------- | -------- | --------------- | ------- | --------------- | ------- |\n| Sender 01   | 16000      | 0              | 10       | 0               | 0       | 15990           | 99,938% |\n| Sender 02   | 16000      | 0              | 0        | 4               | 0       | 15996           | 99,975% |\n| Sender 03   | 16000      | 0              | 0        | 5               | 0       | 15995           | 99,969% |\n| Receiver 01 | 0          | 12000          | 0        | 0               | 1       | 11999           | 99,992% |\n| Receiver 02 | 0          | 12000          | 1        | 1               | 0       | 11998           | 99,983% |\n| Receiver 03 | 0          | 12000          | 0        | 3               | 1       | 11996           | 99,967% |\n| Receiver 04 | 0          | 12000          | 0        | 1               | 1       | 11992           | 99,933% |\n| Totals      | 48000      | 48000          | 11       | 14              | 3       | 95966           | 99,965% |\n\n## Summary\n\nStress testing has been a valuable tool in the past and continues to be so, as proved by the recent improvements made\nto analyze and improve certain behaviours or to discover the occasional not expected bug that would have remained\nhidden during testnet. Thank you to everyone running a base node or base node and miner combination that makes stress\ntesting possible.\n",
        "title": "Stressing the network",
        "date": "2022-10-27T00:00:00.000Z",
        "excerpt": "Overview Stress tests are a perfect tool to simulate main net conditions and accelerate any latent issues we may have. For example, suppose a system runs well when having an average of  number of...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-10-19-update-92",
        "content": "\n[A few posts ago](/updates/2022-09-22-update-89.html), I spoke about our intention to pivot the DAN's consensus \nalgorithm from independent side-chains towards braided Hotstuff sharding (aka [Cerberus])].\n\nIn that post I hinted at how building a Cerberus L2 on top of our Mimblewimble L1 offers some advantages over the \nproof-of-stake implementation that [Cerberus' inventors are building](https://www.radixdlt.com/). \nIt's time to expand on some of those thoughts.\n\n## Proof-of-work first\n\nThere is a deep-seated conviction within the Tari development community that proof-of-work is \nthe best way we know of to secure decentralised permissionless money. Our scepticism of proof-of-stake \nrevolves around these key points:\n\n* Proof-of-stake uses [circular logic].\n* Proof-of-stake has powerful centralising forces, akin to American-style capitalism.\n* Proof-of-stake is ultimately [obfuscated proof-of-work](https://www.truthcoin.info/blog/pow-cheapest/).\n* Money is stored energy, and so any system that directly converts energy into money is necessarily [the most \n  efficient means of securing that money](https://y.at/🛢️➕⚡👉💰).\n\nThis doesn't mean that PoS is useless. But for securing my money? I believe that the history books will mark PoS \nL1s alongside [MMT](https://www.theepochtimes.com/the-failure-of-mmt-is-now-evident_4315655.html) as \nthe most catastrophic financial inventions of the early 21st century. I could be wrong. Only time will \ntell.\n\n## Cerberus as a Layer 2\n\nCerberus is a BFT consensus algorithm. This means that as long as 67% of the network is honest, decisions made by \nthe network are completed with 100% finality and there is no need for proof-of-anything.\n\nOf course, the problem arises when the network is in Byzantine conditions, i.e. there is some issue, malicious or \naccidental, that prevents more than a third of the network from cooperating with its peers.\n\nIn the best case, the network cannot make progress, because nodes cannot prove to themselves that there's sufficient \nagreement on what the correct outcome of any decision is. This is what is known as a _liveness failure_. BFT \nalgorithms can provide _safety guarantees_, meaning that while the network is healthy, we can be certain that every \ndecision is correct, and is the same decision that would be made by any honest node. But they cannot guarantee \n_liveness_, that the network will always be able to make progress.\n\nIn the worst case, a super-majority of malicious nodes can rewrite the entire history of the network at will. They \ncan do this at essentially zero cost too, because writing information to a file is very, very cheap, and this is all \nthat is required.\n\nSo we need to deal with these two cases. Generally, pure proof-of-stake networks cannot provide liveness guarantees \nat all. We've seen this occasionally with EOS, Solana and I presume others, where the network gets stuck, and it's \n_literally_ resolved via a Zoom call with key node operators to reach a _social consensus_ on how to restart the \nnetwork.  \n\nThe worst case would be \"solved\" in the same way; although here's where things get tricky. If one assumes that the \nsocial consensus operators are themselves the super-majority of the consensus algorithm (otherwise, why are they on \nthis Zoom call?), then _what incentive would they have to revert to the \"correct\" history?_\n\nAs far as I know, Radix are planning to avoid using social consensus in their version of Cerberus by using a sort of \nself-healing mechanism that temporarily [reverts to proof-of-work] if the system detects a liveness failure. It's \nkinda cool, but also pretty complicated.\n\nThe takeaway is that if you're going to be running deterministic consensus (i.e. a BFT algorithm), you 👏 must 👏 \nhave 👏 a backup 👏 consensus algorithm 👏 to guarantee 👏 liveness.\n\nNow with the decision to pivot to Cerberus, we're thinking, \"Gosh where are we going to find a \nreliable backup consensus algorithm at this time of night?\"\n\n![/assets/img/posts/cerbdan.jpg](/assets/img/posts/cerbdan.jpg)\n\n## Tari Mimblewimble as Layer 1\n\nHave you ever wondered why BFT algos require 67% node honesty, but Bitcoin only needs 50.1%? There's no paradox here. \nIt's because Bitcoin does not use a BFT consensus mechanism. Nakamoto consensus is a _probabilistic_ consensus \nalgorithm. \nDecisions are never 100% final (as with BFT algorithms), but they approach finality asymptotically with every block \nthat's added to the chain. \n\nAnother property of proof-of-work-based Nakamoto consensus is that liveness is guaranteed. It's not a very strong \nguarantee, mind you. Even if 99% of the hash rate had to disappear, the Bitcoin chain would still grind forwards -- \nat an absolute crawl -- but it would still make progress.\n\nTari's Mimblewimble base layer is built on top of a proof-of-work-based Nakamoto consensus algorithm, so it has all \nthe liveness-guarantee goodness we're looking for to use to keep Cerberus marching onward and upward.\n\nYou can think of Tari's base layer as this giant, ponderous pendulum that keeps the super-nimble but\n(possibly) prone-to-breakdown Cerberus ticking along.\n\n![pedulum](/assets/img/posts/wrecking_ball.jpg)\n\nIn practice this would work something like this:\n* Cerberus is sharded, and each validator node covers a fraction of the total shard space.\n* This shard group, as it is called, is determined for each node _by the base layer_. \n* Therefore every validator node will have to consult a Tari base node to find out what their shard group is. (They \n  also have to register on the base layer, but more on this later).\n* The base node periodically _shuffles the shard groups_, meaning that affected validator nodes have to reset, \n  update and manage a different part of the shard space (There will be an RFC describing this mechanism and the \n  myriad edge cases shortly).\n* Let's say that some validator group is byzantine. Only the instructions that involve the state covered by the \n  byzantine group will be affected, but it might be a significant number; especially if there are still a small of \n  validator nodes in the network.\n* The affected instructions get stuck and cannot be resolved.\n* Eventually, the base layer shuffles the nodes, and enough bad nodes are shuffled out and replaced by \n  good ones that the node group is healthy again and can continue to process instructions as normal.\n\n## Sybil resistance\n\nCerberus is fairly simple to understand if there's a one-node, one-vote arrangement. Proof-of-stake complicates \nthings quite a bit. Now it's one piece of stake, one vote. What if a whale node finds itself amongst a school \nof minnows? Won't it have a two-thirds majority and just be able to unilaterally decide on instruction \noutcomes? The short answer is yes.\n\nSo to make proof-of-stake work in this context, you need to build in all sorts of safeguards to make sure that no \none node dominates their group and to shuffle them out if they do. But you also need a minimum number of nodes in \nany given group, and you don't want the same nodes always playing together in case they collude, and so on. \n\nPretty soon, you have quite a fun combinatorial optimization puzzle to solve.\n\nWe can neatly side-step this problem by leveraging the base layer once again.\n\nFirst, we require all validator nodes to _register_ on the base layer. This takes the form of a special transaction \nthat locks up some amount of XTR along with some other metadata in a `VN_REGISTRATION` UTXO. This achieves a couple of \nthings:\n\n* It costs real money and opportunity to become a validator node, which provides Sybil resistance. I propose that \n  this Tari is locked up for a minimum of 1-3 months to make it expensive to constantly register and deregister to \n  try and hide your identity as a naughty node.\n* Now we can run a simple one-node, one-vote system on the Cerberus layer.\n* One can query a base node for a list of all `VN_REGISTRATION` UTXOs to generate a list of all possible \n  validator nodes and their metadata.\n* Anyone can pull this list, and figure out which nodes manage which shard groups at any given time.\n\nAs a near-immutable append-only database, the base layer is also the perfect vehicle for referencing additional global \ndata the DAN needs to run smoothly, including smart contract templates.\n\n## Summary\n\nIn short, having a proof-of-work base layer confers several advantages over a pure proof-of-stake system:\n\n* The DAN as a whole can provide (weak) liveness guarantees. We don't need an additional backup consensus algorithm \n  in the DAN.\n* A simple one-node, one-vote consensus mechanism works perfectly. We do not need complicated validator group management algorithms,\n* Using the base layer as a registrar, we have a very convenient Sybil resistance and registration mechanism for \n  validator nodes, smart contract templates and more.\n\nThe more we work on this, the more we discover how synergetically the Tari base layer and Cerberus DAN work together to \nbring a permissionless, decentralised digital assets platform to the world. \n\n[Cerberus]: https://arxiv.org/pdf/2008.04450v1.pdf\n[circular logic]: https://bitcoinmagazine.com/technical/proof-of-work-vs-proof-of-stake-why-bitcoin-wont-change#:~:text=%E2%80%9CBasically%2C%20PoS%20relies%20on%20circular,Alden%20said%20at%20the%20panel.\n[reverts to proof-of-work]: https://www.youtube.com/watch?v=1rNeL-X40lc&list=PLBGHv3uedRNT9ko1CKMTpJTL1BEgjk4wi&index=14&t=1750s",
        "title": "Developer Update",
        "date": "2022-10-19T00:00:00.000Z",
        "excerpt": "A few posts ago, I spoke about our intention to pivot the DAN's consensus  algorithm from independent side-chains towards braided Hotstuff sharding (aka [Cerberus])]. In that post I hinted at how...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-10-10-update-91",
        "content": "\n## Development Update\n\n## Audits\nThe Tari development community has started engaging with companies to perform an audit of the code base and cryptography.\n\n## Base Layer\nThis week we ran another stress test on the Esmeralda network. Some nodes crashed due to a bug that was quickly patched, but the results look positive otherwise. More detailed results will be published shortly. There have been several stress tests already run on Esmeralda, bringing the network to a size that may take many years to achieve in mainnet. It currently has over 300,000 kernels and over 1.8 million outputs. A pruned node currently uses 1.4GB for the blockchain database.\n\n## Tari base node v0.38.5\nVersion 0.38.5 was also released this week. Here are some of the noteable changes:\n\n### Features\n\n* add sql transactions to encumbering queries ([#4716](https://github.com/tari-project/tari/issues/4716)) ([a25d216](https://github.com/tari-project/tari/commit/a25d21678e9863bf1d708ca425e9ca0951cda782))\n* change priority in mempool to take into account age ([#4737](https://github.com/tari-project/tari/issues/4737)) ([0dad9e8](https://github.com/tari-project/tari/commit/0dad9e805d83a6647bb3bc159869852e58de32c6))\n* **clients:** add base node and wallet client crates ([#4722](https://github.com/tari-project/tari/issues/4722)) ([9d06408](https://github.com/tari-project/tari/commit/9d064080bd01a104cda3fae6204f0acd8b56a426))\n* **core/sync:** add sync error status ([#4705](https://github.com/tari-project/tari/issues/4705)) ([6178548](https://github.com/tari-project/tari/commit/6178548b89084ea6a2a39dfe0df45bbf1b4c48d3))\n* **core/sync:** adds `connecting` sync status ([#4698](https://github.com/tari-project/tari/issues/4698)) ([abde8e8](https://github.com/tari-project/tari/commit/abde8e8706ddb62341647d9e8648acf039ea3f69))\n* different default grpc ports for different networks ([#4755](https://github.com/tari-project/tari/issues/4755)) ([933126e](https://github.com/tari-project/tari/commit/933126eb6f99e3842d68809edd1f907be27899db))\n* improve bn command mode timeouts ([#4712](https://github.com/tari-project/tari/issues/4712)) ([e7b0b8f](https://github.com/tari-project/tari/commit/e7b0b8f0a3b5b5683b99f2fdf4b67e0345a7ad3d))\n* improve the TMS validation process ([#4694](https://github.com/tari-project/tari/issues/4694)) ([030bece](https://github.com/tari-project/tari/commit/030becec8ad1479f394a1bc4b1285b5ee3c9d17b))\n* improve txo validation logic ([#4689](https://github.com/tari-project/tari/issues/4689)) ([2b5afcf](https://github.com/tari-project/tari/commit/2b5afcfda7563da75831b9c579a1a415eb716bc5))\n* **tariscript:** adds ToRistrettoPoint op-code ([#4749](https://github.com/tari-project/tari/issues/4749)) ([8f872a1](https://github.com/tari-project/tari/commit/8f872a1d5e154cb8f134474da56e917b512e18d5))\n* trigger mempool sync on lag ([#4730](https://github.com/tari-project/tari/issues/4730)) ([1e22a03](https://github.com/tari-project/tari/commit/1e22a036bf965f89def9a5ae3514ee4e86886e2b))\n* wallet optimize output manager db operations ([#4663](https://github.com/tari-project/tari/issues/4663)) ([25c4d99](https://github.com/tari-project/tari/commit/25c4d99699438526725701dff167e3c608af7ad5))\n\n\n### Bug Fixes\n\n* add a macos dependency to compile libtor ([#4720](https://github.com/tari-project/tari/issues/4720)) ([b41226c](https://github.com/tari-project/tari/commit/b41226c52c74d5e053e0a366931f558afb78c483))\n* **base_node/grpc:** audit of error handling ([#4704](https://github.com/tari-project/tari/issues/4704)) ([595e334](https://github.com/tari-project/tari/commit/595e334ee3a7ab0d885680c6245c88e08c14a5e5))\n* **base-node/grpc:** fixes panic if invalid kernel mr is given ([#4693](https://github.com/tari-project/tari/issues/4693)) ([80af7fa](https://github.com/tari-project/tari/commit/80af7fa32a37f51718f7f15113dce3f7d708dd41))\n* burned reorg ([#4697](https://github.com/tari-project/tari/issues/4697)) ([08773f4](https://github.com/tari-project/tari/commit/08773f4a4522169e80d06f684e5235b61491d404))\n* **ci:** add cargo cache, reduce Ubuntu dependencies and action on pull_request ([#4757](https://github.com/tari-project/tari/issues/4757)) ([33e0dc2](https://github.com/tari-project/tari/commit/33e0dc24222a24e95fbed1d5d66eaa1a340423eb))\n* cli wallet cucumber ([#4739](https://github.com/tari-project/tari/issues/4739)) ([62384f9](https://github.com/tari-project/tari/commit/62384f9fc491d9fe87cfc05c659ef6002a00c8e8))\n* **clients:** fix tari nodejs client proto paths ([#4743](https://github.com/tari-project/tari/issues/4743)) ([88b75dc](https://github.com/tari-project/tari/commit/88b75dc29b129ee083fa1408a6a65270d0444512))\n* **comms/peer_manager:** add migration to remove onionv2 addresses ([#4748](https://github.com/tari-project/tari/issues/4748)) ([a92f205](https://github.com/tari-project/tari/commit/a92f205ff60ea47d1b58da9ec60ee9d2e0249c15))\n* **comms/rpc:** increase max frame size limit for rpc requests ([#4724](https://github.com/tari-project/tari/issues/4724)) ([239b64b](https://github.com/tari-project/tari/commit/239b64bc9935b873a646c8b93a8e3011c3a4d483))\n* **comms:** fixes edge case where online status event does not get published ([#4756](https://github.com/tari-project/tari/issues/4756)) ([aab729a](https://github.com/tari-project/tari/commit/aab729a139f8fa31cb43eab22abaf16bbad8f3b2))\n* **core/mempool:** improve perf of retrieve transactions ([#4710](https://github.com/tari-project/tari/issues/4710)) ([f55762e](https://github.com/tari-project/tari/commit/f55762ea05e54f7711e893f1c7df4d7b670ddabd))\n* **core:** broken doctests ([#4763](https://github.com/tari-project/tari/issues/4763)) ([4cbb378](https://github.com/tari-project/tari/commit/4cbb37853281615dd5c8d7009c5ab2b44f7ab0a5))\n* **core:** improve logging of dropped reply channels ([#4702](https://github.com/tari-project/tari/issues/4702)) ([9768f02](https://github.com/tari-project/tari/commit/9768f02935f4fe5c84dd5fc2f9058e58251c5ff0))\n* **core:** use compact inputs for block propagation ([#4714](https://github.com/tari-project/tari/issues/4714)) ([c659275](https://github.com/tari-project/tari/commit/c65927500c0792f84953274d9036d6c8d1bec72f))\n* **dht/encryption:** greatly reduce heap allocations for encrypted messaging ([#4753](https://github.com/tari-project/tari/issues/4753)) ([195df85](https://github.com/tari-project/tari/commit/195df85172a22fe710e6ce082dbe82db5f6c8d19))\n* ffi tests ([#4713](https://github.com/tari-project/tari/issues/4713)) ([4551ac3](https://github.com/tari-project/tari/commit/4551ac393f205f83db2e9d0faba54ed236e71400))\n* fixes cargo check ([#4729](https://github.com/tari-project/tari/issues/4729)) ([851ba1d](https://github.com/tari-project/tari/commit/851ba1d4d1d6140b14f761d3e3868c9cea90d131))\n* mined tx being invalid ([#4735](https://github.com/tari-project/tari/issues/4735)) ([24e396d](https://github.com/tari-project/tari/commit/24e396d9d6073b6b4b7355bb6f2558a73a0560f2))\n* refactor incorrect cucumber test on burn funds via cli  ([#4679](https://github.com/tari-project/tari/issues/4679)) ([cd183ef](https://github.com/tari-project/tari/commit/cd183ef44f43cb1400716b10cee6d2e76fd9f81a))\n* sync handling and increase reorg speed in mempool ([#4706](https://github.com/tari-project/tari/issues/4706)) ([a3b529a](https://github.com/tari-project/tari/commit/a3b529ad52e9654cecac76667bc748796e5573bf))\n* **wallet:** fixes bug in fetch_by_commitment ([#4703](https://github.com/tari-project/tari/issues/4703)) ([97b01c2](https://github.com/tari-project/tari/commit/97b01c2b70f02ded466c866841a5d03ba49fad02))\n",
        "title": "Developer Update",
        "date": "2022-10-08T17:00:00.000Z",
        "excerpt": "Development Update Audits The Tari development community has started engaging with companies to perform an audit of the code base and cryptography. Base Layer This week we ran another stress test on...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-09-28-update-90",
        "content": "\nOn Monday, 26 September, the Tari community held a meeting to discuss the idea of an \"early\" mainnet launch; i.e. \none that does not have a fully-fledged DAN in place. \n\nThe transcript of that discussion is below.\n\n---\n\n\n**CjS 👁👃👁** *- Today at 11:00 AM*\n\n\nWelcome to the first online dev chat we've had in a while. And the first one on Discord\nThis meeting is relayed to IRC\nand the transcript will be posted on our blog\n\n**tari-bot** *- Today at 11:01 AM*\n\n[irc] /jedusor/ Receiving\n\n**CjS 👁👃👁** *- Today at 11:01 AM*\n\n👍 Great\nOk, a rough agenda is as follows:\n1. As per the blog post Friday, we want to decide if launching mainnet without a fully-fledged DAN is the right decision.\n2. If the decision is \"launch\", then\n  * 2a. Which features are included in mainnet\n  * 2b. What other things need to be done ahead of a mainnet launch\n   Based on this, the core devs can go and put together a provisional timeline based on the outcomes\n   Quick role call? Just make a noise to indicate your presence please\n\n**stringhandler** *- Today at 11:04 AM*\n\nPresent\n\n**jorge_antonio** *- Today at 11:04 AM*\n\nPresent !\n\n**tari-bot** *- Today at 11:04 AM*\n\n[irc] /jedusor/ 👋\n\n**Cifko** *- Today at 11:05 AM*\n\nhere\n\n**Blackwolfsa** *- Today at 11:06 AM*\n\n👋\n\n**CjS 👁👃👁** *- Today at 11:07 AM*\n\nOk, onto topic 1.\nThe vibe I have from the community is that there's a large majority that would support an early mainnet launch and continue to build the DAN with a live mainnet. So my assumption is that this motion is going to pass unless there's a lot of opposition now.\n\n**tari-bot** *- Today at 11:07 AM*\n\n[irc] /jedusor/ Quick question\n\n[irc] /jedusor/ Does anyone not work for Tari Labs?\n\n**willyrgf** *- Today at 11:07 AM*\n\nPresent!\n\n**CjS 👁👃👁** *- Today at 11:08 AM*\n\nYou mean in this meeting?\nSo far, the majority do work for TL. But not everyone\n\n**pluto** *- Today at 11:09 AM*\n\nPresent (Tari Labs)\n\n**stringhandler** *- Today at 11:09 AM*\n\nalso tari labs\n\n**CjS 👁👃👁** *- Today at 11:09 AM*\n\nIn the broader community, esp telegram, I'd guess <50% are TL\n\n**jorge_antonio** *- Today at 11:10 AM*\n\nTL here\n\n**willyrgf** *- Today at 11:10 AM*\n\nI'm not in TL\n\n**pluto** *- Today at 11:11 AM*\n\nI like the early mainnet launch theme, especially if it can have the basic hooks to support the DAN later on.\n\n**tari-bot** *- Today at 11:13 AM*\n\n[mattermost] /leet/ 👌\n\n**CjS 👁👃👁** *- Today at 11:13 AM*\n\nFor those who haven't been following t home, our current Esme testnet has the following features:\n* Mimblewimble core\n* Tariscript\n* Covenants\n* One-sided payments (i.e. non-interactive MW payments)\n* Burn transactions\n\nSo we already have a pretty rich set of features that expands beyond vanilla MW; so the thinking is that there is a solid justification for launching with this set as we continue to work on the DAN.\n\n**Blackwolfsa** *- Today at 11:15 AM*\n\nIt should be noted we have removed the ability to do cut-through of transactions in the mempool\n\n**CjS 👁👃👁** *- Today at 11:15 AM*\n\nThe proposed switch from side-chains to Cerberus is also a consideration.\n\n**Blackwolfsa** *- Today at 11:15 AM*\n\nThats something thats in MW core, we had to remove to enable support for TariScript\n\n**stringhandler** *- Today at 11:16 AM*\n\nThe pros of launching now would be that we get an established base of miners and other developers can start building on it, the cons may be that we don't offer enough of a difference from Beam, Grin and other MW coins to be relevant\n\n**pluto** *- Today at 11:16 AM*\n\nAnother Esme testnet feature worth mentioning:\n- Stealth addresses for one-sided payments\n\n**CjS 👁👃👁** *- Today at 11:16 AM*\n\n+1. Stealth addresses. Thanks @pluto\n\n**tari-bot** *- Today at 11:17 AM*\n\n[irc] /jedusor/ I thought there was no point to launching mainnet without the DAN ready?\n\n**stringhandler** *- Today at 11:17 AM*\n\nI said it at the time, but cut through only really comes into effect if there is zero conf spends\n\n**CjS 👁👃👁** *- Today at 11:17 AM*\n\nWe're rethinking that point Jeduser\n\nHence this discussion\n\n**stringhandler** *- Today at 11:19 AM*\n\nso from an audit point of view, it makes sense IMO to separate the base layer and dan layer\n\n**CjS 👁👃👁** *- Today at 11:19 AM*\n\nThe #1 comment in the community is \"wen mainnet?\". Are we being silly in holding out, maybe for another 2 years, while the DAN gets fully built out?\n\n**stringhandler** *- Today at 11:20 AM*\n\nit's also less risky to release smaller pieces\n\n**pluto** *- Today at 11:23 AM*\n\nThe Esme testnet already offers features that will enable some types of smart contracts basically out of the box, for example atomic swaps with Bitcoin and multi-party m-of-n spending scripts, also not mentioning what covenants can be used for.\n\n**CjS 👁👃👁** *- Today at 11:23 AM*\n\nMY main objection to launching early has been the need to lug legacy code around for all time if there are ever big changes in philosophy; but I'm now reasonably comfortable that the interfaces to the DAN (like node registration transactions etc)  are fairly stable, so even something like a switch from SCs to Cerberus doesn't affect the base layer much at all.\n\n**willyrgf** *- Today at 11:24 AM*\n\nSo, if launch without the DAN, it'll be add in some point of the future, right? If yes, will happen a migration to the DAN? How it will work?\n\n**CjS 👁👃👁** *- Today at 11:24 AM*\n\nThe DAN is a 2nd layer.\n\nBut yes, Tari's main selling point is the DAN - so that's the main focus post mainnet\n\n\n**willyrgf** *- Today at 11:28 AM*\n\nThinking about the devs that can start to create something on it (in a \"early launch\") , they will need to rewrite stuffs to be compatible with a 2nd layer, I imagine. I think it can be a friction point with the community.\n\n**CjS 👁👃👁** *- Today at 11:28 AM*\n\nCan you elaborate?\n\n**willyrgf** *- Today at 11:33 AM*\n\nImaging that happen a launch without the DAN, in the future when it be launched, the dev community that are developing stuffs arounds the Tari base layer probably will start to migrate to the new 2nd layer. At this moment, I imagine that some things developed will need to be rewritten to run in the 2nd layer using all those new features. If it's right, I think it can be a frustrating point to some devs that build things around Tari. Of course if the launch happens directly with a 2nd layer, probably the devs will not need to rewrite apps in the future, avoid some \"friction\" with the community.\n\n**stringhandler** *- Today at 11:35 AM*\n\nI argue that putting a peg in the ground (i.e. the base layer) makes it more stable for developers\nbut I hear you\n\n**CjS 👁👃👁** *- Today at 11:35 AM*\n\njust cross-posting a comment from @bibimbap on Telegram:\n\n\"Actually I just read the article and it's pretty cool\n\nI was worried the merge mining with monero was going away but this is only for the second layer\n\n\"The broad consensus among the core developers is that we should launch the base layer without a fully functional DAN, and bring the DAN online in a smooth and orderly fashion.\"  This is also good\n\nalso leaves a big catalyst for the future\"\n\n**deniskolodin** *- Today at 11:38 AM*\n\nDAN upgrade doesn't require a hardfork, correct?\n\n**CjS 👁👃👁** *- Today at 11:39 AM*\n\nOk, I understand your point now, thanks.\n\nSo the core devs (and anyone else) publish RFCs regularly explaining the thinking around the DAN development. So on one hand, anyone in the community can see the general dev direction and plan and/or comment accordingly.\n\nSecondly, the L1 smart contract capabilities are  limited compared to what the DAN will offer. That said, it's already comparable to (and because of covenants even superioir to in some cases) what you could do on Bitcoin.\n\nBut these features don't change. So if you went and built something on L1, it would still work post-DAN, but it would be like still trying to navigate your horse and buggy on a highway full of Porsches\n\n**stringhandler** *- Today at 11:41 AM*\n\nDiving into some technical details here, but the interaction between the base layer and DAN layer would require the following:\n1. The base layer is a registry of VNs\n2. Tari can be pegged into the second layer via the burn mechanic\n3. Epochs and rules are managed via the base layer\n   stringhandler — Today at 11:41 AM\n   it would require a hard fork to enforce some rules, but hard forks are part of adding anything to the network\n   there will always be hardfork\n\n**CjS 👁👃👁** *- Today at 11:43 AM*\n\nIt will; but maybe not for the reason your question alludes to. Because Tari is not afraid of hardforks (similar to Monero), there hasn't been much effort in putting a soft-fork upgrade mechanism in place.\n\n**tari-bot** *- Today at 11:43 AM*\n\n[mattermost] /pluto/ 👌\n\n**stringhandler** *- Today at 11:44 AM*\n\nI am happy with these features, however I would suggest maybe restricting the op_codes for TariScript and Covenants initially and maybe hardfork to enable them on a regular (maybe 4 or 8 weeks) schedule\n\n**CjS 👁👃👁** *- Today at 11:44 AM*\n\nSo let's move onto topic 2.\nThere have been some very good questions around the topic of an early launch, but not any vehement opposition.\n\n**stringhandler** *- Today at 11:44 AM*\n\ni.e. progressively allow more op_codes\n\n**CjS 👁👃👁** *- Today at 11:46 AM*\n\nSo let's say we go ahead with an early launch. To decide on how early that might be, we need to draw up a TODO list of things that must happen before we could safely launch\n\nI've gone ahead and prepped a list in anticipation of this call, but I might have missed a few things. So here's my provisional list:\n* One-sided payments code is stable\n* Burns are stable\n* Validator node registration code is stable\n* Emission curve is finalised and ratified\n* Stagenet code freeze.\n\n* Audits\n  * Identify code to be audited\n  * Identify Audit partner\n  * Book, fund, and perform audits\n\n* Resolve all findings from audits\n\n**stringhandler** *- Today at 11:51 AM*\n\nVN reg is the only point there I'm a little hesitant on\n\n**CjS 👁👃👁** *- Today at 11:51 AM*\n\nThere are also a bunch of nice-to-haves:\n\n* RFCs up to date\n* Aurora prepped for mainnet\n* Launchpad ready for aminnet\n* tari.com refresh\n* TLU refresh\n\n**stringhandler** *- Today at 11:51 AM*\n\nthe others are stable and unlikely to change\n\n**CjS 👁👃👁** *- Today at 11:52 AM*\n\nWe could have VN reg behind a feature flag, or remove as a requirement\n###stringhandler\n###### — Today at 11:52 AM\nhappy with that\n\n**jorge_antonio** *- Today at 11:53 AM*\n\nHow will it work ? If we allow that feature, users can register a VN before DAN  and would this allow them to 'reserve' VNs in anticipation to the DAN ?\n\n**CjS 👁👃👁** *- Today at 11:54 AM*\n\nGood question 🙂 It depends\n\n**stringhandler** *- Today at 11:55 AM*\n\nFor the audit items, I think some areas that need audits specifically are:\n1. TariScript and the balance checks\n2. Covenants\n3. The proof of work (specifically merge mining) implementations\n\n**CjS 👁👃👁** *- Today at 11:55 AM*\n\nThere's no value in registering before the DAN is close to being live\n\n**stringhandler** *- Today at 11:55 AM*\n\nfor stagenet code freeze, what stops us from doing that now?\n\n**brianp** *- Today at 11:55 AM*\n\nVN registration happens multiple times so you could register one but you would need to continue paying to re-register it. Which seems like a wasteful endeavour. So I think the answer is yes you could, but like... why?\n\n**CjS 👁👃👁** *- Today at 11:56 AM*\n\nFreezing -- audit results notwithstanding?\n\n**stringhandler** *- Today at 11:56 AM*\n\nI think we'll need to tag a commit for the audits\nit'll depend on the audit firm's methodology\n\n**CjS 👁👃👁** *- Today at 11:57 AM*\n\nI think what I'm trying to guage here is more \"is this the list of things we need to do\" vs the specifics of those things\n\n**stringhandler** *- Today at 11:57 AM*\n\nso what have we decided so far?\n\n**jorge_antonio** *- Today at 11:58 AM*\n\nDefinitely, it is a wasteful endeavour. I think if we launch this feature right away we should be explicit that there is no point in using it, so that users are not mislead\n\n**CjS 👁👃👁.** *- Today at 12:01 PM*\n\nFeatures to include:\n- Tariscript - YES\n- Covenants - YES\n- Stealth addresses - YES\n- One-sided payments - YES\n- Burns* - YES\n- DAN interfaces (template and VN registration)  - MAYBE\n\nAudits: YES!\n\n\n*Burns are also a DAN interface\nFrom a base-layer mainnet perspective, is this a complete list?\n\nbase-layer NODE perspective, I should say\n\n**stringhandler** *- Today at 12:02 PM*\n\nPruned mode and archival mode\n\n**CjS 👁👃👁** *- Today at 12:03 PM*\n\nThere's also console wallet, aurora, tari.com, TLU, RFCs that are important but not related to the immutable genesis block directly\nBut we'd def include the core wallet code in the audit process anyway\n\n**stringhandler** *- Today at 12:04 PM*\n\nI am happy with that list\n\nwith DAN interfaces being - NOT AT THIS TIME\n\n**CjS 👁👃👁** *- Today at 12:05 PM*\n\nOk, let's conclude the meeting there.\n\nThe next step would be to take this list and map out realistic timelines for when these might be complete\n\nSince Tari Labs will be paying for the audits, we'll leave it to them to map out that process\n\nThank you everybody that attended\n\n---\n",
        "title": "Transcript: Mainnet planning meeting",
        "date": "2022-09-28T00:00:00.000Z",
        "excerpt": "On Monday, 26 September, the Tari community held a meeting to discuss the idea of an \"early\" mainnet launch; i.e.  one that does not have a fully-fledged DAN in place.  The transcript of that...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-09-22-update-89",
        "content": "\nI came across an article a few months ago by Dan Hughes, founder of a DeFi-focused proof-of-stake project, Radix, that \nopines that [blockchains can't scale]. It makes many points (all of them correct), such as\n* Scalability, Security, Decentralisation. Pick 2.\n* Sharding still requires co-ordination and some sort of global state.\n* Side- or state-chains scale, but do not interoperate easily and require things like bridges, which are hard to get\n  right.\n\nWe've been thinking about these exact issues (and more) while developing Tari. If you've been following along, \nyou'll be aware of our position on these, but in case you've just joined the party, here's a tl;dr:\n\n### Scalability, Security, Decentralisation. Pick 2.\n\nWe've discussed this very point at length within the Tari community and take it as near-axiomatic that\n[scaling a level 1 blockchain network is not feasible](https://rfc.tari.com/RFC-0001_overview.html?highlight=scal#currency-tokens-and-digital-assets).\n\nOur intention was always to build a base layer proof-of-work based network that prioritises decentralisation and\nsecurity over speed and latency and _supplement_ this with one or more second layer networks than emphasise\nscalability and speed. Notice that we explicitly pick 2 different goals on two different layers to get everything we \nwant.\n\n### Sharding still requires co-ordination\n\nIt's always bugged me that the sharding proposals of Ethereum and friends seem to shrug off the idea that there \nstill needs to be some sort of global co-ordination to avoid double spends. It feels like a fundamental blocker, to \nbe honest. Dan talks about this in his article too. Sexy ideas like ZK-rollups can help make this process pretty \nefficient, but it still requires some sort of global lock-step, and I agree with Dan; this leads to either \ncentralisation or a massive brake on scalability.\n\nThe obvious \"solution\" here is to run independent side-chains, so that there _is no global state_! It's a \ncop-out, but it kinda makes sense, right?\n\nLet's take a real-world analogy: If I want to securely store the hundred gold bars I wish I\nhad, I rent space in a bank vault. I am very happy that there is a lengthy and thorough procedure in place in case I \never want to move or sell those bars. I also don't mind paying the hefty price tag for the security protocols, guards,\nCCTV and insurance costs that come with storing my gold in a bank vault because well, gold.  \n\nBut when I go to the gym and want to secure my phone and wallet, I do not want to put them in a bank vault.\nCan you imagine? It's a ridiculous idea! A small locker secured with a $10 padlock is more than \nsufficient. But everyone who uses a Layer One network for small transactions is using (and paying for, even if they \ndon't realise it) a bank vault to store their phone and wallet. \n_Or worse_, the security and/or decentralisation of the network is shit, and everyone is using a gym locker to store \neverything, including their gold bars!\n\nWith Tari, the philosophy has always been to let you use (and pay for) the level of security, scalability and \ndecentralisation that you need. Ultimately we decided to take the independent side-chain approach. Asset owners \ncould pick the number of validators to manage their assets, effectively giving them control of the \nspeed-security-decentralisation triangle.\n\nWe knew that while this approach had many advantages, we would ultimately have to address cross-chain \ninteractions. \n\nWhich brings us to...\n\n### Side- or state-chains scale, but do not interoperate easily\n\nWe could bite the bullet and say, \"yeah, we just won't support side-chain interactions\" but that would destroy \none of the key value propositions of a decentralised digital assets network: the idea of permissionless\ninnovation and interoperability. If Sarah identifies an opportunity to build a business based on tokens that are\nissued from a different contract, she should be able to do so with as little friction as possible.\n\nWe've been mulling over this problem for a long time and [RFC-312] discusses several strategies that Tari side-chains \ncould use to play nicely together. Admittedly, all of them pose significant technological hurdles.\n\nThe most common strategy is to use bridge contracts to allow side-chains to communicate with each other. And \nthere's no denying the fact: Building secure bridges is hard. To whit, [hack1], [hack2], [hack3], and [hack4], in \n2022 alone.\n\n## Why bring all of this up?\n\nIt turns out that Dan wasn't just being a typical crypto-twitter negative nellie. \nHe has actually developed a little-known consensus algorithm called [Cerberus] that he believes \nsolves the scalability problem once and for all. \n\nColour me sceptical. We've all heard this a million times before. Cardano, \nSolana, Near, Blahcoin have all claimed to have \"solved\" scaling, but inevitably all fall victim to the \nblockchain trilemma once you dig a little deeper.\n\nI also say little-known, because to my knowledge, only Radix is developing Cerberus, and almost anyone I've spoken \nto in this space have never heard of it.\n\nBut after reading the paper I felt like \"Holy, shit. I think he's nailed it\". It was almost like reading the Bitcoin \nwhite paper again, not to blow too much smoke up Dan's ass :) But honestly, Cerberus is really, really clever.\n\nIt's elegant, relatively simple, handles cross-contract interactions by design and scales linearly (as claimed).\n\nTo be blunt, it's just better than what we're building. The core developers have been discussing this for some time, \nand there's broad consensus that we should just pivot to using Cerberus. This is a  move that I and fluffypony \nsupport. \n\n## How does it work?\n\nThe version of Cerberus (there are several flavours) that I'm picturing for Tari is basically a version of Hotstuff \nwhere the relationship between Validator Nodes and Contract State is turned on its head. \n\nI can't give a full description of a BFT consensus algorithm in a few sentences -- there will be RFCs for that -- \nbut I will try and sketch out the 'big idea' behind Cerberus and encourage the interested reader to go and read a \nbit more.\n\nInstead of VNs managing state for a _given_ contract, VNs manage predetermined pieces of state, out of the _entire \nuniverse of possible states_! This mapping is essentially random, so that state management is automatically \nload-balanced across all nodes in the network. Furthermore, as nodes join the network, the portion of the overall \nstate space a VN is responsible for shrinks accordingly, meaning that capacity essentially scales with the number of \nnodes. \n\nSince this mapping of state to VN is deterministic, anyone can verify that nodes claiming to have reached consensus \non a state change are in fact the ones that were tasked with that role.\n\nThis is the secret sauce of Cerberus, and when it clicks for you (you may have to read \nthe [Cerberus] paper or read Radix's [Infographic series]), you'll understand why it's so exciting.  \n\nVNs can join and leave the network permissionlessly (within limits - we add measures to prevent Sybil \nattacks and maintain a level of computational stability), but in turn need to be prepared to handle instructions for \nany contract in the network; this is a trade-off in the consensus algorithm design that I feel is well worth the \nbenefits.\n\nIt should then be fairly obvious that if VNs are reaching consensus on small bits of state rather than information \nrelated to specific contracts, inter-contract interactions _just work (TM)_.\n\n## What does this mean?\n\nWell firstly, it means that Tari gets a better DAN.\n\nWhat's also quite interesting is if we couple the Cerberus Layer 2 to our Mimblewimble base layer as in the original \nDAN design, we actually gain several advantages over a pure proof-of-stake system (like Radix) that I'll talk about in \na future post. \n\nIt also means that there are implications on the development timeline for the DAN. Interestingly, the core maintainers \nhave done an assessment and concluded that overall, we don't lose too much: we've gone back a step or two, but now \nhave an easier road to DAN v1.0.\n\nThere are also some implications for a mainnet release. The broad consensus among the core developers is that we \nshould launch the base layer without a fully functional DAN, and bring the DAN online in a smooth and orderly fashion.\n\nThere will be a community discussion on this topic on the \n[Tari Discord on 2022-09-26 at 09:00 UTC](https://discord.com/channels/892738558316662855/893157378789351475/1022072734399868979). \nSo make sure you don't miss it! \n\n\n[hack1]: https://zerion.io/blog/nomad-bridge-hack/\n[hack2]: https://halborn.com/explained-the-ronin-hack-march-2022/\n[hack3]: https://halborn.com/explained-the-qubit-hack-january-2022/\n[hack4]: https://halborn.com/explained-the-wormhole-hack-february-2022/\n\n[blockchains can't scale]: https://assets-global.website-files.com/6053f7fca5bf627283b582c2/60c3808d955fe9316ac6af05_3.%20Why%20Blockchains%20Can%27t%20Scale_compressed%20(2).pdf\n[Cerberus]: https://arxiv.org/pdf/2008.04450v1.pdf\n[RFC-312]: https://rfc.tari.com/RFC-0312_DANHighLevelSpecification.html#inter-contract-interactions\n[Infographic series]: https://www.radixdlt.com/post/cerberus-infographic-series-chapter-i",
        "title": "Pivoting on the DAN",
        "date": "2022-09-22T00:00:00.000Z",
        "excerpt": "I came across an article a few months ago by Dan Hughes, founder of a DeFi-focused proof-of-stake project, Radix, that  opines that [blockchains can't scale]. It makes many points (all of them...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-09-19-update-88",
        "content": "\n\nThis week sees a number of stability improvements to the network and wallet. If you're running an Esmeralda testnet node, you will notice that there are significantly more transactions in the blockchain. That's because [@hansieodendaal](https://github.com/hansieodendaal) and [@SWvheerden](https://github.com/SWvheerden) have been stress testing the network. A number of bugs and performance tweaks have been fixed and implemented as an outcome of this process. \n\nFor those not following in Discord, there was a discussion about creating a Stagenet. More details on how Stagenet differs from previous testnets are in the [contribution guidelines](https://github.com/tari-project/tari/blob/development/Contributing.md#testnets). \n\n\n## Tari base node v0.38.4\nVersion 0.38.4 has also been released. Here are some of the noteable changes:\n\n\n### Features\n\n* **ci:** add default CI and FFI testing with custom dispatch ([#4672](https://github.com/tari-project/tari/issues/4672)) ([9242051](https://github.com/tari-project/tari/commit/92420516f464146ffdbf16b7a3759012da79cf0d))\n\n\n### Bug Fixes\n\n* add burn funds command to console wallet (see issue [#4547](https://github.com/tari-project/tari/issues/4547)) ([#4655](https://github.com/tari-project/tari/issues/4655)) ([0242b1d](https://github.com/tari-project/tari/commit/0242b1d435a62433229e3e3752febca84aca7dae))\n* **comms:** simplify and remove possibility of deadlock from pipelines and substream close ([#4676](https://github.com/tari-project/tari/issues/4676)) ([f41bcf9](https://github.com/tari-project/tari/commit/f41bcf930ddcfaa622c5f859b8e82331fa8981a8))\n* fix potential race condition between add_block and sync ([#4677](https://github.com/tari-project/tari/issues/4677)) ([55f2b9c](https://github.com/tari-project/tari/commit/55f2b9cfe3ed254d0927f4ecc57484320eedca60))\n* **p2p:** remove DETACH flag usage ([#4682](https://github.com/tari-project/tari/issues/4682)) ([947f64f](https://github.com/tari-project/tari/commit/947f64fc84e664d927ccc1043d8cff136b0e2449))\n* reinsert transactions from failed block ([#4675](https://github.com/tari-project/tari/issues/4675)) ([8030364](https://github.com/tari-project/tari/commit/8030364ec67f3c9102d47fdc8e5bb45ee47cabc3))\n* stray clippy error ([#4685](https://github.com/tari-project/tari/issues/4685)) ([a709282](https://github.com/tari-project/tari/commit/a709282c8729807781b45302ee8e87d235ca2d61))\n* **wallet:** mark mined_height as null when pending outputs are cancelled ([#4686](https://github.com/tari-project/tari/issues/4686)) ([209ee3d](https://github.com/tari-project/tari/commit/209ee3d27d78c95f37fcdd731b34a846611dd458))\n",
        "title": "Developer Update",
        "date": "2022-09-16T00:00:00.000Z",
        "excerpt": "This week sees a number of stability improvements to the network and wallet. If you're running an Esmeralda testnet node, you will notice that there are significantly more transactions in the...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-08-17-update-87",
        "content": "\n## Introduction\nTari has been running multiple testnets named after Discworld characters for over two years. We have had Weatherwax, Stibbons, Ridcully, Dibbler, and Igor, and with the new reset, Esmeralda. Esmeralda is the planned stagenet release. Let's discuss what we have been doing to prepare for the release.\n\n## Code cleanup\nMost of the network resets, and new testnets have focussed on adding new functionality or radically changing consensus rules. With Esmeralda, we have removed all the experimental layer 2 code from the codebase. Development on layer 2 is still ongoing, but not on the main development branch of the [Tari](https://github.com/tari-project/tari) anymore. \n\nAs with all the previous networks and experiments, the [Tari](https://github.com/tari-project/tari)  repo had grown to include many applications. We have moved these all to their own repositories and only kept the base_node, console_wallet, miner, and the merge_mining_proxy. \n\nIn keeping with the tidying up of the repository, we have consolidated all database migrations. \n\n## Breaking changes\n### Rangeproofs\nWe have replaced the rangeproofs required by MimbleWimble with Bulletproof+ for the Esmeralda reset, as they are slightly smaller. Our implementation also allows for batch verification of outputs to speed up the verification time of nodes. Incidentally, the recent hard fork of Monero also introduced Bulletproof+ to their transactions. \n\n### Domain-separated hashes\nAll signatures require a challenge to verify successfully and to make them non-interactive, this is typically a hash of some message. To improve the security of these challenges, we changed all challenges to domain-separated hashes. And Tari includes quite a few signatures on transactions for security.\n\n### Burning of outputs\nBurning of coins has been a long-used technique to accomplish a multitude of things in crypto, typically done with a “broken unclaimable script/key”. We have added an explicit burn output in which a specific UTXO can be burned and become unspendable forever. The primary use case for burns is as a mechanism for pegging funds into layer 2 chains. \n\n## Going forward\nEsmeralda is now our primary testnet and the next update to Aurora will switch to support it. Unfortunately, because \nthere are so many breaking changes in Esme's code, you won't be able to use Aurora on Dibbler at all after the update.\n\nIf you have funds on Dibbler that you want to keep, hold off on updating your mobile wallet, or save your seed phrase \nand run a Dibbler version of the console wallet to recover your funds. \nThe testnet store will still be accepting Dibbler tXTR for the time being.\n\n",
        "title": "Getting ready for Esma",
        "date": "2022-08-17T00:00:00.000Z",
        "excerpt": "Introduction Tari has been running multiple testnets named after Discworld characters for over two years. We have had Weatherwax, Stibbons, Ridcully, Dibbler, and Igor, and with the new reset,...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-08-11-update-86",
        "content": "\n## New testnet launched: Esmeralda\n\nThe `dibbler` testnet has been running since January 2022, but there are new features in the development branch that are not in `dibbler`. \nBecause adding these features to `dibbler` would have required a development heavy hardfork, and we've already successfully tested hardforks in `dibbler`, \nthe development community decided to save time and create a new testnet instead. \n\nThose features are now significant enough to start testing, and we're proud to annouce a new testnet [Esmeralda](https://en.wikipedia.org/wiki/Granny_Weatherwax) (Genesis Block is 30 August 2022). For those of you\nmining, **Dibbler will continue to run, side-by-side with Esmeralda**. There are still two Lambos up for grabs in the [Tari Testnet Limited store](https://store.tarilabs.com/), which will continue to use `dibbler` tXTR. Just a reminder, these are still testnet coins, and don't have a market value.\n\nTo run `esmeralda`, you can either compile from source using the development branch, or [download a binary](https://www.tari.com/downloads/) from the [website](https://www.tari.com/downloads/) or [Github](https://github.com/tari-project/tari/releases)  with a version `v0.37` or higher. (Dibbler binaries will still be available).\n\nSome of the new features in `Esmeralda`:\n* [Bulletproofs+](2022-06-24-update-80) - Bulletproofs, but better. Smaller than regular BPs, and with batch verification of range proofs, full-block validation times are something like 60% quicker. 😮 \n* [Stealth addresses](2022-08-01-update-84) - Tari brought one-sided payments to Mimblewimble. Stealth addresses make the privacy trade-off much smaller. 🕶️ \n* Tari 🔥  burn 🔥  transactions. Why would you want to do this?  [Find out more](https://github.com/tari-project/rfcs/pull/10)\n",
        "title": "New Testnet Esmeralda - We Ate'nt Dead",
        "date": "2022-08-11T00:00:00.000Z",
        "excerpt": "New testnet launched: Esmeralda The  testnet has been running since January 2022, but there are new features in the development branch that are not in .  Because adding these features to  would have...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-08-05-update-85",
        "content": "\nTari has supported one-sided payments for some time. This allows someone to send funds across the Tari network without needing the recipient to be online. The downside to this was the that receiver's public key is visible on the blockchain; a knock on privacy.\n\nTo deal with this, Tari [recently introduced](https://github.com/tari-project/tari/pull/4310) support for [stealth addresses](./2022-08-01-update-84). Now you get the best of both worlds: Non-interactive payments AND randomised payment addresses.\n\nSee them in action in this short video!\n\n{% include embedded_video.html id=\"pqEYZKCQJzo\" %}  \n",
        "title": "Stealth addresses for non-interactive payments",
        "date": "2022-08-05T00:00:00.000Z",
        "excerpt": "Tari has supported one-sided payments for some time. This allows someone to send funds across the Tari network without needing the recipient to be online. The downside to this was the that receiver's...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-08-01-update-84",
        "content": "\nMimblewimble, the blockchain technology that Tari's base layer is based on, requires two parties to interactively negotiate a transaction together. For most\nuse cases this works well. In fact, when you're paying another person, they \nare probably online and waiting for the exchange to happen. But there are cases\nwhere you are not sure if the recipiant's wallet is even online, for example paying to a cold wallet, or donating to a fund. \n\nTari implements one-sided payments or non-interactive payments through the use \nof Tariscript, a scripting language built on top of basic Mimblewimble. Through the use of [ECDH](https://tlu.tarilabs.com/cryptography/elliptic-curves), you can share the blinding factor required by Mimblewimble, and attach a spending script that allows an owner of a public key to spend it.\n\nAt some point in the future, the receiving wallet can come online and scan the blockchain for the one sided payments addressed to it. This works really well, but because the public key in the attached Tariscript is in the clear, an outside\nobserver can see when funds move. Note: they cannot know the amounts, only that the funds belong to a given public key.\n\nTo address that, Tari has added Stealth Addresses, sometimes referred to as one-time addresses, to non-interactive payments. In this scheme, the \npublic key in the Tariscript is hidden by adding a random nonce. \nWallets, in the same scanning procedure used for one-sided payments, recover funds sent to them by multiplying the public random nonce with their private receiving address (through ECDH). If the result matches the stealth address in the Tariscript, the funds are theirs, and they can spend it.\n\nFor more information on stealth addresses in Tari, see the [RFC](https://rfc.tari.com/RFC-0203_StealthAddresses.html)",
        "title": "Stealth addresses for non-interactive payments",
        "date": "2022-08-01T00:00:00.000Z",
        "excerpt": "Mimblewimble, the blockchain technology that Tari's base layer is based on, requires two parties to interactively negotiate a transaction together. For most use cases this works well. In fact, when...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-07-22-update-83",
        "content": "\nJumping into a new codebase can be daunting. Everything is new again, something that seems familiar has the sense of\njust being a little off. Getting your bearings can take time but you're a great developer and you always make it work.\n\nToday what I want to do is introduce you to a complex area of code within Tari so while you're contributing, if you\ncome across it you'll have a better idea of what's going on and how to manage it. I'll give you a brief history of what\nthis code does, and why it works the way it works.\n\n# [Our LMDB Wrapper](https://github.com/tari-project/tari/blob/90a5ec3/base_layer/core/src/chain_storage/lmdb_db/lmdb.rs)\n\n## What is LMDB?\n\nLMDB is a compact, memory-efficient database. All data is exposed via a memory map which allows for blazingly fast\nreads.\n\n## What is Tari using LMDB for?\n\nThe Tari Base node uses LMDB as a backend store for chain related data. Simply put, we store the\nblockchain in it. We were using lmdb in Tari production but we had been using an in-memory database for tests.\nPart of the original design of the `BlockchainBackend` trait and main goal was to abstract away any database specifics\nso\nwe could implement common data stores or in-memory data stores without a problem. Go figure modeling\ntransactions, or read & write locks in memory doesn't always map easily to transactions or locks in other\ndatabases. It required us to make bug fixes twice over and also resulted in the possibility of the tests passing while\nthe production interface still failed. This resulted in a lot of bugs and time spent managing the in-memory adapters\ninstead of on the fun problems.\nEventually all of the in-memory data store was also swapped for lmdb but the remnants of the common interface remain.\n\n## How Tari implemented LMDB?\n\nLet's take a few steps back. We have many modules in the Tari repository and code reuse across them is common. I\nmean why wouldn't you when you have the flexibility. As a result, we write abstractions to wrap functionality as each of\nthe dependent modules may want to use that functionality differently. Let's dive into\nthe [chain_storage module](https://github.com/tari-project/tari/blob/90a5ec3/base_layer/core/src/chain_storage). The\nmodule is designed around managing blockchain state. It is written to allow configuration of the chain state to be\ndefined by the needs of the module. You may wish to store the UTXO set in memory, and the kernels backed by LMDB, while\nthe merkle trees are stored in flat files for example. To make this work our `chain_storage` module has\na `BlockchainDatabase` struct.\n\n```rust\npub struct BlockchainDatabase<B> {\n    db: Arc<RwLock<B>>,\n    validators: Validators<B>,\n    config: BlockchainDatabaseConfig,\n    consensus_manager: ConsensusManager,\n    difficulty_calculator: Arc<DifficultyCalculator>,\n    disable_add_block_flag: Arc<AtomicBool>,\n}\n```\n\nThis struct is used to compose the API for storing and retrieving blockchain data. I won't get into too much detail\nabout its attributes but the quick rundown is:\n\n- `db`: Thread safe access to the backend of choice\n- `validators`: Used to decide if the block going into the db is valid\n- `config`: Configuration options (horizon for pruning etc.)\n- `consensus_manager`: Consensus rules\n- `difficulty_calculator`: Rules and expectations for mined blocks\n- `disable_add_block_flag`: A flag to prevent propagated blocks from being added during block sync\n\nThe part we care about most though is `<B>` `where B: BlockchainBackend`.\n\n`BlockchainBackend` is a trait that defines behaviour for database wrappers that store blockchain data. Using the trait\nallows us to make some guarantees such as using `Send`, and `Sync` (rusts automatically derived, methodless, marker\ntraits) to guarantee thread safety, as well as atomic transactions to ensure database integrity.\n\nHere is where LMDB enters the picture again. We've written an `LMDBDatabase` struct which implements\nthe `BlockchainBackend` trait. This allows us to define a wrapper that promises we meet all the necessities to operate\nas a\nblockchain backend, and ensures the functionality to host that data in LMDB. You may have already taken a peek\nand noticed we have an `lmdb_db` subfolder in our `chain_storage` module folder. Within the subfolder we have two\nsimilarly\nnamed files:\n\n- [base_layer/core/src/chain_storage/lmdb_db/lmdb.rs](https://github.com/tari-project/tari/blob/90a5ec3/base_layer/core/src/chain_storage/lmdb_db/lmdb.rs)\n- [base_layer/core/src/chain_storage/lmdb_db/lmdb_db.rs](https://github.com/tari-project/tari/blob/90a5ec3/base_layer/core/src/chain_storage/lmdb_db/lmdb_db.rs)\n\nSo what gives? What's the separation of concerns here and who's doing what job exactly? Great question! I'm glad you\nasked.\n\n### Let's start with `lmdb_db.rs`.\n\nThis is where our implementation of a `BlockchainBackend` occurs. We've implemented all\nthe necessary methods here, and it provides the API that is commonly used throughout different Tari clients. But it does\na lot more. lmdb is a key, value store and as such it doesn't represent just a single database, but the possibility of\nmany databases where each is an independent key, value store. but it is capable of cross database reads\nand writes in a single atomic transaction. If you wanted to map the concept to something more\nfamiliar you might think about each database as a table. Back to `lmdb_db.rs`, where\nwe [define all the different databases](https://github.com/tari-project/tari/blob/90a5ec3/base_layer/core/src/chain_storage/lmdb_db/lmdb_db.rs#L126-L149)\nwe want to store into. It'll create the databases if they don't exist and keep a reference to each, so that they are\nreadily\navailable. It also attempts to handle some additional transaction locking for us but we'll get into that a little later.\n\n### What `lmdb.rs` offers\n\nConsider `lmdb.rs` just a smidge closer to the actual database. Something between our wrapper abstraction, and the lmdb\ninterface. It's designed to perform very specific tasks on the databases. It provides utility functions used within\nthe `chain_storage` module. De-duping inserts, counts, gets, sets,\nmatching, and filtering results. It's a module of functions we commonly need when we're about to finalize a transaction.\nWhere `lmdb_db.rs` may perform some additional transformation before passing the results we actually want to store down\nto the functions in `lmdb.rs`. Most of these functions will be called from our `LMDBDatabase` wrapper, although it's not\nalways a guarantee, sometimes we use them directly from other call points withing the `chain_storage` module.\n\n## Caveats of the existing interface\n\nEarlier I mentioned that the `BlockchainDatabase` had ReadWriteLock applied to the backend\ninterface `db: Arc<RwLock<B>>`.\nThis was needed in the rust realm after experiencing some unexpected behaviour from our abstraction.\nThis as it turns out was a result of the API we made public via the `BlockchainBackend`\ntrait.\nTake for example, a situation where different threads are operating on the same database. Under the hood of our\nconvenience methods we gain read and write locks for each independent call, but still leaves room for error:\n\n```rust\ndb.add_person(\"Peter\", 3) ?;\n\nthread::spawn(| | {\n    db.add_person(\"Sam\", 23) ?;\n    if db.person_exists(\"Peter\") ? { db.delete_person(\"Peter\") ?; }\n});\n\nthread::spawn(| | {\n    db.add_person( & tx, \"Tom\", 66) ?;\n    \n    if db.person_exists(\"Peter\")? {\n        // ❌  There is a chance that peter is deleted between checking for Peter's existence and deleting\n        db.delete_person(\"Peter\") ?;\n    }\n});\n```\n\nThis could be solved a handful of ways, but we'll look specifically at two ways to achieve safety here. If we go back\ninto the helper functions performing calls to lmdb via the `lmdb.rs` we notice they actually take\na [transaction in their signatures](https://github.com/tari-project/tari/blob/90a5ec3/base_layer/core/src/chain_storage/lmdb_db/lmdb.rs#L54)\n. This makes it easy to chain different functions together and ensure they are run as single atom transaction. lmdb\nsupports atomic\ntransactions, and our interface here lets us utilize those features at the database level.\n\nThe problem arises in aligning the outer abstraction for different backend types. The `LMDBDatabase` has convenience\nmethods for us to operate on the database but unlike the slightly lower level `lmdb.rs` functions these methods do not\naccept a transaction as an argument. This means if we call two different methods on the database wrapper, each method\nwill utilize a different transaction and ensure no atomicity. As a solution for this we wrap the whole database wrapper\nin a `RwLock` forcing us to acquire a lock to the entire database for the duration of our processing. Ensuring nobody\ncan perform a sneaky delete out from underneath us.\n\nThis means we have got two locks happening when we perform any operation. A language specific lock, as well as a\ndatabase specific lock.  If we\nwanted to try and tidy up our double lock situation we once again have two clear candidates for refactoring. We could\nintroduce the transaction passing present in the underlying `lmdb.rs` interface to the outer trait. This would offer us\nthe same level of atomicity the lower level `lmdb.rs` but we end up moving the implementation details of a\nparticular backend to the forefront of our generic. At that point it's arguable we may not need the generic at all. If\nwe revisit the definition of our `BlockchainBackend` trait it says:\n\n> The backend *must* also execute transactions atomically; i.e., every operation within it must succeed, or they all\n> fail\n\nIt lets us know that an operation we call on the backend will happen atomically, but doesn't make the promise that\noperations called\ntogether will happen atomically. If we as the developers are utilizing multiple methods of the `LMDBBackend` together\nand\nrequire atomicity then this can be a red flag for us. Instead of calling multiple methods on the wrapper itself, we can\ncreate one specific method that performs this series of calls with the needed level atomicity. Using our previous\nexample of finding a person \"Peter\" and removing him if found, we can get a safer guarantee from our backend if we merge\nthe two independent backend methods. Instead of calling `person_exists` and `delete_person` we can create a new\nmethod `delete_person_if_exists`.\n\nFrom this:\n\n```rust\n    // The db method implementation abridge\n\nfn person_exists(&mut self, name: String) -> Result<bool, Error> {\n    let txn = self.transaction()?;\n    self.read_from_table(txn, \"People\", name).is_some()\n}\n\nfn delete_person(&mut self, name: String) -> Result<bool, Error> {\n    let txn = self.transaction()?;\n    self.delete_from_table(txn, \"People\", name)\n}\n\nif db.person_exists(\"Peter\") ? {\n    // ❌  There is a chance that peter is deleted between checking for Peter's existence and deleting\n    db.delete_person(\"Peter\") ?;\n}\n```\n\nTo this:\n\n```rust\nfn delete_person_if_exists(&mut self, name: String) -> Result<(), Error> {\n    let txn = self.transaction()?;\n    if let Some(person) = self.read_from_table(txn, \"People\", name).is_some() {\n        self.delete_from_table(txn, \"People\", name);\n    };\n}\n\ndb.delete_person_if_exists(\"Peter\") ?\n```\n\nThis gives us the level of atomicity we want while also keeping our generic interface absent of backend specific\ndetails. If we follow this pattern of identifying areas similar to this, and ensuring we push the complexity of the\ntransactions down to the implementation than we could safely remove our outer language specific lock. This begs the\nquestion though:\nWould we want to? This pattern gives us everything we want but also moves the dangers of getting it wrong back onto the\ndeveloper, and reviewers. They need to know this pattern exists, and needs to be rigidly adhered too at the risk of\ncausing race conditions or other bugs. Sticking to a common pattern in a codebase is a good idea but sometimes you could\nuse just a little more safety, so why not let the language make those promises for you.\n\n## Contribute to Tari!\n\nThanks for coming along on this journey with me, I hope it helped pull back the veil and gives you a bit of perspective\nas to how Tari works under the hood and some reasons for utilizing redundancy across language, and database features which\nmay not always be obvious at first glance. If simplifying and improving ergonomics is your thing, why not contribute?\nCheck out our [open issues](https://github.com/tari-project/tari/issues), and if you are just starting out look for\nour [\"good first issue\"](https://github.com/tari-project/tari/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\ntag.",
        "title": "Demystifying complex corners: Tari's LMDB Wrapper",
        "date": "2022-07-22T00:00:00.000Z",
        "excerpt": "Jumping into a new codebase can be daunting. Everything is new again, something that seems familiar has the sense of just being a little off. Getting your bearings can take time but you're a great...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-07-08-update-82",
        "content": "\nTari's DAN Layer is progressing nicely with a lot of pull requests (PRs) related to checkpoints and committees getting merged this week. \n\nOne exciting PR merged this week was [**#4260: Add range proof batch verification to validators**](https://github.com/tari-project/tari/issues/4260). \n\nMore than 80% of CPU time during block sync and verification is taken up by range proof verification. Using a clever trick of using the same cryptographic generators, multiple range proofs can be verified at the same time, dramatically cutting down the time taken in verification.\n\n[Bulletproof+ benchmarks](https://github.com/tari-project/bulletproofs-plus#batched-64-bit-single-range-proof-verification) have shown that range-proof verification gains for an empty block with only two outputs would be around 37%. A slightly more populated block with four outputs gains would be 56%, and then for a densely populated block (256 outputs or more) the gains would approach 80%. Effective speedup of block verification in these three cases would be around 30% for two outputs, around 45% for four outputs and around 64% for 256 outputs or more.\n\nHere's a list of other PRs recently merged:\n\n### Features\n\n* add checkpoint_number to checkpoint with basic base layer validations ([#4258](https://github.com/tari-project/tari/issues/4258)) ([7b76141](https://github.com/tari-project/tari/commit/7b761410cd1dde2c47fd209d4b5e2a77f51aed96))\n* add encryption service ([#4225](https://github.com/tari-project/tari/issues/4225)) ([6ce6b89](https://github.com/tari-project/tari/commit/6ce6b893df46d69a4177ef0130f841994e492a09))\n* add range proof batch verification to validators ([#4260](https://github.com/tari-project/tari/issues/4260)) ([02d3121](https://github.com/tari-project/tari/commit/02d31212731d4a0643dac1f26afe241b4f5b9204))\n* add tari engine for flow and wasm functions ([#4237](https://github.com/tari-project/tari/issues/4237)) ([a997934](https://github.com/tari-project/tari/commit/a99793424815e5b43eb67f7422cb42459636d7af))\n* **base_layer:** basic checkpoint validation ([#4293](https://github.com/tari-project/tari/issues/4293)) ([045997a](https://github.com/tari-project/tari/commit/045997a0a141c4391efc98aeabfbe6d6e550367f))\n* **comms:** add or_optional trait extension for RpcStatus ([#4246](https://github.com/tari-project/tari/issues/4246)) ([11fddf6](https://github.com/tari-project/tari/commit/11fddf6199af670fb4ccb34a99b89c49a42b336e))\n* contract acceptance signatures are submitted and validated ([#4269](https://github.com/tari-project/tari/issues/4269)) ([414be33](https://github.com/tari-project/tari/commit/414be33351781c07358d3850e4e67b750c1fcb8a))\n* **core:** validates non-contract utxos have no sidechain features ([#4259](https://github.com/tari-project/tari/issues/4259)) ([a8ba89f](https://github.com/tari-project/tari/commit/a8ba89fe2195232e7e860342617ddf5f6c6244c2))\n* **dan_layer/core:** track checkpoint number for each checkpoint submitted ([#4268](https://github.com/tari-project/tari/issues/4268)) ([16e07a0](https://github.com/tari-project/tari/commit/16e07a0b4ab9079f84645d8796a4fc6bb27f0303))\n* **dan_layer:** generate and add checkpoint signatures ([#4261](https://github.com/tari-project/tari/issues/4261)) ([0f581ca](https://github.com/tari-project/tari/commit/0f581cafe8bd4f922462757504c772c82d0697c7))\n* **wallet:** uses tip height to calc abs acceptance period ([#4271](https://github.com/tari-project/tari/issues/4271)) ([480d55d](https://github.com/tari-project/tari/commit/480d55dade62339dafc457c98681efcb66304beb))\n\n\n### Bug Fixes\n\n* add saturating sub to prevent potential underflow ([#4286](https://github.com/tari-project/tari/issues/4286)) ([56d184a](https://github.com/tari-project/tari/commit/56d184a7c3c405028e38ef4640804ff3bcb37b1a))\n* **base-node:** minor fixups for hex/type parsing and long running commands ([#4281](https://github.com/tari-project/tari/issues/4281)) ([f910cce](https://github.com/tari-project/tari/commit/f910cce13aa6ba3af021253bd922baddd43e885f))\n* **core:** include issuer public key in contract id hash ([#4239](https://github.com/tari-project/tari/issues/4239)) ([ef62c00](https://github.com/tari-project/tari/commit/ef62c00b10cdf6dafe9e2b24acecfd2006c48125))\n* **dan_layer/core:** include state root in checkpoint signature ([#4285](https://github.com/tari-project/tari/issues/4285)) ([bcaabf0](https://github.com/tari-project/tari/commit/bcaabf04f5cef05d7707293236fb29b1020fa3de))\n* **vn:** scan and save contracts without autoaccept ([#4265](https://github.com/tari-project/tari/issues/4265)) ([a137f53](https://github.com/tari-project/tari/commit/a137f53f35db70031155f9c79a04fd11d8e1996f))\n* **wallet:** handle not found rpc error in utxo scanning ([#4249](https://github.com/tari-project/tari/issues/4249)) ([bcd14c7](https://github.com/tari-project/tari/commit/bcd14c7dcbfc9c2bd63ec896c80d45785cf04714))\n",
        "title": "This week in Tari",
        "date": "2022-07-08T00:00:00.000Z",
        "excerpt": "Tari's DAN Layer is progressing nicely with a lot of pull requests (PRs) related to checkpoints and committees getting merged this week.  One exciting PR merged this week was #4260: Add range proof...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-07-01-update-81",
        "content": "\nThere's been a lot of development on the second layer of Tari these last two weeks. Progress has been made on the committee management initialization and validator node start up process. \nTo that end, you can now play around with initializing and selecting validator nodes in the console wallet. You can use `tari_console_wallet contract --help` to see the available commands. Be warned though, it's very experimental and subject to change.\n\n```\nUSAGE:\n    tari_console_wallet.exe contract <SUBCOMMAND>\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    help                       Print this message or the help of the given subcommand(s)\n    init-amendment             A generator for amendment files that can be edited and passed to\n                                   other contract commands\n    init-constitution          A generator for constitution files that can be edited and passed\n                                   to other contract commands\n    init-definition            Generates a new contract definition JSON spec file that can be\n                                   edited and passed to other contract definition commands\n    init-update-proposal       A generator for update proposal files that can be edited and\n                                   passed to other contract commands\n    publish-amendment          Creates and publishes a contract amendment UTXO from the JSON\n                                   spec file\n    publish-constitution       Creates and publishes a contract definition UTXO from the JSON\n                                   spec file\n    publish-definition         Creates and publishes a contract definition UTXO from the JSON\n                                   spec file\n    publish-update-proposal    Creates and publishes a contract update proposal UTXO from the\n                                   JSON spec file\n```\n\nCalling `init-definition` will get you started and prompt you for the information you need. Afterwards you'll call `publish-definition` with the file you created, and then do the same process for `init-constitution` and `publish-constitution`. For more detail about Contract Definitions and Constitutions, see the [RFC](https://rfc.tari.com/RFC-0312_DANHighLevelSpecification.html).\n\nHere's a list of the PR's recently merged:\n\n### Features\n\n* add an encrypted value to the TransactionOutput ([#4148](https://github.com/tari-project/tari/issues/4148)) ([01b600a](https://github.com/tari-project/tari/commit/01b600ae3756b02ad99ffad8c4d16e09e31ffa77))\n* add sender to instructions ([#4234](https://github.com/tari-project/tari/issues/4234)) ([6c116ac](https://github.com/tari-project/tari/commit/6c116acae93eff0869cc82fa18b9342624da6914))\n* add validator node checkpointing ([#4217](https://github.com/tari-project/tari/issues/4217)) ([8b0add0](https://github.com/tari-project/tari/commit/8b0add0b53011de30253337a6830f3b9c66251b8))\n* **base_layer:** basic contract constitution validation ([#4232](https://github.com/tari-project/tari/issues/4232)) ([c2efd5e](https://github.com/tari-project/tari/commit/c2efd5e161176d7c66a6669fef2625bf77d2eb82))\n* **base_layer:** basic validations for proposals, proposal acceptances and amendments ([#4238](https://github.com/tari-project/tari/issues/4238)) ([64f8972](https://github.com/tari-project/tari/commit/64f89724896c6ddd7b21efc8c8ff605cbc373f70))\n* **base_layer:** validate duplicated acceptances ([#4233](https://github.com/tari-project/tari/issues/4233)) ([3d8a3b2](https://github.com/tari-project/tari/commit/3d8a3b2c09b375b7af59d52f1462a93801beff07))\n* **base_layer:** validate that contract definitions are not duplicated ([#4230](https://github.com/tari-project/tari/issues/4230)) ([0a2812c](https://github.com/tari-project/tari/commit/0a2812c165be76fd177f0563c802c3afb43d0215))\n* **base_layer:** validation of committee membership in contract acceptances ([#4221](https://github.com/tari-project/tari/issues/4221)) ([641844a](https://github.com/tari-project/tari/commit/641844a749e043ad708debeaebc25b8c4c8adaa6))\n* **base-node:** improve contract utxo scanning ([#4208](https://github.com/tari-project/tari/issues/4208)) ([0fcde31](https://github.com/tari-project/tari/commit/0fcde31bdf81e27b92bf3d44dc563c4cf23fd38f))\n* change tari explorer block view ([#4226](https://github.com/tari-project/tari/issues/4226)) ([652cba3](https://github.com/tari-project/tari/commit/652cba36a584f208b1782c95057d3839a6317d04))\n* **ci:** build both x86/arm64 docker images from GHA  ([#4204](https://github.com/tari-project/tari/issues/4204)) ([28a8f8b](https://github.com/tari-project/tari/commit/28a8f8b541f96d2bee4bd7f46cc1625dfeb0d323))\n* **console-wallet:** generate issuer key for contract init-definition ([#4202](https://github.com/tari-project/tari/issues/4202)) ([7317d6b](https://github.com/tari-project/tari/commit/7317d6ba858dd0b54fb0a39cf5c0c1999042cb7b))\n* contract auto acceptance ([#4177](https://github.com/tari-project/tari/issues/4177)) ([87f9969](https://github.com/tari-project/tari/commit/87f996923f138f953198a2f16c11a180cca5134d))\n* **core:** add contract index to blockchain database ([#4184](https://github.com/tari-project/tari/issues/4184)) ([b7e97f4](https://github.com/tari-project/tari/commit/b7e97f45d3b3b7407058d6bb8da89f6f14f98984))\n* **core:** new output features for changes in contracts ([#4169](https://github.com/tari-project/tari/issues/4169)) ([41570f6](https://github.com/tari-project/tari/commit/41570f6f159776aaf99a504715ee4af31919f1b7))\n* **miner:** friendlier miner output ([#4219](https://github.com/tari-project/tari/issues/4219)) ([4245838](https://github.com/tari-project/tari/commit/42458381105df4ca2b54b3e6510423dc775bde9e))\n* publication of contract update proposal acceptances ([#4199](https://github.com/tari-project/tari/issues/4199)) ([e3b2b9b](https://github.com/tari-project/tari/commit/e3b2b9b5bbbc8bced1228832202f4932012f6a6e))\n* scan base node for constitutions ([#4144](https://github.com/tari-project/tari/issues/4144)) ([310a2d2](https://github.com/tari-project/tari/commit/310a2d20267f0c0226a76c9ba0b56864569621cb))\n* swap dalek bulletproofs for bulletproofs-plus ([#4213](https://github.com/tari-project/tari/issues/4213)) ([46f9bb8](https://github.com/tari-project/tari/commit/46f9bb8359295a2c0432c304ec20c2a4498fa31d))\n* use tari_crypto's updated \"extended pedersen commitment factory\" ([#4206](https://github.com/tari-project/tari/issues/4206)) ([50ce20a](https://github.com/tari-project/tari/commit/50ce20a3b13647a841e4cbfac44837a78a623dcd))\n* **validator_node:** add global db ([#4210](https://github.com/tari-project/tari/issues/4210)) ([3965267](https://github.com/tari-project/tari/commit/3965267c53b60e26d8f8effc852107fec4ab3111))\n* **validator-node:** add logging ([#4189](https://github.com/tari-project/tari/issues/4189)) ([2ed859f](https://github.com/tari-project/tari/commit/2ed859f22e0436a4e27d6508560c9122746c0e85))\n* **validator-node:** allow network to be configured via cli ([#4190](https://github.com/tari-project/tari/issues/4190)) ([6a4c1a4](https://github.com/tari-project/tari/commit/6a4c1a4a3b3014f988d8a1cb31e926bc4d743a68))\n* **vn:** record contract states ([#4241](https://github.com/tari-project/tari/issues/4241)) ([92ae4ab](https://github.com/tari-project/tari/commit/92ae4abf2d59e675f2f6c48df053e3273076fbd8))\n* wallet selects previous checkpoint for spending ([#4236](https://github.com/tari-project/tari/issues/4236)) ([90a5ec3](https://github.com/tari-project/tari/commit/90a5ec32bd4f746b29f06d70bc9737a9cacf4538))\n* **wallet:** adds contract_id to outputs db ([#4222](https://github.com/tari-project/tari/issues/4222)) ([6f331f8](https://github.com/tari-project/tari/commit/6f331f877b0c41336f73c42440facb32953fa59b))\n* **wallet:** allow UTXO selection by specific outputs and by token ([#4227](https://github.com/tari-project/tari/issues/4227)) ([f2a7e18](https://github.com/tari-project/tari/commit/f2a7e1846341a69ddea6eb3541467e82e1bf2e47))\n* **wallet:** new cli commands to initialise proposals and amendments ([#4205](https://github.com/tari-project/tari/issues/4205)) ([40cbd50](https://github.com/tari-project/tari/commit/40cbd50e319e77b037931b8cc33f6b87cf174488))\n* **wallet:** new command to publish a contract update proposal ([#4188](https://github.com/tari-project/tari/issues/4188)) ([0e3bee0](https://github.com/tari-project/tari/commit/0e3bee06a08760b3fb61c2896a52b53a86d7e4a9))\n* **wallet:** publish contract amendment ([#4200](https://github.com/tari-project/tari/issues/4200)) ([edcce4a](https://github.com/tari-project/tari/commit/edcce4a816102929284285d0f8cdb04fe7006c76))\n\n\n### Bug Fixes\n\n* add prettierignore for partials ([#4229](https://github.com/tari-project/tari/issues/4229)) ([923cf07](https://github.com/tari-project/tari/commit/923cf0765581c9e0c471cfff00886015a2e827bb))\n* **contract-index:** adds support for ContractAmendment to contract index ([#4214](https://github.com/tari-project/tari/issues/4214)) ([a41d0c9](https://github.com/tari-project/tari/commit/a41d0c92cffa734406dad50820ef1367f24ae133))\n* **core:** cleanup duplicate maturity check ([#4181](https://github.com/tari-project/tari/issues/4181)) ([5e55bf2](https://github.com/tari-project/tari/commit/5e55bf22110ac40ffc0dea88d88ba836982591eb))\n* **test:** integration test for validator node is broken ([#4192](https://github.com/tari-project/tari/issues/4192)) ([16d6ba5](https://github.com/tari-project/tari/commit/16d6ba5403e4a0e62e676e56c8ab755a69e6e1f0))\n* **test:** unifying dan layer integration tests ([#4175](https://github.com/tari-project/tari/issues/4175)) ([f3495ee](https://github.com/tari-project/tari/commit/f3495ee71fbb83edef9b295b42a34b6dfae87acf))\n* **validator-node:** return error if contract_id empty for publish_contract_acceptance grpc ([#4191](https://github.com/tari-project/tari/issues/4191)) ([8874114](https://github.com/tari-project/tari/commit/8874114bb25232e62e539e600fe082443a476fec))\n* **validator:** set tor_identity base path ([#4187](https://github.com/tari-project/tari/issues/4187)) ([e324b80](https://github.com/tari-project/tari/commit/e324b803f748e862796210226ca31906613bde28))\n* **wallet:** select only basic utxos when building a transaction ([#4178](https://github.com/tari-project/tari/issues/4178)) ([42269ae](https://github.com/tari-project/tari/commit/42269ae48e9a8eb1ebc479a22813bf2f8cf0c22b))\n* **wallet:** use correct type for contract_id in the contract constitution file format ([#4179](https://github.com/tari-project/tari/issues/4179)) ([669a1bd](https://github.com/tari-project/tari/commit/669a1bd45fd68615da037886379e96b89b9f4f76))\n* **core:** replace OutputFlags with OutputType ([#4174](https://github.com/tari-project/tari/issues/4174)) ([d779f43](https://github.com/tari-project/tari/commit/d779f4311a0415b3ecd98e806bfbf27fc2486412))\n",
        "title": "This week in Tari",
        "date": "2022-07-01T00:00:00.000Z",
        "excerpt": "There's been a lot of development on the second layer of Tari these last two weeks. Progress has been made on the committee management initialization and validator node start up process.  To that...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-06-24-update-80",
        "content": "\nTari Bulletproofs+ (BP+) implements _Bulletproofs+: Shorter Proofs for Privacy-Enhanced Distributed Ledger [2]_, derived \nfrom the original Bulletproofs (BP) work _Bulletproofs: Short Proofs for Confidential Transactions and More [1]_. Bulletproof+ shaves 96 bytes off range proofs.  \n\nThanks to batch verification, range proof verification is also more efficient. (See our [benchmarks](https://github.com/tari-project/bulletproofs-plus)). \n\nLet us remind ourselves what the primary use case for BP (and now BP+) is on the Tari blockchain. Our tokens are \nessentially Pedersen Commitments, e.g. `C(v,k) = (v.H + k.G)`, with `v` being the value and `k` being the blinding \nfactor or spending key. We need to provide proof for any interested verifier, like a base node, that the value of our \ntoken is not less than zero. If the latter were allowed, we would be able to inflate the mined base layer tokens or \ntXTR. Such a proof is called a _range proof_.\n\n\nSimilar to BP, BP+ also supports rewinding the proof for wallet recovery.\nWe can also aggregate range proofs (in batches of `2^n`, i.e.  2, 4, 8, 16 etc.), but rewinding only works for non-aggregated proofs.\n\nOur implementation of BP+ range proofs also offers the ability to prove an arbitrary minimum value other than zero. This feature is also possible with standard bullet proofs, but is something that we're explicitly adding to BP+ to enable required features of the Tari DAN, such as collateral proofs.\nLastly, our implementation of BP+ is compatible with extended commitments. This enables \nus to package additional tokens apart from the base layer token, tXTR, into a single UTXO.\n \nIf we add two base points to the default Pedersen Commitment, we get an extended Pedersen Commitment defined as \n`C(v,k1,k2,k3) = (v.H + k1.G1 + k2.G2 + k3.G3)`. In this case, `v` is the value, `k1` is the blinding factor or spending \nkey, and `k2` and `k3` are adding two additional dimensions such as an asset ID and serial number. Mind-boggling, and this is _really_ a topic for a future blog post.\n\n## References\n\n[1] [Bulletproofs: Short Proofs for Confidential Transactions and More](https://eprint.iacr.org/archive/2017/1066/20220414:014622)\n\n[2] [Bulletproofs+: Shorter Proofs for Privacy-Enhanced Distributed Ledger](https://eprint.iacr.org/archive/2020/735/20200618:154806)\n",
        "title": "Bulletproofs+",
        "date": "2022-06-24T00:00:00.000Z",
        "excerpt": "Tari Bulletproofs+ (BP+) implements Bulletproofs+: Shorter Proofs for Privacy-Enhanced Distributed Ledger [2], derived  from the original Bulletproofs (BP) work Bulletproofs: Short Proofs for...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-06-09-update-79",
        "content": "\nThere's been a lot of activity these last few weeks. If you're compiling from source you'll probably notice difficulties syncing\nwith the Dibbler testnet. This is because there are a lot of new features in development. Minor fixes for Dibbler will still be\nimplemented on the `testnet-dibbler` branch. If you want to try out some of the latest features in `development`, start the base node, wallet\nand other apps with the CLI arguments `--network igor` to use the Igor testnet. \n\nSome exciting features in development:\n1. Bulletproofs is getting replaced by Bulletproof+. This saves on some data, but more importantly will enable batch verification which speeds up Initial Block Download and syncing the blockchain.\n2. The contract and constitution management of sidechain committees. For more details, see the [RFC](https://rfc.tari.com/RFC-0312_DANHighLevelSpecification.html)\n\n\nSome other features committed recently:\n\n### Features\n\n* add encrypted_value to the UnblindedOutput ([#4142](https://github.com/tari-project/tari/issues/4142)) ([f79d383](https://github.com/tari-project/tari/commit/f79d383533c2e9c4db95d4a13973992c9a8739ef))\n* add FeePerGramStats to ffi library ([#4114](https://github.com/tari-project/tari/issues/4114)) ([234d32f](https://github.com/tari-project/tari/commit/234d32f446d5f75c2af78b8e30bc818a628b1dfb))\n* **console-wallet:** add contract-definition init command ([#4164](https://github.com/tari-project/tari/issues/4164)) ([8685e2f](https://github.com/tari-project/tari/commit/8685e2fe3b174a00047d049acca998df3c85975c))\n* constitution publishing ([#4150](https://github.com/tari-project/tari/issues/4150)) ([ba83b8f](https://github.com/tari-project/tari/commit/ba83b8f0aaa833dafe2e89c82ab802e35eb190a2))\n* contract acceptance publication ([#4151](https://github.com/tari-project/tari/issues/4151)) ([d3d3e91](https://github.com/tari-project/tari/commit/d3d3e91c80b0bc2a6adeb796c2500aa88f1f49cb))\n* **core:** add contract acceptance utxo features ([#4145](https://github.com/tari-project/tari/issues/4145)) ([2636cb5](https://github.com/tari-project/tari/commit/2636cb56ddf1b67ed7bf4c4aea8c05f9369b11d0))\n* **core:** add side-chain features and constitution to UTXOs ([#4134](https://github.com/tari-project/tari/issues/4134)) ([ada3143](https://github.com/tari-project/tari/commit/ada31432ea2e0ac1591153580b0e2b86475b30e7))\n* **core:** adds constitution UTXO features ([#4121](https://github.com/tari-project/tari/issues/4121)) ([da5696a](https://github.com/tari-project/tari/commit/da5696a69a7568e744681d5139dbc4fe81031644))\n* **core:** define OutputFlags for side-chain contracts ([#4088](https://github.com/tari-project/tari/issues/4088)) ([50993a3](https://github.com/tari-project/tari/commit/50993a3dc0aaf8506ef21a90c45a2a56d801716a))\n* **core:** impl consensus encoding for bool ([#4120](https://github.com/tari-project/tari/issues/4120)) ([682aa5d](https://github.com/tari-project/tari/commit/682aa5d0ec108074ffed68aead83a757ee5c9490))\n* **daily-tests:** use environment variable to set custom seed words ([#4086](https://github.com/tari-project/tari/issues/4086)) ([3773bba](https://github.com/tari-project/tari/commit/3773bba3572360492640036bd40916bc6cea1f6b))\n* scan base node for constitutions ([#4144](https://github.com/tari-project/tari/issues/4144)) ([310a2d2](https://github.com/tari-project/tari/commit/310a2d20267f0c0226a76c9ba0b56864569621cb))\n* **wallet_ffi:** new ffi method to create covenant ([#4115](https://github.com/tari-project/tari/issues/4115)) ([dd65b4b](https://github.com/tari-project/tari/commit/dd65b4bd8b168b9423cd953f5e089b5723dbb747))\n* **wallet_ffi:** new ffi method to create output features ([#4109](https://github.com/tari-project/tari/issues/4109)) ([f8fa3ec](https://github.com/tari-project/tari/commit/f8fa3ecb5700e80adf63cc3e61f0b8367217f1bc))\n* **wallet:** add help for wallet cli commands ([#4162](https://github.com/tari-project/tari/issues/4162)) ([859b7d3](https://github.com/tari-project/tari/commit/859b7d3022dab60732f5e638b52f8c1237a2a8f4))\n* **wallet:** new command to publish a contract definition transaction ([#4133](https://github.com/tari-project/tari/issues/4133)) ([b4991a4](https://github.com/tari-project/tari/commit/b4991a471cb3a6db2a54b623c0afc09f71ae3dc4))\n\n\n### Bug Fixes\n\n* better message for failed software update check ([#4100](https://github.com/tari-project/tari/issues/4100)) ([f33a503](https://github.com/tari-project/tari/commit/f33a503cd5d0f49de9cb0e92b7eba893c39d9217))\n* **block-sync:** check coinbase maturity ([#4168](https://github.com/tari-project/tari/issues/4168)) ([38b4af7](https://github.com/tari-project/tari/commit/38b4af7104780373e4ff1eddf1e6b19f479b0ae2))\n* **ci:** sort .license.ignore locally before diff ([#4106](https://github.com/tari-project/tari/issues/4106)) ([8594754](https://github.com/tari-project/tari/commit/859475438219b6ace16e6b2437522788d0c7d737))\n* **comms:** commit to public key and nonce in identity sig ([#3928](https://github.com/tari-project/tari/issues/3928)) ([5ac6133](https://github.com/tari-project/tari/commit/5ac6133a8ab0707dfd97cf1647d709256bb9c05b))\n* **core:** don't allow coinbase transactions in mempool ([#4103](https://github.com/tari-project/tari/issues/4103)) ([46450d5](https://github.com/tari-project/tari/commit/46450d5a475fa8b57107f6806962a4c9a1338ac5))\n* **dht:** fixes MAC related key vuln for propagated cleartext msgs ([#3907](https://github.com/tari-project/tari/issues/3907)) ([1e96d45](https://github.com/tari-project/tari/commit/1e96d45535f4af967a761fd71521eb68bbb1b371))\n* **dht:** optimisation, no decrypt if public key dest doesn't match ([#4131](https://github.com/tari-project/tari/issues/4131)) ([987972c](https://github.com/tari-project/tari/commit/987972cffd577b03a8395ce1d5e441c35fb6b109))\n* hash in cucumber ([#4124](https://github.com/tari-project/tari/issues/4124)) ([5d7d55d](https://github.com/tari-project/tari/commit/5d7d55d97f1251619911e4555a925cc03b50c7ed))\n* **hotstuff:** fix bug where decide state was listening for wrong message ([#4160](https://github.com/tari-project/tari/issues/4160)) ([fe7b304](https://github.com/tari-project/tari/commit/fe7b304e936dc567ca106c86dfeb7ed403807b04))\n* **integration_test:** fix wallet-cli integration tests ([#4132](https://github.com/tari-project/tari/issues/4132)) ([4464064](https://github.com/tari-project/tari/commit/446406491698e97983143036c2ea9dd0ac10b365))\n* move peer dbs into sub folders ([#4147](https://github.com/tari-project/tari/issues/4147)) ([2b1a69a](https://github.com/tari-project/tari/commit/2b1a69a9219f29472d6fa26b1b2350be7880b11a))\n",
        "title": "This week in Tari",
        "date": "2022-06-09T00:00:00.000Z",
        "excerpt": "There's been a lot of activity these last few weeks. If you're compiling from source you'll probably notice difficulties syncing with the Dibbler testnet. This is because there are a lot of new...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-05-31-update-78",
        "content": "\nWhen contributing new code to open source projects, communicating _why_ the change should be made is almost as \nimportant as the code itself. The bigger the PR, the truer this becomes.\n\nIn this post, I'll explain what git commit farming is, and how it will help you get your PRs merged into Tari faster, \nand with less fuss.\n\n![P2P chess!](/assets/img/posts/farming.jpeg)\n\n## WTF are git logs?\n\nTari is hosted on [Github](https://github.com/tari-project/tari), which started out as a nice web-based \nfront-end for [git](https://git-scm.com/). Things changed over time and today Github does a lot more than \nproxy git pulls and pushes. But deep down at the core, git is still there, doing the grunt work behind Github.\n\nGit is a really complex tool. I doubt I know 25% of its full capability. So this post will focus on one particular \naspect of git that is really valuable in large open-source project management: farming git logs. \n\n### Hello logs\n\nIf you know what git logs are and how to read them, skip ahead to the next section. There are more goodies for you \ndown there, I promise.\n\nGit logs are the messages that get written every time a commit is made in a repository. You make a commit when running\n* `git commit` - your editor will open and you'll be asked to write a message\n* `git merge` - git will write the commit message itself. And for this reason, rebases are often preferred over \n  merge commits.\n* Github PR descriptions - when PRs are merged, Github will use the PR description as the commit message (possibly \n  throwing away intermediate commit messages that the author has provided - more on that later).\n\nTo read the commit log, simply run this command from a terminal:\n\n`$ git log`\n\nHere's a snippet from the tari repo's logs:\n\n```\ncommit 2636cb56ddf1b67ed7bf4c4aea8c05f9369b11d0 (HEAD -> development, origin/development, origin/HEAD)\nAuthor: mrnaveira <47919901+mrnaveira@users.noreply.github.com>\nDate:   Mon May 30 14:54:40 2022 +0100\n\n    feat(core): add contract acceptance utxo features (#4145)\n    \n    Description\n    ---\n    - Adds `ContractAcceptance` struct to the side-chain output features\n    - Implements consensus encoding/decoding for `ContractAcceptance`\n    - Updates related gRPC types and conversions\n    \n    Motivation and Context\n    ---\n    Create structs for contract acceptance in the side-chain features.\n    \n    How Has This Been Tested?\n    ---\n    - New unit test for consensus encoding/decoding of the `ContractAcceptance`\n    - Existing unit/integration test pass\n\ncommit 2b1a69a9219f29472d6fa26b1b2350be7880b11a\nAuthor: stringhandler <mikethetike@tari.com>\nDate:   Mon May 30 15:41:10 2022 +0200\n\n    fix: move peer dbs into sub folders (#4147)\n    \n    Description\n    ---\n    Add sub folders for each application's peer DB\n    \n    Motivation and Context\n    ---\n    If you run the base node and validator node in the same folder, you will get a file lock error. I added the same folder to the console wallet to keep it the same\n    \n    How Has This Been Tested?\n    ---\n    cargo test\n\ncommit f79d383533c2e9c4db95d4a13973992c9a8739ef\nAuthor: Denis Kolodin <DenisKolodin@gmail.com>\nDate:   Mon May 30 15:35:28 2022 +0300\n\n    feat: add encrypted_value to the UnblindedOutput (#4142)\n    \n    Description\n    ---\n    The PR adds extra encrypted field to `UnblindedOutput` structs.\n    \n    What was done:\n    - Added `EncryptedValue` struct\n    - Implemented `ConsensusEncode`, `ConsensusDecode` and `ByteArray` for it\n    - Added the `encrypted_value` field of that type to the `UnblindedOutput` struct\n    - Added an extra parameter to metadata signature calculation methods\n    - Added an extra field to the `GRPC` protocol (`UnblindedOutput` type)\n    - Added an extra column and migrations for the `outputs` table\n    - The types `OutputSql` and `NewOutputSql` updated to store and restore the `EncryptedValue`\n    \n    Important notes:\n    1. The value of `encrypted_value` passed as a parameter to the metadata signature evaluation but has not taken into account yet, because it will break the verification process of the `TransactionOutput` and we can complete that when the same `encrypted_value` field will be added to the `TransactionOutput` struct in the further PRs.\n    2. Real encryption process is not implemented yet. Instead of that I've added the method `todo_encrypt_from` that I used to mark the places where we have to put an encryption service and call it.\n    \n    Motivation and Context\n    ---\n    Add an encrypted amount to the `TransactionOutput`.\n    \n    How Has This Been Tested?\n    ---\n    CI\n\ncommit 5cc9a406a807cfaeaba4e71e2af13fa3b4bde2ff\nMerge: 3656c3247 987972cff\nAuthor: Mike the Tike <mikethetike@tari.com>\nDate:   Mon May 30 12:51:59 2022 +0200\n\n    Merge branch 'testnet-dibbler' into development\n    \n    # Conflicts:\n    #       base_layer/wallet_ffi/src/lib.rs\n    #       base_layer/wallet_ffi/wallet.h\n```\n\nYou will notice a couple of things:\n\n1. The author, commit hash and timestamp are all contained in the messages.\n2. You can get a clear sense of what the commit contributed. In this snippet, the descriptions all come from Github \n   PR descriptions (because they use the `PULL_REQUEST` template the project has set up).\n3. The last commit is a merge-commit, where changes from the `testnet-dibbler` branch were pulled into `development`.\n\n### Log summaries\n\nSometimes, you don't want such detailed log data. It turns out that there's an enormous amount of flexibility in how \nlogs are displayed. The [`git log`] command has, per git's _modus operandi_, a gazillion tweaks and options.\n\nA commonly-used one is to just print a one-line summary of each commit:\n\n`$ git log --oneline`\n\n```text\n2636cb56d (HEAD -> development, origin/development, origin/HEAD) feat(core): add contract acceptance utxo features (#4145)\n2b1a69a92 fix: move peer dbs into sub folders (#4147)\nf79d38353 feat: add encrypted_value to the UnblindedOutput (#4142)\n5cc9a406a Merge branch 'testnet-dibbler' into development\n3656c3247 ci: docker image build for x86-64 & arm64 from x86-64 (#4135)\n310a2d202 feat: scan base node for constitutions (#4144)\nb4991a471 (leet/development) feat(wallet): new command to publish a contract definition transaction (#4133)\n52ecb4940 chore(deps): bump async from 2.6.3 to 2.6.4 in /applications/tari_collectibles/web-app (#4143)\n71c3a8a8f test: coverage for rolling average time struct (#4116)\ne5d20f7ad test: coverage mocks for files common configuration files (PR #4116) (#4130)\nd1827ea41 chore: update croaring and randomx (#4136)\nada31432e feat(core)!: add side-chain features and constitution to UTXOs (#4134)\n446406491 fix(integration_test): fix wallet-cli integration tests (#4132)\n682aa5d0e feat(core): impl consensus encoding for bool (#4120)\n```\n\n### Print commits between branches\n\nYou can log the set of commits that would be included in a `merge` of two commits are branches by running\n\n`$ git log commitA...commitB`.\n\nLet's consider a dummy repo with the following commit history:\n\n```text\n(main): A -> B -> C -> D\n(branch)      \\-> B' -> C'\n```\n\n```text\n$ git log --oneline main\n4888619 (HEAD -> main) D\n7e709a9 C\na123a17 B\nbd48e7f A\n```\n\n```text\n$ git --oneline branch\n3c0915c (branch) C'\n5e5ce61 B'\na123a17 B\nbd48e7f A\n```\n\nSince we branched off at `B`, the commits that would be involved in a branch are `C, D, B', C'` which is what `git \nlog --oneline main...branch` gives us:\n\n```text\n$ git log --oneline main...branch \n3c0915c (branch) C'\n5e5ce61 B'\n4888619 (HEAD -> main) D\n7e709a9 C\n```\n\n_Note:_ The order doesn't matter. `branch...main` gives the same result as `main...branch`\n\nThere are lots of other ways to use [`git log`]. Read the docs and try some of them out! \n\n\n[`git log`]: https://git-scm.com/docs/git-log\n\n### PR descriptions vs. Git logs\n\nDepending on how PRs are merged in Github, the git messages get thrown away in favour of the PR description. Since \nwe treat the git commit messages as very important, we retain them and add them to the end of the PR description \nwhen merging PRs from Github.\n\n## Producing great git commit messages\n\n\nThe git log is a really important resource in understanding not only how a code base works, but understanding its \nhistory and gaining an appreciation for the reasoning behind why changes were made.\n\nSo how do we produce great git message logs when it's impossible to anticipate how coding is going to \nprogress when writing a new feature? You always end up with dozens of little commits that are just tiny \nbugfixes, formatting issues and any number of things that deviate from the platonic description of the code base's \nevolution.\n\nThe good news is that this is fine. Really.\n\n![really](/assets/img/posts/thisisfine.gif)\n\n### Starting with a plan\n\nLet's assume we're writing a new feature in our codebase. As usual, we start from a new branch:\n\n```text\n(main)$ git checkout -b my_feature\nSwitched to a new branch 'my_feature'\n```\n\nWe begin by writing a stub API. After writing this, I make a commit:\n\n```text\n$ git log\ncommit dfa1ca73867ed36ad3f7638b71e95ed23329499f (HEAD -> my_feature)\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 13:10:59 2022 +0100\n\n    Add sketelal API for Feature\n    \n    No tests or code yest, just the\n    * `add_data` function\n    * `process_data` function\n```\n\nOff to the races! Ok, now to add some tests...\n\n```text\ncommit c05ad1a1a8f456fa398ee73bfc03ae1e580900b8 (HEAD -> my_feature)\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 13:13:15 2022 +0100\n\n    Add import tests\n    \n    * add_data returns Ok(n) returning the number of records when adding\n      data\n    * `process_data` returns Ok() on succesful processing\n    \n    Both these tests currently fail\n```\n\nCool. Now to implement the body of the API so that the tests pass.\n\nHmm. This is taking longer than anticipated. There's some issue on the backend that I can't fix right now.\nSo let's commit what we've done and continue tomorrow..\n\n```text\ncommit 563ee327276ba199b66053bb668cf60b1c49b0a5 (HEAD -> my_feature)\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 13:16:33 2022 +0100\n\n    WIP Implement add_data\n    \n    add_data ingests data into the store and returns the total number of\n    records.\n    \n    WIP Backend times out sometimes. Investigating\n```\n\nFresh day, fresh issues. We've identified the problem and fixed it on the backend.\n\n```text\ncommit 7323efc6db54d63efc2ff0f5b67f2ff1677c3b73 (HEAD -> my_feature)\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 13:30:36 2022 +0100\n\n    Fix timeout issues on backend\n    \n    The backend expected inserts to be done in negative time.\n    This fix sets a reasonable timeout of 500ms\n```\n\n### Cherry-picking to submit an independent PR\n\nThis bugfix should _actually_ go in as a PR on `main`, so let's create a PR now quickly by cherry-picking this commit:\n\n```text\n$ git checkout main\nSwitched to branch 'main'\n\n (main)$ git checkout -b timeout-fix\nSwitched to a new branch 'timeout-fix'\n\n (timeout-fix) $ git cherry-pick 7323efc6db54d63efc2ff0f5b67f2ff1677c3b73\n[timeout-fix 6e9e937] Fix timeout issues on backend\n Date: Wed Jun 1 13:30:36 2022 +0100\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 backend_fix.rs\n\n (timeout-fix) $ git log\ncommit 6e9e93784c55f056f813978b0673ecc8edd3aedc (HEAD -> timeout-fix)\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 13:30:36 2022 +0100\n\n    Fix timeout issues on backend\n    \n    The backend expected inserts to be done in negative time.\n    This fix sets a reasonable timeout of 500ms\n\ncommit 4888619a51c7ce128dbe5f6a60b55b87cd152363 (main)\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Tue May 31 15:18:45 2022 +0100\n\n    D\n```\n\nAwesome! Our fix can now be pushed as a standalone PR!\n\nIt gets reviewed and merged pretty quickly. So I can pull from the remote server and see that the main branch now \nincludes this fix:\n\n```text\n(main)$ git log --oneline \n6e9e937 (HEAD -> main, timeout-fix) Fix timeout issues on backend\n4888619 D\n7e709a9 C\na123a17 B\nbd48e7f A\n```\n\n### Tidy up the obsolete branch\n\nGreat! Time to nuke that `timeout-fix` branch (it's no longer needed) and jump back into `my-feature`:\n\n```text\n(main) $ git branch -d timeout-fix \nDeleted branch timeout-fix (was 6e9e937).\n\n (main) $ git checkout my_feature \nSwitched to branch 'my_feature'\n```\n\n### Continue with the feature development\n\nAfter a few hours, I've fixed the implementation and committed the changes:\n\n```text\n$ git log\ncommit e668f3f5b2ec11a137fc84c8936e50360d476b21 (HEAD -> my_feature)\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 13:47:36 2022 +0100\n\n    Complete data ingestion\n    \n    Data ingestion works. Increasing the timeout allows the backend to\n    respond, and the add_data test now passes.\n```\n\n### Things start getting messy\n\nAlmost ready for a PR.. but wait! Let's run `cargo clippy` first, since it's a CI requirement that clippy gives the \ngreen light, so best to cut off any issues here.\n\nShoot! There are some clippy lints. No worries. That's a quick fix...\n\n```text\n$ git log\ncommit 623e3573e1160c1791798c969e1bfe00acc37b67 (HEAD -> my_feature)\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 13:50:24 2022 +0100\n\n    Clippy fixes\n    \n    Functional programming FtW\n```\n\nCrumbs. While I was waiting for tests to run I realised that I should also add a `delete_record` method to the \nAPI, along with some tests of course. \n\nOk, let's handle that with the next set of commits:\n\n```text\n$ git log --oneline \n4bfe58e (HEAD -> my_feature) Implement `delete_record`\n64408c3 Add test for `delete_record`\n3a21ec7 Add `delete_record_ method to API\n623e357 Clippy fixes\n...\n```\n\nOk, tests pass. Time to create a PR. \n\nBut as I'm about to submit the PR, something occurs to me: An edge case on `add_record`. This leads me a bit down a \nrabbit hole and my git log is becoming increasingly messy:\n\n```text\n$ git log -n 6\ncommit f73547597e41b3b3ea0b7c52b3a883f390e13b88 (HEAD -> my_feature)\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 14:48:31 2022 +0100\n\n    Feature complete.\n    \n    Tests pass\n    Clippy passes\n    Linting done\n\ncommit 0c54146fbe190106d0687c0d30ed39101142b204\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 14:47:57 2022 +0100\n\n    fixup! Stupid off by one error\n    \n    We'll get it this time. It's 1am after all\n\ncommit b2985fc36f6534fc468c8d9c53cb9799c638eb20\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 14:47:19 2022 +0100\n\n    Fix error in process_data\n    \n    The null test case broke `process_data`. Adding a fix.\n\ncommit 6f947fb3031bb15ba624a16b764cc626dcaa68cb\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 14:46:22 2022 +0100\n\n    Add guard for empty record in `add_data`\n    \n    Catch the case where empty records are provided in `add_data` and return\n    an error.\n\ncommit d328a81c1e08b86934abd240a32a42be3e13d306\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 14:45:08 2022 +0100\n\n    Add edge_case test for `add_data`\n    \n    If I add an empty record, the backend will crash! We must guard against\n    this.\n    \n    Test currently fails.\n\ncommit 4bfe58e198dc45c448035e5035bc43bfab06c1dc\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 14:41:47 2022 +0100\n\n    Implement `delete_record`\n```\n\n### Taking stock, and figuring out what we want\n\nWe're ready to submit a new PR, but my git log is a disaster! No-one reviewing this will have any idea what the \nthinking behind the feature is beyond the fact that it's a lot of caffeine-driven and sleep-deprived drivel.\n\nHere's what the current log summary looks like. I've gone and characterised each commit and noticed that there are \nreally 4 main categories of commit message - \n* API definition, \n* tests, \n* API implementation, \n* and formatting/debugging: \n\n```text\n$ glg\nf735475 (HEAD -> my_feature) Feature complete.   <------ minor \n0c54146 fixup! Stupid off by one error           <------ minor \nb2985fc Fix error in process_data                <------ minor \n6f947fb Add guard for empty record in `add_data` <------ API impl \nd328a81 Add edge_case test for `add_data`        <------ Tests\n4bfe58e Implement `delete_record`                <------ API impl \n64408c3 Add test for `delete_record`             <------ Tests\n3a21ec7 Add `delete_record_ method to API        <------ API def\n623e357 Clippy fixes                             <------ minor\ne668f3f Complete data ingestion                  <------ API impl\n7323efc Fix timeout issues on backend            <------ Bug fix\n563ee32 WIP Implement add_data                   <------ API impl \nc05ad1a Add import tests                         <------ Tests\ndfa1ca7 Add sketelal API for Feature             <------ API def\n4888619 D                                        <------ branched off main\n\n```\n\nWhat we need to do is clean up the git history and tell a unified story. In particular, we want the following:\n\n1. We really only want 3 commits here: API definition, then tests, then implementation. That will give reviewers a \n  clear idea of what the feature should do, and how it's done.\n1. The formatting / bugfix commits should get bundled in with of the 3 main commits that's most relevant to the changes.\n1. The timeout bugfix commit should disappear because it's already in main.\n\nIn the meantime, other PRs have been merged, so `main` is quite a few commits down the line from us now. We'd also \nlike our PR to look like we've branched our PR from the latest HEAD of main (`F`), \nrather than the one from a few days ago (`D`).\n\n```text\n(main) $ git log --oneline\n480454e (HEAD -> main) F             <--- We want to have branched from here\nfeb4b05 E\n6e9e937 Fix timeout issues on backend\n4888619 D                            <--- We branched from here\n7e709a9 C\na123a17 B\nbd48e7f A\n```\n\n### git rebase (interactive) to the rescue\n\nIt turns out we can do all of this with one git command:\n\n`git rebase --interactive main`\n\nWhat this command says is \"take all the commits I have made since deviating from `main` (D) and move (or re-base, if \nyou will) the entire branch onto the head of `main` branch. Oh, and let me edit all the commit messages first!\" \n\nOk, let's see what happens when we run this magical command. It actually opens up an editor (vim, in my case) and \ngives me this meta-commit file to edit:\n\n```text\npick dfa1ca7 Add sketelal API for Feature\npick c05ad1a Add import tests\npick 563ee32 WIP Implement add_data\npick e668f3f Complete data ingestion\npick 623e357 Clippy fixes\npick 3a21ec7 Add `delete_record_ method to API\npick 64408c3 Add test for `delete_record`\npick 4bfe58e Implement `delete_record`\npick d328a81 Add edge_case test for `add_data`\npick 6f947fb Add guard for empty record in `add_data`\npick b2985fc Fix error in process_data\npick 0c54146 fixup! Stupid off by one error\npick f735475 Feature complete.\n\n# Rebase 480454e..f735475 onto 480454e (13 commands)\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c <commit> to reword the commit message.\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n```\n\nWhat we have here is\n* Our list of commits, in reverse chronological order.\n* The ability to (`pick`) leave commits as they are.\n* The ability to (`reword`) edit commit messages.\n* The ability to combine (`squash`) commits\n* The ability to _reorder_ commits. (to whit, `These lines can be re-ordered; they are executed from top to bottom.`)\n* The ability to remove commits (`drop`)\n* Or shuffle commits under the rug with the previous commit (`fixup`).\n* And check this: the cherry-picked commit (`6e9e937`) is not even in this list. Git has noticed that the commit is \n  already in `main` and has done task number 3 for us already!\n\nThis is exactly what we need! Ok, after a few seconds of pruning, grafting and weeding (this is why I call it git \nfarming), I have (leaving out the commented instructions this time):\n\n```text\nreword dfa1ca7 Add sketelal API for Feature\nsquash 3a21ec7 Add `delete_record_ method to API\npick c05ad1a Add import tests\nsquash 64408c3 Add test for `delete_record`\nsquash d328a81 Add edge_case test for `add_data`\npick 563ee32 WIP Implement add_data\nsquash e668f3f Complete data ingestion\nfixup 623e357 Clippy fixes\nsquash 4bfe58e Implement `delete_record`\nsquash 6f947fb Add guard for empty record in `add_data`\nfixup b2985fc Fix error in process_data\nfixup 0c54146 fixup! Stupid off by one error\nfixup f735475 Feature complete.\n```\n\nYou'll notice:\n* Several commits have been re-ordered. I've grouped the API definition, test, and implementation commits together.\n* I've also squashed or fixup'd all related commits, keeping commit messages that will be helpful and discarding the \n  useless ones.\n* I also want to fix that typo in `dfa1ca7`, and so will `reword` that message.\n\nSave, quit and let's go!\n\n### Rewording a message\n\nThe first message I need to edit is commit number `dfa1ca7`. All I want to do here is fix the typo in the heading \n(`sketelal` -> `skeletal`) and text (`yest` -> `yet`):\n\n```text\nAdd skeletal API for Feature\n\nNo tests or code yet, just the\n* `add_data` function\n* `process_data` function\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Wed Jun 1 13:10:59 2022 +0100\n#\n# interactive rebase in progress; onto 480454e\n# Last command done (1 command done):\n#    reword dfa1ca7 Add sketelal API for Feature\n# Next commands to do (12 remaining commands):\n#    squash 3a21ec7 Add `delete_record_ method to API\n#    pick c05ad1a Add import tests\n# You are currently editing a commit while rebasing branch 'my_feature' on '480454e'.\n#\n# Changes to be committed:\n#       new file:   api.rs\n#\n```\n\nOnce I save the file and quit vim, the rebase command moves to the next commit in the list, \n`squash 3a21ec7`.\n\n### Squash gems\n\nOnce again, I'm thrown into vim, and presented with a new commit message. Looking carefully, you'll notice that it's \nthe message I've just edited, and the message from when I added the `delete_record` function.\n\n```text\n# This is a combination of 2 commits.\n# This is the 1st commit message:\n\nAdd skeletal API for Feature\n\nNo tests or code yet, just the\n* `add_data` function\n* `process_data` function\n\n# This is the commit message #2:\n\nAdd `delete_record_ method to API\n# This is a combination of 2 commits.\n# This is the 1st commit message:\n\nAdd skeletal API for Feature\n\nNo tests or code yet, just the\n* `add_data` function\n* `process_data` function\n\n# This is the commit message #2:\n\nAdd `delete_record_ method to API\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# interactive rebase in progress; onto 480454e\n# Last commands done (2 commands done):\n#    reword dfa1ca7 Add sketelal API for Feature\n#    squash 3a21ec7 Add `delete_record_ method to API\n# Next commands to do (11 remaining commands):\n#    pick c05ad1a Add import tests\n#    squash 64408c3 Add test for `delete_record`\n# You are currently rebasing branch 'my_feature' on '480454e'.\n#\n# Changes to be committed:\n#       modified:   api.rs\n```\n\nTo make it look like it was my plan all along to define the API with three functions, I'll edit the file like so:\n\n```text\nAdd skeletal API for Feature\n\nNo tests or code yet, just the\n* `add_data` function\n* `process_data` function\n* `delete_record` function\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# interactive rebase in progress; onto 480454e\n# Last commands done (2 commands done):\n#    reword dfa1ca7 Add sketelal API for Feature\n#    squash 3a21ec7 Add `delete_record_ method to API\n# Next commands to do (11 remaining commands):\n#    pick c05ad1a Add import tests\n#    squash 64408c3 Add test for `delete_record`\n# You are currently rebasing branch 'my_feature' on '480454e'.\n#\n# Changes to be committed:\n#       modified:   api.rs\n```\n\nOnce again, save the file, and quit vim to continue rebasing.\n\n### Dealing with conflicts\n\nWhile rebasing, you may encounter merge conflicts. This is something that happens quite frequently when \nrebasing, especially when you're working on \"busy\" parts of the code base, or if you're trying to rebase over many \ncommits. \n\nThese are handled the same way you usually resolve merge commits. Some tips:\n* Use the same tools you usually do for handling merge conflicts. I really like IntelliJ's conflict resolution tools \n  but YMMV.\n* Remember to be careful not to undo other people's code by accident.\n* In some cases, the conflicts are so thorny that it's better to abandon the rebase (`git rebase --abort`) and try \n  clean up your commit message [another way]. But uh, let this be a last resort and not your go-to strategy. Please.\n\nAfter you've fixed the commits, you can continue the rebase with `git rebase --continue`\n\n[another way]: #dealing-with-conflicts \"Save all your commit messages into a text file, then do a `git reset --soft` against HEAD, and copy all of the messages into a single commit message.\"\n\n### More squashes\n\nI squash all the test-based commits together and make it look like one unified commit:\n\n```text\n# This is a combination of 3 commits.\nAdd import tests\n\n* add_data returns Ok(n) returning the number of records when adding\n  data\n* `process_data` returns Ok() on successful processing\n* `delete_data` returns Ok() on a successful delete\n* Calling `add_data` with an empty record returns an error\n\nAll these tests currently fail\n```\n\nAnd do something similar for the implementation:\n\n```text\nImplement API\n\n* add_data ingests data into the store and returns the total number of\nrecords. It returns an error if an empty record is given.\n* `delete_record` deletes a record. It returns `Ok()` if successful.\n```\n\n### Fixups\n\nThe last few commits are all fixups. You'll notice that you still an opportunity to edit the commit message, but the \nirrelevant comments in the \"fixup\" commits are already commented out:\n\n```text\n# This is a combination of 2 commits.\n# This is the 1st commit message:\n\nImplement API\n\n* add_data ingests data into the store and returns the total number of\nrecords. It returns an error if an empty record is given.\n* `delete_record` deletes a record. It returns `Ok()` if successful.\n\n# The commit message #2 will be skipped:\n\n# Clippy fixes\n#\n# Functional programming FtW\n```\n\nThere are no changes to make here, so just save and quit.\n\nThis time, the rebasing runs to completion:\n\n```text\n$ git rebase --continue \nSuccessfully rebased and updated refs/heads/my_feature.\n```\n\n### Basking in our victory\n\nLet's have a look at the git message history now shall we?\n\nSummary first:\n\n```text\n (my_feature)$ git log --oneline \n263e262 (HEAD -> my_feature) Implement API\n06e46db Add import tests\naec77c7 Add skeletal API for Feature\n480454e (main) F\nfeb4b05 E\n6e9e937 Fix timeout issues on backend\n4888619 D\n7e709a9 C\na123a17 B\nbd48e7f A\n```\n\nNice, isn't it? We've branched off from `F` and not `D`; And there are just three commits, nicely contextualised, \nthat will make it really easy for reviewers to divide and conquer our code during the PR review process.\n\nLet's see what those commit messages actually look like:\n\n```text\n$ git log -n 4\ncommit 263e262d68d6d9f98f24c4c7dc3a447f3f295b14 (HEAD -> my_feature)\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 13:16:33 2022 +0100\n\n    Implement API\n    \n    * add_data ingests data into the store and returns the total number of\n    records. It returns an error if an empty record is given.\n    * `delete_record` deletes a record. It returns `Ok()` if successful.\n\ncommit 06e46dba28bc6baf40cdc002a8cbd49494b64668\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 15:38:56 2022 +0100\n\n    Add import tests\n    \n    * add_data returns Ok(n) returning the number of records when adding\n      data\n    * `process_data` returns Ok() on successful processing\n    * `delete_data` returns Ok() on a successful delete\n    * Calling `add_data` with an empty record returns an error\n    \n    All these tests currently fail\n\ncommit aec77c7371f7fb79102005128f2d65f9bd71b0b6\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 13:10:59 2022 +0100\n\n    Add skeletal API for Feature\n    \n    No tests or code yet, just the\n    * `add_data` function\n    * `process_data` function\n    * `delete_record` function\n\ncommit 480454eff9580d50189e37b21b666eec3eeb03b6 (main)\nAuthor: CjS77 <CjS77@users.noreply.github.com>\nDate:   Wed Jun 1 15:02:38 2022 +0100\n\n    F\n```\n\n_He he_. It looks like I'm a coding virtuoso.\n\n## What's this all for?\n\nIt clearly takes a fair amount of effort to farm the git commit messages like this. So why bother?\n\nIt helps the code reviewers. Simple as that. And the easier we make life for people reviewing our code, the more \nlikely they are to\n\n* understand our decision-making process, and make reasoned rebuttals rather than knee-jerk ones.\n* Know where to look for bugs\n* Give us that coveted `+1` and get us one step closer to having our PR hit production. \n\n[discord server]: https://discord.gg/q3Sfzb8S2V\n[libera.chat]: https://libera.chat\n[telegram]: https://t.me/tariproject\n",
        "title": "Git farming",
        "date": "2022-05-31T00:00:00.000Z",
        "excerpt": "When contributing new code to open source projects, communicating why the change should be made is almost as  important as the code itself. The bigger the PR, the truer this becomes. In this post,...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-05-17-update-77",
        "content": "\n![P2P chess!](/assets/img/posts/chess.jpeg)\n\n\nSomething a little different this week. While development effort has been focused on planning and implementation of \nthe [digital asset layer], the Tari development community has been thinking about some interesting use-cases for \ne2e-encrypted messaging routed on the Tari DHT network. \n\nThe _raison d'être_ of the network routing/messaging feature is to allow wallets to complete _Mimblewimble_ transactions\nwithout requiring both participants to be online at the same time. To briefly explain how this works, a wallet broadcasts \nsome encrypted payload to the network addressed to some other network address. That message is routed within the Tari\nnetwork until either the destination is reached or, failing that, is kept by neighbours and handed over when destination \nwallet comes online.\n\nThat's all pretty nifty, but can this only be used for sending _Mimblewimble_ transactions? As you may have guessed, the \nanswer to that is no. In fact, the routing and storing nodes can't really tell the difference between transaction messages \nand any other message sent on the network. This \"store-and-forward\" functionality, allows a number of interesting use-cases \nnormally reserved for centralized servers.\n\n## Checkmate!\n\nAs an experiment, one of the development contributors decided to implement a toy multiplayer chess game in Rust \nwhere the game participants never directly connect to each other -- all communication is routed through the Tari network.\nIf your opponent is offline, they will receive your move when they are next online.\n\nYou can check it out on [github](https://github.com/sdbondi/p2p-chess/releases).\n\n[digital assets layer]: https://rfc.tari.com/RFC-0312_DANHighLevelSpecification.html\n\n## Hack on the future of Digital Assets @ Tari\n\nAs always, come join us to chat about ongoing development in the `dev` channel on our [Discord server], or on IRC in the `#tari-dev` channel on the [Libera.Chat] IRC network.\n\n[discord server]: https://discord.gg/tari\n[libera.chat]: https://libera.chat\n[telegram]: https://t.me/tariproject\n",
        "title": "A Tari Game of Chess",
        "date": "2022-05-17T00:00:00.000Z",
        "excerpt": "!P2P chess! Something a little different this week. While development effort has been focused on planning and implementation of  the [digital asset layer], the Tari development community has been...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-05-10-update-76",
        "content": "\n## Tari v0.32.0 Released\n\nThe main change in v0.32.0 is the reworked configuration system. Most users won't be aware of any changes, but now any spelling errors or invalid configuration settings will be picked up. Previously, any configuration settings would need to be mapped in code which meant that if a setting was never mapped, changing it in the config file would have no effect. More importantly, you'd have no indication of whether it was being used or if you'd even spelled it correctly. \n\nIf you are already running a Tari node, the easiest will be to delete the `.tari` folder and use the config file that is generated on startup. If you'd like to keep your settings, let us know on [Discord](https://discord.gg/tari) and we'll help you migrate it.\n\n### All Changes since v0.31.1\n\n### Features\n\n* allow network to be set by TARI_NETWORK env var ([#4073](https://github.com/tari-project/tari/issues/4073)) ([c27be5c](https://github.com/tari-project/tari/commit/c27be5cdf132c9c4f3a2806c070be1765b41fa61))\n* **collectibles:** add list assets command ([#3908](https://github.com/tari-project/tari/issues/3908)) ([5b726a6](https://github.com/tari-project/tari/commit/5b726a6bc47bc2024ae743a772b67c17dee4f988))\n* **merge mining proxy:** check achieved Monero difficulty before submitting to Tari basenode ([#4019](https://github.com/tari-project/tari/issues/4019)) ([b09fa76](https://github.com/tari-project/tari/commit/b09fa768e2538c2dfdaaee73cb31353b78c03ba3))\n* **p2p:** adds tor.forward_address setting ([#4070](https://github.com/tari-project/tari/issues/4070)) ([8c78717](https://github.com/tari-project/tari/commit/8c7871761e8fb604092f462a4e8e76fa2a103b7a))\n* **tari_explorer:** add total hashrate chart ([#4054](https://github.com/tari-project/tari/issues/4054)) ([9e0ec36](https://github.com/tari-project/tari/commit/9e0ec361f5da8b9fff3a95c1a8ec162dfef6601a))\n\n\n### Bug Fixes\n\n* add Environment cfg source and remove --create-id ([#4018](https://github.com/tari-project/tari/issues/4018)) ([e59e657](https://github.com/tari-project/tari/commit/e59e6577a98e927d6123b704077425e7807d2b60))\n* **base-node:** assign correct base dir to tor identity ([#4081](https://github.com/tari-project/tari/issues/4081)) ([1464f8b](https://github.com/tari-project/tari/commit/1464f8b43fe3fd76faebfc556cec82e574e79deb))\n* **dht:** saf storage uses constructs correct msg hash ([#4003](https://github.com/tari-project/tari/issues/4003)) ([e1e7669](https://github.com/tari-project/tari/commit/e1e7669f629ad8dd1c5a65106dff4de96d60fdab))\n* **dht:** sets file default for DHT db ([#4030](https://github.com/tari-project/tari/issues/4030)) ([5b125e7](https://github.com/tari-project/tari/commit/5b125e702b9f6da79b0a4f8922dc002078470e46))\n* **dns-seeds:** use correct cloudflare resolver default ([#4029](https://github.com/tari-project/tari/issues/4029)) ([c95e589](https://github.com/tari-project/tari/commit/c95e58963aa5bdd123d83e373dd0197adfda38e5))\n* fix github integration tests ([#4008](https://github.com/tari-project/tari/issues/4008)) ([aa143c6](https://github.com/tari-project/tari/commit/aa143c6ae4b2b5e16924e353aafb1d3f75339228))\n* github actions ([#4014](https://github.com/tari-project/tari/issues/4014)) ([a03392e](https://github.com/tari-project/tari/commit/a03392e4d79475a2602a8e3e64a68d34cf6327a5))\n* ignore test that timeout in github action ([#4010](https://github.com/tari-project/tari/issues/4010)) ([6c5471e](https://github.com/tari-project/tari/commit/6c5471ed1a05b89bd451ff52007a07958ecd781a))\n* **key-manager:** remove floating point math from mnemonic code ([#4064](https://github.com/tari-project/tari/issues/4064)) ([c2d60b3](https://github.com/tari-project/tari/commit/c2d60b363e87a244ade83b29359d88c6a56c377d))\n* launchpad build docker images ([#4042](https://github.com/tari-project/tari/issues/4042)) ([50e2812](https://github.com/tari-project/tari/commit/50e281287f3456f50f64b10d0d6c4979f3cd472b))\n* **launchpad:** fix config presets ([#4028](https://github.com/tari-project/tari/issues/4028)) ([1b8b274](https://github.com/tari-project/tari/commit/1b8b274786bdf759fca70b8293860c2c41cd5e31))\n* long running and non critical github action ([#4009](https://github.com/tari-project/tari/issues/4009)) ([3b8cb8b](https://github.com/tari-project/tari/commit/3b8cb8ba237028fe848b7ee3771f91f729c26cd6))\n* makes header consensus encoding infallible ([#4045](https://github.com/tari-project/tari/issues/4045)) ([5ebf129](https://github.com/tari-project/tari/commit/5ebf129119761484a8aac323c5b6d8e32649beac))\n* only count base nodes in peers count in base node status ([#4039](https://github.com/tari-project/tari/issues/4039)) ([190d75a](https://github.com/tari-project/tari/commit/190d75ae4f4db65aa0d4622e21daa2cfc85b378d))\n* prevent seed peer address from being overwritten unless newer ([#4085](https://github.com/tari-project/tari/issues/4085)) ([59b76c3](https://github.com/tari-project/tari/commit/59b76c32b225d74d59817521c2c8c18bdca926bb))\n* support safe non-interactive mode ([#4072](https://github.com/tari-project/tari/issues/4072)) ([b34f79d](https://github.com/tari-project/tari/commit/b34f79d4ff4e73ab2574658eedea082573803330))\n* test_output_manager_sqlite_db(_encrypted) ([#4025](https://github.com/tari-project/tari/issues/4025)) ([7a6f980](https://github.com/tari-project/tari/commit/7a6f9809ac59151c4b7c170dc43d46e7a8c68331))\n* update daily test configuration ([#4049](https://github.com/tari-project/tari/issues/4049)) ([b15d682](https://github.com/tari-project/tari/commit/b15d682cd6675527e49aefdbbf6f0f0137571d76))\n* **wallet:** do not prompt for password if given in config ([#4040](https://github.com/tari-project/tari/issues/4040)) ([fc1aa65](https://github.com/tari-project/tari/commit/fc1aa650e985bce4166ceb226fa2880d48ec5021))\n* **wallet:** ensure block hash exists ([#4083](https://github.com/tari-project/tari/issues/4083)) ([a258984](https://github.com/tari-project/tari/commit/a258984154e5e84ffaf9f61b73a59e263650443a))\n* weird behaviour of dates in base node banned peers ([#4037](https://github.com/tari-project/tari/issues/4037)) ([7097185](https://github.com/tari-project/tari/commit/7097185c7f52161edd6aa7ddec7f4ab47449795f))\n\n",
        "title": "Tari v0.32.0 Released",
        "date": "2022-05-10T00:00:00.000Z",
        "excerpt": "Tari v0.32.0 Released The main change in v0.32.0 is the reworked configuration system. Most users won't be aware of any changes, but now any spelling errors or invalid configuration settings will be...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-03-30-update-75",
        "content": "\n## Dibbler Testnet Hard Forked at block #23000\n\nLast week on Thursday the 24th of March, the planned hard fork on the Tari Testnet occurred at [Block #23000] at 08:08:24 UTC.\n\n[block #23000]: https://textexplore.tari.com/blocks/23000\n\nPreviously, network forking changes coincided with full resets of the Testnet.\nIn preparation for Mainnet, the Tari development community released the changes as a required software upgrade.\nThis means that base nodes running a version prior to `v0.30.0` are unable to validate blocks created by upgraded miners, forking the network.\nOutputs and transactions from previous versions are still valid, so existing wallets should be unaffected by the change.\n\nLet's take a closer look at the breaking change.\n\n### Header hash method updated to use consensus encoding\n\nConsensus Encoding is a well-defined specification appropriate for use in consensus critical serialization and encoding.\nThe new `ConsensusEncoding` implementations in Tari are fairly simple and auditable, with byte-for-byte control of the encoding, and, importantly, have only one way to represent a given object as bytes.\nThis means that the serialized bytes are appropriate for use in cryptographic primitives like hashes and signature challenges.\n\nThe previous method relied on the [bincode] library for the final byte encoding, which is not appropriate for consensus [for a few reasons].\nPull request [#3820] updated the header hashing method to use `ConsensusEncoding`, which serves as a formal specification and reusable component for other implementations to use.\n\n[for a few reasons]: https://github.com/tari-project/tari-dot-com/pull/115#discussion_r838152359\n[bincode]: https://github.com/bincode-org/bincode\n[#3820]: https://github.com/tari-project/tari/pull/3820\n\n## Results\n\nThe hard fork rolled out relatively smoothly, since a majority of the network was running the upgraded software.\n\nOne issue was uncovered, where a base node might get stuck trying to sync from an un-upgraded node.\nUpon reaching the fork, the newer node would correctly not validate the old fork where the hash method changed, but incorrectly did not ban the older node.\nThis was fixed in [#3955] by banning the node that failed to use the new header hashing method where required.\n\n[#3955]: https://github.com/tari-project/tari/pull/3955\n\n### Tari v0.30.1 Released\n\nA new patch version of the Tari software is [now available].\n\n[now available]: https://www.tari.com/downloads/\n\n### Bug Fixes\n\n- Launch the watch command on start ([#3924](https://github.com/tari-project/tari/pull/3924))\n- Correct main path for wallet rpc client ([#3934](https://github.com/tari-project/tari/pull/3934))\n- Tor identity private key needs to be serialized ([#3946](https://github.com/tari-project/tari/pull/3946))\n- Ensure that identity sig is stored on startup ([#3951](https://github.com/tari-project/tari/pull/3951))\n- Bug in block timing grpc method ([#3926](https://github.com/tari-project/tari/pull/3926))\n- Fix Tor ID deserialization issue ([#3950](https://github.com/tari-project/tari/pull/3950))\n- Ban peer if sending invalid prev_header ([#3955](https://github.com/tari-project/tari/pull/3955))\n- Adds extra checks for sync stream termination ([#3927](https://github.com/tari-project/tari/pull/3927))\n- Disable SAF auto requests ([#3919](https://github.com/tari-project/tari/pull/3919))\n- Fix handling of creating faux transaction for recovered outputs ([#3959](https://github.com/tari-project/tari/pull/3959))\n- Fix ffi import external utxo from faucet ([#3956](https://github.com/tari-project/tari/pull/3956))\n\n### Features\n\n- Add mmr check to reconstructed block and mempool validation for unique excess signature ([#3930](https://github.com/tari-project/tari/pull/3930))\n- Add UTXO set size to base node metrics ([#3932](https://github.com/tari-project/tari/pull/3932))\n- Listen to terminal events in the watch mode ([#3931](https://github.com/tari-project/tari/pull/3931))\n- Script to produce coverage report for wallet ([#3938](https://github.com/tari-project/tari/pull/3938))\n- Monitor and display warning for min ratio for TCPv4 nodes ([#3953](https://github.com/tari-project/tari/pull/3953))\n- Gracefully handle recovering a duplicate output in LibWallet ([#3903](https://github.com/tari-project/tari/pull/3903))\n\n### Other\n\n- Add docstring to merge mining proxy ([#3947](https://github.com/tari-project/tari/pull/3947))\n- Fix doctests ([#3962](https://github.com/tari-project/tari/pull/3962))\n- Hide private values in debug and serialize ([#3905](https://github.com/tari-project/tari/pull/3905))\n- Bump nanoid from 3.1.30 to 3.3.1 in /applications/tari_web_extension ([#3937](https://github.com/tari-project/tari/pull/3937))\n- Make HashWriter API more ergonomic and similar to Digest ([#3948](https://github.com/tari-project/tari/pull/3948))\n- Take out \"TODO: remove\" for message tag ([#3954](https://github.com/tari-project/tari/pull/3954))\n- Bump ansi-regex in /applications/tari_explorer ([#3967](https://github.com/tari-project/tari/pull/3967))\n- Improve ergonomics of error to RPC status ([#3949](https://github.com/tari-project/tari/pull/3949))\n- Reinstate inputs_not_mallaeble test ([#3935](https://github.com/tari-project/tari/pull/3935))\n- Add auto labeler for clippy ([#3922](https://github.com/tari-project/tari/pull/3922))\n- Add create release to libwallet build ([#3941](https://github.com/tari-project/tari/pull/3941))\n- Add docker image builds for launchpad ([#3966](https://github.com/tari-project/tari/pull/3966))\n",
        "title": "Testnet Hard Fork Report",
        "date": "2022-03-30T00:00:00.000Z",
        "excerpt": "Dibbler Testnet Hard Forked at block #23000 Last week on Thursday the 24th of March, the planned hard fork on the Tari Testnet occurred at [Block #23000] at 08:08:24 UTC. [block #23000]:...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-03-24-update-74",
        "content": "\nThe following notable pull requests were merged into development this week:\n\n\n### Monitor and display warning for min ratio for TCPv4 nodes ([#3953](https://github.com/tari-project/tari/issues/3953))\n\nEvery base node has it's own public key and address, which is either an IPv4 address or Tor hidden service onion address. Onion addresses are essentially costless to create and advertise, so a malicious user can create\nmany different nodes very quickly, quicker than an honest base node could ban them. IP addresses are not as easy to acquire and there's a limited number of them.\n\nFor now, this is only a warning. In future, Tari may add minimum restrictions on how many IP4 peers it keeps.\n\n### Add UTXO set size to base node metrics ([#3932](https://github.com/tari-project/tari/issues/3932))\n\nThe Tari base node exposes a number of metrics which can be used to create dashboards in [Grafana] with [Prometheus].\n\nTo enable the metric, run the base node with the following:\n\n`tari_base_node --metrics-bind-addr 127.0.0.1:1234`\n\nWhere `127.0.0.1:1234` is your [Prometheus] instance.\n\n#### Other notable changes merged: \n\n#### Features\n\n* Add MMR check to reconstructed block and mempool validation for unique excess signature ([#3930](https://github.com/tari-project/tari/issues/3930)) ([b8f9db5](https://github.com/tari-project/tari/commit/b8f9db50e3bca2e1c4364929cebca1c6a3485956))\n* **DHT:** monitor and display warning for min ratio for TCPv4 nodes ([#3953](https://github.com/tari-project/tari/issues/3953)) ([c4070ff](https://github.com/tari-project/tari/commit/c4070ffb1b90ac6f6d37394bfa74b8699f366303))\n* Listen to terminal events in watch mode ([#3931](https://github.com/tari-project/tari/issues/3931)) ([869abd3](https://github.com/tari-project/tari/commit/869abd3ad1453616c0f1d755611bd9a53ccd8e2f))\n* **Metrics:** add UTXO set size to base node metrics ([#3932](https://github.com/tari-project/tari/issues/3932)) ([08ecabc](https://github.com/tari-project/tari/commit/08ecabc4559cb9968232b7b4021994e7d88dff31))\n* Script to produce coverage report for wallet ([#3938](https://github.com/tari-project/tari/issues/3938)) ([48eb86e](https://github.com/tari-project/tari/commit/48eb86effaaa5823c5a6ea4589a3c471784f3c38))\n\n\n#### Bug Fixes\n\n* Bug in block timing gRPC method ([#3926](https://github.com/tari-project/tari/issues/3926)) ([1c7adc0](https://github.com/tari-project/tari/commit/1c7adc0e71c8e03b192b1eab3010941989d207a2))\n* Correct main path for wallet RPC client ([#3934](https://github.com/tari-project/tari/issues/3934)) ([b36295c](https://github.com/tari-project/tari/commit/b36295c7c08541f3bed7d38d29bcb95b7c7eeba0))\n* Fix Tor ID deserialization issue ([#3950](https://github.com/tari-project/tari/issues/3950)) ([c290ab9](https://github.com/tari-project/tari/commit/c290ab974406c5c7d787e2220bcc7d8ea11909a6))\n* Launch the watch command on start ([#3924](https://github.com/tari-project/tari/issues/3924)) ([7145201](https://github.com/tari-project/tari/commit/71452013493a9ce87ce8ee20621a08ebe7d03391))\n* **Sync:** ban peer if sending an invalid prev_header ([#3955](https://github.com/tari-project/tari/issues/3955)) ([384ab0c](https://github.com/tari-project/tari/commit/384ab0ceddd25b5b31722fe639229c0ecf554926))\n* **Wallet:** ensure that identity sig is stored on startup ([#3951](https://github.com/tari-project/tari/issues/3951)) ([b8d08ed](https://github.com/tari-project/tari/commit/b8d08ed17c23d74b7309867cafd128c136555f82))\n* **Wallet:** tor identity private key needs to be serialized ([#3946](https://github.com/tari-project/tari/issues/3946)) ([a68614e](https://github.com/tari-project/tari/commit/a68614e55313270b8a22a68a4cc802780030cfca))\n\n[Prometheus]: https://prometheus.io/\n[Grafana]: https://grafana.com/",
        "title": "This week in Tari Development",
        "date": "2022-03-24T00:00:00.000Z",
        "excerpt": "The following notable pull requests were merged into development this week: Monitor and display warning for min ratio for TCPv4 nodes (#3953) Every base node has it's own public key and address,...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-03-17-update-73",
        "content": "\n### Tari v0.30.0 Released\n\nA new version of the Tari applications has been released. The release notes are provided at the end of this post, but the most exciting \nchanges are related to the hard fork test.\n\n\n### Testnet Hard Fork at 23000\n\nWe'll be testing a hard fork on Dibbler testnet at block 23000. That's likely to happen in the next 2 to 3 days, and you'll want to make sure you are running version 0.30.0 or higher of your \nbase node before then. With the previous network breaking changes, it was easier and more efficient \nto reset the network, but now that the code is more stable, it's time to test an actual hard fork as it would happen in a mainnet.\n\n#### What is a hard fork?\nBlocks and transactions are versioned as their structure changes, for example, when new features are added. Nodes running the newer code will understand new versions and see them as valid, whereas nodes running older software will reject them. In this case, there will be a split in the network. If the majority of nodes are running the new code, the hard fork will succeed. If not, the older code will be the stronger chain, and the hard fork will be rejected. \nIn a mainnet scenario, there is usually more notice given before a hard fork, but for Tari's testnet, we may want to run a few of these tests.\n\n\n### Changes since v0.28.1\n\n### Features\n\n* add committee management utxo ([#3835](https://github.com/tari-project/tari/issues/3835)) ([50fe421](https://github.com/tari-project/tari/commit/50fe421412b795dc69a46b75b65a1fb3834754e4))\n* add contacts liveness service to base layer wallet ([#3857](https://github.com/tari-project/tari/issues/3857)) ([0d96ea3](https://github.com/tari-project/tari/commit/0d96ea3ff96b3a1b7561a77e337a51165df820a2))\n* add contacts status to tui ([#3868](https://github.com/tari-project/tari/issues/3868)) ([30bf86b](https://github.com/tari-project/tari/commit/30bf86bd89976b8411c64fcbf2993f32fc419272))\n* add liveness call to wallet GRPC ([#3854](https://github.com/tari-project/tari/issues/3854)) ([9ab832a](https://github.com/tari-project/tari/commit/9ab832a5d739cbc6822436c8965d18130343064b))\n* add logging of cancelled outputs when transaction is rejected ([#3863](https://github.com/tari-project/tari/issues/3863)) ([d28703d](https://github.com/tari-project/tari/commit/d28703dd00addaec00ad151c68e831b15b1fd0fa))\n* add recovery byte to output features ([#3727](https://github.com/tari-project/tari/issues/3727)) ([c9985de](https://github.com/tari-project/tari/commit/c9985dea859ba19a823e65258867486e812c2ef7))\n* add support for make-it-rain command ([#3830](https://github.com/tari-project/tari/issues/3830)) ([0322402](https://github.com/tari-project/tari/commit/032240242341109e5407e8fdfd8eae77be49ece9))\n* add support for specifying custom messages for scanned outputs in libwallet ([#3871](https://github.com/tari-project/tari/issues/3871)) ([0d7f8fc](https://github.com/tari-project/tari/commit/0d7f8fccf33a4beabf16efbc6bdd32383937edb2))\n* adds get-mempool-tx command ([#3841](https://github.com/tari-project/tari/issues/3841)) ([a49b1af](https://github.com/tari-project/tari/commit/a49b1af215ef7445111bf64a1301cf08d3e88bf4))\n* **base-node:** allow status line interval to be configured ([#3852](https://github.com/tari-project/tari/issues/3852)) ([427463d](https://github.com/tari-project/tari/commit/427463d07275b8375a7e11cb992876b1f986b637))\n* **collectibles:** add basic window menu items ([#3847](https://github.com/tari-project/tari/issues/3847)) ([c8ebe5b](https://github.com/tari-project/tari/commit/c8ebe5b4db4c0a6e4dfe10ae3cfc5cd7fbd97835))\n* **dht:** convenience function for DHT to discover then connect ([#3840](https://github.com/tari-project/tari/issues/3840)) ([da59c85](https://github.com/tari-project/tari/commit/da59c8540897864e9e7cd2c698288d9d8d186100))\n* update committee selection from collectibles ([#3872](https://github.com/tari-project/tari/issues/3872)) ([daf140d](https://github.com/tari-project/tari/commit/daf140d894b86d64b1213e0d6976892013219004))\n* update console wallet notifications ([e3e8b3d](https://github.com/tari-project/tari/commit/e3e8b3d284ee6ec4d938503d9278434ed66c0f95))\n* update FFI client user agent string ([4a6df68](https://github.com/tari-project/tari/commit/4a6df68081d6d4be1d125c4b3484204058185a2a))\n* **validator-node:** committee proposes genesis block w/ instructions ([#3844](https://github.com/tari-project/tari/issues/3844)) ([68a9f76](https://github.com/tari-project/tari/commit/68a9f76c9f23c85b45ce8a7d5aa329d4bbe4d9a5))\n\n\n### Bug Fixes\n\n* add bound for number of console_wallet notifications ([033db2a](https://github.com/tari-project/tari/commit/033db2a393717f061458d8e281adbfa7155870bf))\n* **block-sync:** use avg latency to determine slow sync peer for block sync ([#3912](https://github.com/tari-project/tari/issues/3912)) ([f091c25](https://github.com/tari-project/tari/commit/f091c25bca01c3d2fcc2df3f9108db307d8e9f39))\n* **core:** correctly filter pruned sync peers for block sync ([#3902](https://github.com/tari-project/tari/issues/3902)) ([bfdfce6](https://github.com/tari-project/tari/commit/bfdfce6662521be041ebb54c8e645384a074e2ac))\n* **dht:** use blocking tasks for db calls ([1832416](https://github.com/tari-project/tari/commit/18324164fd7d6f9cb30a78748372f29a31998d07))\n* fix flakey `test_coinbase_abandoned` integration test ([#3866](https://github.com/tari-project/tari/issues/3866)) ([ab52f5e](https://github.com/tari-project/tari/commit/ab52f5e964e9e045063702e378dc186b50d52a9d))\n* fix merge mining proxy pool mining ([#3814](https://github.com/tari-project/tari/issues/3814)) ([407160c](https://github.com/tari-project/tari/commit/407160cf68f604ae89cba8b54020a90364621e12))\n* improve sha3 pool mining ([#3846](https://github.com/tari-project/tari/issues/3846)) ([be75c74](https://github.com/tari-project/tari/commit/be75c74ed291833cd90ebd5f849929846a10633f))\n* remove critical tag from flaky cucumber test ([#3865](https://github.com/tari-project/tari/issues/3865)) ([64b72de](https://github.com/tari-project/tari/commit/64b72de7761fdd4cc1d5ba1f744e845eb69a1496))\n* update metadata size calculation to use FixedSet.iter() ([dbbe095](https://github.com/tari-project/tari/commit/dbbe095b461d4a93549d4cf87faf841dabf74ad0))\n* update wallet logging config ([7675e75](https://github.com/tari-project/tari/commit/7675e7586be313a90ba214849a1df2bfa3e96d72))\n* **validator-node:** fix consensus stall after genesis ([#3855](https://github.com/tari-project/tari/issues/3855)) ([64efeff](https://github.com/tari-project/tari/commit/64efeffc2bcd4cfa320280c7bee093bb7f1c57fe))\n* **wallet:** minor wording fix on transactions tab ([#3853](https://github.com/tari-project/tari/issues/3853)) ([fd32bc9](https://github.com/tari-project/tari/commit/fd32bc9251838440d8663d7da112fcb85689838b))\n",
        "title": "Testnet Hard Fork Coming Up",
        "date": "2022-03-17T00:00:00.000Z",
        "excerpt": "Tari v0.30.0 Released A new version of the Tari applications has been released. The release notes are provided at the end of this post, but the most exciting  changes are related to the hard fork...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-02-16-update-72",
        "content": "\nThe Tari team has been hard at work on both the wallet and functionality required to run the second layer network.\n\n### Digital Assets Layer\n\nThe Tari Digital Assets Network ([DAN]) is going to consist of many independent sidechains managed by separate\ncommittees of validator nodes ([VN])s. Initially, the [Asset Issuer] would specify the committee members' public keys \nfor their asset in the Asset Registration UTXO. However, we want to be able to add or remove committee members\nduring the ongoing lifetime of a given asset. This week the team has been working on adding a new output type dedicated\nto managing the membership of the committee that oversees a given asset. The [Asset Issuer], who owns that asset, creates\nthe first of these Committee Definition outputs when they initially register the asset on the base layer. After that point\nthe Asset Issuer can spend this UTXO to a new Committee Definition output to make changes to the membership of the\ncommittee.\n\n\nAnother aspect of the second layer that we have been working on this week is the RPC interface to download the state\nassociated with a given asset. This interface would be used by new members of a [VN] committee who need to acquire the\ncurrent state of the asset before they can validate instructions performed on the asset. It would also be used by users \nwho would like to construct a proof related to the state of an asset at a given time. A user could use this interface \nto produce a compact Merkle Proof that they owned a specific asset with a given state at a particular point in time.\n\n### Wallet\n\nOn the LibWallet backend and Console Wallet side of the project, the team is currently expanding the wallet's ability to \nmanage a set of contacts on the Tari network. The wallet can currently associate a network public key with an alias and \naccess this list of contacts on the Send tab of the console wallet or Aurora. We have given the contacts their own tab\nof the console wallet and are introducing the ability to track whether your contacts are currently online or not.\nThis feature represents the beginnings of adding more advanced chat functionality to our wallets.\n\n[DAN]: https://rfc.tari.com/RFC-0300_DAN.html\n[VN]: https://rfc.tari.com/RFC-0302_ValidatorNodes.html\n[Asset Issuer]: https://rfc.tari.com/Glossary.html#asset-issuer",
        "title": "What's cooking this week at Tari",
        "date": "2022-02-16T00:00:00.000Z",
        "excerpt": "The Tari team has been hard at work on both the wallet and functionality required to run the second layer network. Digital Assets Layer The Tari Digital Assets Network ([DAN]) is going to consist of...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-02-03-update-71",
        "content": "\nLet's take a closer look at another new feature added with the recent _dibbler_ testnet release.\n\n### New Compact Block Propagation\n\nWith the release of _dibbler_ testnet comes a more efficient block propagation protocol that leverages the high likelihood that\na base node receiving a new block already has all or the majority of the transaction data in its mempool.\n\n#### Out with the old...\n\nIt is instructive to briefly understand how the previous protocol worked and some inefficiencies that the new protocol\naddresses. The process begins when a miner finds a new block. The hash for the block is calculated and transmitted to every connected\npeer. Each peer receiving this unrecognised block hash must request the full block of up to ~2mb from the peer that sent it. Once the \nfull block is received, it is validated and the same block hash re-propagated to other peers.\n\nAlthough this protocol is nice and simple, it has a number of drawbacks:\n\n- The base node has no way to validate the block being transmitted, the hash could just be a bunch of random bytes!\n- The base node transmitting the block hash may suddenly be inundated with requests for the block from many peers, creating delays and timeouts.\n- The <abbr title=\"Round Trip Time\">RTT</abbr> for messages can be as much as a few seconds on connections with poor latency (e.g. tor).\n- A base node likely already has all the required transactions in its mempool, but has no way to reconcile them with the new block.\n\n#### ... and in with the new.\n\nTo address these drawbacks, a new compact block message containing the minimum information required to assemble a full block \nis propagated to all peers. It is important that this message is kept as small as possible as this message is transmitted and \nreceived multiple times for each base node on the network.\n\nThis compact block contains:\n- a block header,\n- a coinbase transaction,\n- and a list of transaction kernel excess signatures. \n\nFor a block fully loaded with transactions, this message comes to roughly 65Kb.\n\nThe base node fills its block with transactions matching the excess signatures from its mempool. If there are any missing transactions,\nthey are requested from the peer and added to the block. In most cases, this won't be necessary.\n\nThe block is validated and added to the blockchain - profit!.\n\nSome points to note are:\n- the base node can immediately validate that the <abbr title=\"Proof of Work\">PoW</abbr> is valid from the block header.\n- in the majority of cases, there is no need to ask the sending peer for any additional data, removing back-and-forth communication and\n  effectively cutting the time taken before a base node can begin validating the block by two thirds.\n- if a peer is missing any transactions, the transactions it requested as part of the protocol are stored in the published transaction \n  mempool for the next peer to request, if required.\n\n",
        "title": "Compact Block Propagation",
        "date": "2022-02-03T00:00:00.000Z",
        "excerpt": "Let's take a closer look at another new feature added with the recent dibbler testnet release. New Compact Block Propagation With the release of dibbler testnet comes a more efficient block...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-01-28-update-70",
        "content": "\nThis week the Tari development community rolled out the newest iteration of the Tari testnet. It is lovingly named [Dibbler], and brings a host of upgrades.\n\nThere is also incredible and exclusive [new swag] in the TTL store. Check out the new [mining tutorials] to earn yours!\n\nIn the 6 months since Weatherwax launched in July 2021, the [Tari codebase] has seen a tremendous amount of work: 14 Contributors submitted 649 PRs consisting of new features, new applications, bug fixes, tests and other changes.\n\nLet's take a look at some of the most important enhancements.\n\n<img src=\"https://media3.giphy.com/media/a8GOUGGMCOSIM/giphy.gif?cid=790b76118ee8d75a5752df26277d14888d8f633dc776efb3&rid=giphy.gif&ct=g\" width=\"480\" height=\"320\">\n\n### Asset Registration\n\nThe structure of transaction outputs has been upgraded to enable non-fungible tokens. These outputs will register asset and token classes on the base layer, defining their metadata and validator committees.\n\nThese changes also enable the asset checkpoint functionality that will be used to record the periodic state of assets in all layer 2 sidechains.\n\nThe features are still an early proof-of-concept and will be improved and streamlined over the next several releases.\n### Covenants\n\nCovenants are a critical part of the digital asset picture. They allow the creator of an output to specify rules that will be kept and applied to outputs created from spending it. This enables functionality like ongoing royalties on asset sales and transfers.\n\n### New Emission Curve\n\nDibbler also comes complete with a new emission curve! This means the size of coinbase payouts are about 3x as much as they were in the previous testnet with a Monero-like schedule and tail emission. The base emission is [21 billion testnet Tari]. The tail emission has been set to 800 Tari, which works out to roughly 1% inflation after the initial supply has been mined.\n\n### Validator Node\n\nOne of the new applications released in Dibbler, the committees of validator nodes will take on consensus duties in the various asset side-chains. They enable assets to be sold and transferred on the second layer, while committing their state periodically back to the Tari blockchain. Validator node is still a work in progress, with a lot more layer 2 goodies coming soon.\n\n### Collectibles\n\nAnother new application is Tari Collectibles. This is a cross-platform desktop application that will allow Asset Issuers to register their new assets and tokens, and mint NFTs on their asset sidechains.\n\n### Aurora Yat Integration\n\nLast but certainly not least, Tari [Aurora] has been polished up and now supports native [Yat] integration! This makes it even easier to send and receive Tari when you link up your Yat to your Aurora wallet. Check out the other [updates] in `v0.10` now!\n\n[dibbler]: https://discworld.fandom.com/wiki/Cut-Me-Own-Throat_Dibbler\n[tari codebase]: https://github.com/tari-project/tari\n[mining tutorials]: {% link _updates/2022-01-24-update-69.md %}\n[new swag]: https://store.tarilabs.com\n[21 billion testnet Tari]: https://github.com/tari-project/tari/pull/3744/files#diff-ae80bdd3829687321f5f4ead11265f6e22a3a931ddf0001a1b4065a7d9c19e18R319\n[aurora]: https://aurora.tari.com\n[yat]: https://y.at\n[updates]: https://aurora.tari.com/updates/\n\n## Hack on the future of Digital Assets @ Tari\n\nAs always, come join us to chat about ongoing development in the `dev` channel on our [Discord server], or on IRC in the `#tari-dev` channel on the [Libera.Chat] IRC network.\n\n[discord server]: https://discord.gg/tari\n[libera.chat]: https://libera.chat\n[telegram]: https://t.me/tariproject\n",
        "title": "Dibbler testnet is live",
        "date": "2022-01-28T00:00:00.000Z",
        "excerpt": "This week the Tari development community rolled out the newest iteration of the Tari testnet. It is lovingly named [Dibbler], and brings a host of upgrades. There is also incredible and exclusive...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-01-24-update-69",
        "content": "\n### Dibbler has arrived...\n\nand we have some fresh new instructional videos to guide you through setting up the Tari base node, wallet, and mining\nnode for Windows and macOS. If you haven't already, head to the [downloads](https://tari.com/downloads) page to get the\nlatest binaries before starting.\n\n## Mining Tari on Windows\n\n<div class=\"videoWrapper\">\n    <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wQqiXFZtPbY\" title=\"Mining Tari on Windows\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n## Mining Tari on macOS\n\n<div class=\"videoWrapper\">\n    <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/N8NpGS1qttg\" title=\"Mining Tari on macOS\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n## Mining Tari on Ubuntu Linux\n\nComing soon™\n",
        "title": "Sausage inna bun?",
        "date": "2022-01-24T00:00:00.000Z",
        "excerpt": "Dibbler has arrived... and we have some fresh new instructional videos to guide you through setting up the Tari base node, wallet, and mining node for Windows and macOS. If you haven't already, head...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-01-13-update-68",
        "content": "\n### New Testnet 26 Jan 2022\n\nA quick reminder that the Dibbler testnet will be starting on 26 Jan 2022. This testnet includes functionality\nin the base layer which will enable sidechains such as the digital assets layer. The development of the \ndigital assets layer is in its very early stages but you can start looking at it already in the development branch. Be warned though, the APIs are \nnot final and are subject to change dramatically and without notice. \n\n### Covenants\n\nOther features to look forward to in Dibbler are covenants. Covenants are an extension to standard Mimblewimble which allow \nthe creator of a UTXO to dictate the rules about *how* it is spent. One main use case is to ensure that UTXOs that represent\nsidechain checkpoints are always valid. Convenants have been recently merged into the development branch so you can already test it out locally if you compile from source. \nFor more information on covenants, see [RFC-0250](https://rfc.tari.com/RFC-0250_Covenants.html).\n\n### What happens to Weatherwax?\n\nAs with previous testnets, the current Weatherwax testnet will continue, but the Tari Testnet Limited store will only accept Dibbler \ntransactions. Also, there will be some new items announced for the store soon!\n\n### What's up next? \n\nThe development community is working on optimizing block and transaction propagation. Weatherwax has been the most stable testnet we've run so far, but there are still some inefficiencies in terms of CPU usage and network traffic, particularly when blocks are full. \nWe're also formalizing the digital asset templates and sidechain specifications. ",
        "title": "Tari Developer Update",
        "date": "2022-01-13T00:00:00.000Z",
        "excerpt": "New Testnet 26 Jan 2022 A quick reminder that the Dibbler testnet will be starting on 26 Jan 2022. This testnet includes functionality in the base layer which will enable sidechains such as the...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2022-01-06-update-67",
        "content": "\n![Clearly, 30 Rock resonates with me.](https://i.redd.it/emdh31b1gu961.jpg)\n\nHappy January 6th.\n\nIn the last post, we shared some highlights of 2021. In this post, I'll briefly share what the Tari developers\nare working on and expect to roll out on Tari over the coming few months.\n\n#### A Testnet reset\n\nWe're going to be launching a new testnet, Dibbler, with all the latest bells and whistles in a few weeks.\nThere will also be some friggin' awesome new swag in the TTL to coincide with this event.\nKeep your eyes on the [Discord] announcement channel for news and updates.\n\n#### Full Yat support in Aurora\n\nAurora already has [Yat] support, and the mobile developers will continue to iron out the last few kinks and bugs\nto bring full, seamless Yat integration to Tari Aurora. You can already:\n\n* Link your existing Yat to your Aurora emoji id.\n* Buy a Yat.\n* Send tXTR to Yats.\n\nSoon, you'll be able to share your Yat in transaction metadata so that recipients can add your Yat to their contact\nlist.\n\n#### One-sided payment support\n[One-sided payments] have been supported at the transaction and console wallet level for some time. We plan to extend this\nsupport to Aurora and the TTL store in the coming months.\n\n#### NFTs on Tari\nThis is what you all came for, right?  In the last three months, there has been a lot of work from several core contributors\nfocused on a proof-of-concept for NFTs in Tari. There's a non-zero chance that this PoC will be ready for inclusion in the\nDibbler testnet.\n\nIf you want the high-level approach for the Digital Asset Network ([DAN]) and how NFTs will work in Tari,\nthen give our [RFC]s a read.\n\nIf you really want to dive into the nitty-gritty, then take a gander at the [development branch] of the Tari source code.\n\n#### Tari Launchpad\n\nFiring up your piece of the Tari ecosystem can be tricky right now. Do you want to run a node? A wallet? Both?\nWith or without Tor? With SHA-3 mining? On a pool, or standalone?\n\nEach of these Tari subsystems must be configured and set up to talk to each other. There are also dozens of different settings\none can tweak. Getting this all going can be time-consuming.\n\nThis is why we've started working on the Tari Launchpad. When it's done, the launchpad will have you running a node, wallet or\nminer in one or two clicks.\n\nThere's already a primordial prototype that runs on Linux and Mac. It's available in\nthe [weatherwax branch]. This is an \"all wires exposed\" version.\nThe design and development of a beautiful front-end for the launchpad has just kicked off.\n\n#### MainNet\n\nThere's still no official date for mainnet launch. When this changes, you'll be the first to know.\n\n[DAN]: https://rfc.tari.com/RFC-0300_DAN.html\n[one-sided payments]: https://rfc.tari.com/RFC-0201_TariScript.html#one-sided-payment\n[development branch]: https://github.com/tari-project/tari\n[RFC]: https://rfc.tari.com/RFC-0300_DAN.html\n[Yat]: https://y.at/\n[Discord]: https://discord.gg/tari\n[weatherwax branch]: https://github.com/tari-project/tari/tree/weatherwax\n",
        "title": "Tari 2022 - A new year",
        "date": "2022-01-06T00:00:00.000Z",
        "excerpt": "!Clearly, 30 Rock resonates with me. Happy January 6th. In the last post, we shared some highlights of 2021. In this post, I'll briefly share what the Tari developers are working on and expect to...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-12-21-update-67",
        "content": "\n![Obligatory New Years meme](https://www.quoteswishesmsg.com/wp-content/uploads/2021/01/Happy-New-Year-memes-min.jpg)\n\n2021 is largely in the rear-view mirror. While the degens were buying pixelated animal JPEGs with enough ETH to put\nsmall countries out of the red, the Tari devs were grinding away.\n\nStuff in Tari that wasn't there 12 months ago:\n\n* TariScript.\n* SHA-3 and RandomX Mining pools.\n* Cross-chain atomic swaps.\n* One-sided payments.\n* Cursory DAN support.\n  * Hotstuff BFT consensus.\n  * NFT-like contracts proof of concept.\n* Yuge performance improvements.\n\n## Stability and performance improvements\nHere's our take on Number Go Up (TM) technology: Performance metrics.\n\n![Number go uuuup](https://toshitimes.com/wp-content/uploads/2020/02/profits-roi-1050x600.jpg)\n\nWhile there are many new features to discuss, a primary focus for Tari has been stability and performance improvements. \nWe regularly perform significant stress tests on the network where we will flood the network with 36000 transactions in \nthe space of a minute and see how the wallets and base nodes cope. In September 2020, we did a stress test of this scale, \nand after 12 hours, only 71% of the transactions made it onto the chain. Issues revealed by these stress tests included \nproblems with our P2P networking protocols flooding the network with propagated messages. Our data storage layers thrashed \nthe CPU and memory of the host machines. We also found many issues in our various high-level chain transaction monitoring, \ntransaction and block broadcast and propagating strategies.\n\nThis year in July, we ran the same scale test and achieved a 100% success rate with all the transactions being mined within \n500 blocks where the absolute minimum number of blocks they could have fitted in was 54 blocks. Finally, in December, the \nsame stress test was again 100% successful, and all the transactions were mined within 300 blocks, with 97% of them mined \nwithin 100 blocks from the beginning of the test. There is still work to be done, but this considerable improvement in \nstability and performance has resulted from many hard-won lessons.\n\nFor example, this year, we moved most of our network communications to an RPC-style request-response framework. This \nreplaces the fire-and-forget style messaging we initially built, which is now reserved only for the sending of asynchronous \ntransaction negotiation messages. There have also been many improvements to our higher-level communication strategies. \nFor example, the method by which wallets broadcast transactions into the mempool, the way base nodes sync headers and blocks \nbetween themselves, to name just a few.\n\n**Side note:** The Weatherwax testnet launched in July. In 6 months, it has seen 400k transactions and contains 1.8 million UTXO’s.\nApropos of nothing, over the same period, Grin had around 150k transactions in that time and has around 150k UTXOs. Don't @me.\n\n## Tari Script\nOne of the most significant additions to the base layer has been the implementation of [TariScript]. This is one of Tari’s \nextensions to [Mimblewimble] protocol and is a scripting language that massively expands the capabilities of the Tari \nbase layer.\n\nThis year we rolled out the first feature to make use of [TariScript] which was the implementation of [one-sided payments]. \nOne-sided payments allow a wallet to make a payment to a recipient without the recipient’s wallet needing to be online, \nsolving a long time criticism levelled at Mimblewimble based protocols. We also used [TariScript] to implement cross-chain \natomic swaps with [Bitcoin] and wrote an RFC for our implementation of an atomic swap with [Monero].\n\nThis is just the tip of the iceberg of the capabilities Tari Script adds to the protocol, and in 2022 we will see many \nmore applications of [TariScript] to the base layer and the [DAN].\n\n![So excited](https://c.tenor.com/aUFtPZnj61cAAAAC/conan-o-brien-late-night-show.gif)\n\n## Wallets\n\nThe common wallet backend library used by the desktop console wallet and Android and iOS Aurora app was the focus of many \nof the performance and stability improvements. In addition to the features added by the support of [TariScript], the \nwallet can now recover its funds using the 24-word seed phrase by scanning the blockchain and [rewinding] range-proofs \nto find the outputs that belong to it. To make the recovery process less intensive on the wallet client applications, we \nimplemented a [cipher seed] scheme to encrypt the seed phrase and encode the wallet’s birthday into the 24-word seed \nphrase. Knowing the wallet’s birthday greatly reduces the work a wallet needs to do to recover its funds as it only has \nto scan the blocks since the birthday rather than all the way from the genesis block.\n\nThis year we created the standalone desktop console wallet client and iterated on our iOS and Android Aurora apps to make \nuse of all the new features afforded by the backend, such as wallet encryption and custom base node support. Furthermore, \nthe Aurora apps have been integrated with [Yat] to allow you to send tXTR to Yat’s with associated addresses in addition \nto the existing Emoji ID addresses.\n\n## Digital Assets Network (DAN)\nAs the base layer stabilises, the development of the second layer [DAN] is going full steam ahead. We have implemented a \nproof of concept Validator Node application that includes a HotStuff BFT consensus algorithm and NFT-like contracts.\n\n## Mining\n\n![Mining](https://www.rollingstone.com/wp-content/uploads/2018/06/rs-21440-00282398_lg.jpg?resize=1800,1200&w=1200)\n\nThis year we rolled out mining node applications for RandomX merge-mining and SHA-3 mining. The `merge-mining proxy`\napplication enables merge mining of Tari along with Monero. And we forked `NodeJsPool` to support Tari merge\nmining for Monero pools and also added SHA-3 mining to our fork of the `Miningcore` mining pool framework.\n\n[DAN]: https://rfc.tari.com/RFC-0300_DAN.html\n[TariScript]: https://rfc.tari.com/RFC-0201_TariScript.html\n[Mimblewimble]: https://tlu.tarilabs.com/protocols/mimblewimble-transactions-explained\n[one-sided payments]: https://rfc.tari.com/RFC-0201_TariScript.html#one-sided-payment\n[Bitcoin]: https://rfc.tari.com/RFC-0240_AtomicSwap.html\n[Monero]: https://github.com/tari-project/tari/pull/3623\n[rewinding]: https://rfc.tari.com/RFC-0180_BulletproofRewinding.html\n[cipher seed]: https://www.tari.com/updates/2021-11-04-update-62.html\n[Yat]: https://y.at/\n",
        "title": "Tari 2021 wrap up",
        "date": "2021-12-21T00:00:00.000Z",
        "excerpt": "!Obligatory New Years meme 2021 is largely in the rear-view mirror. While the degens were buying pixelated animal JPEGs with enough ETH to put small countries out of the red, the Tari devs were...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-12-01-update-66",
        "content": "\nHot on the heels of the Bitcoin-Tari Atomic Swap [implementation], we have written a [RFC] proposing two methods to perform\nMonero-Tari Atomic swaps. These atomic swaps are significantly more complex than a Bitcoin atomic swap because Monero\ndoes not include any scripting features or appropriate time-locks. This means that the majority of the complexity of the atomic swap needs\nto be done on the alternate chain that is being swapped with Monero.\n\nThe RFC proposes two methods; the first is inspired by the approach taken by the [Farcaster project] and [Comit network]. The second method\nis very similar but uses a slightly different approach to the signatures.\nThe [RFC] goes into great detail. In short, let's assume that Alice wants to send Bob some Tari in exchange for Monero.\n\nAlice and Bob will collaborate to produce several transactions that contain aggregate keys and adaptor signatures\nthat become valid at a staggered timeline of lock heights. The parties will then publish the transactions in an\norder that ensures both parties funds are safe at all times.\n\nThe gist is that Alice and Bob collaborate to produce a Monero transaction locking up Bob's XMR that is spendable by an aggregate key.\nAlice and Bob both have a secret portion of this key, and the Monero transaction can only be spent once one party has both\nparts of the aggregate key. This will be revealed when claiming the transactions that will be placed on the Tari chain.\nThe Tari transaction is constructed and published first because it has multiple modes of refunding.\n\nAlice and Bob collaborate to produce a Tari transaction that locks up Alice's portion of the swap that can be spent by\n_three_ different script keys. If any of these keys are used to spend the output, information about the Monero aggregate key is revealed, allowing the correct party to claim the Monero.  Usually, it allows Alice to claim the Monero once Bob claims the Tari, but there are contingencies for Bob refunding his Monero after some expiry period.\n\nThe following is the TariScript that defines how the script keys can be used to spend Alice's portion of the swap.\n\n``` TariScript,ignore\n   CheckHeight(height_1)\n   LtZero\n   IFTHEN\n      PushPubkey(K_s)\n   Else\n      CheckHeight(height_2)\n      LtZero\n      IFTHEN\n         PushPubkey(K_r)\n      Else\n         PushPubkey(K_l)\n      ENDIF\n   ENDIF\n```\n\nThis script says that before `height_1`, the output can be spent if you can provide a signature for `K_s`, which will reveal\nBob's portion of the Monero key allowing Alice to claim the XMR. `K_s` is an aggregate key with a part that Alice needs\nto provide to Bob before he can claim it; she will provide this portion of the key when she sees Bob has published the\nMonero transaction. After `height_1`, but before `height_2`, if Bob has not claimed the XTR then Alice has an opportunity\nto claim a refund of her XTR via `K_r`. Doing this will reveal Alice's portion of the Monero key, allowing Bob to reclaim\nhis XMR. If Alice does not claim her refund before `height_2` then Bob is able to claim the XTR via `K_l`, the lapse key.\nThis, however, reveals Bob's portion of the Monero key so that Alice now has the information required to claim the XMR when\nshe eventually comes back online.\n\nOnce all of the aggregate keys have been constructed by the two parties, Alice will publish the Tari transaction, knowing that\nif Bob does not publish the Monero transaction she will be able to reclaim her funds after the time lock expires. Bob cannot\nclaim the XTR transaction yet because Alice still needs to provide him with her portion of `K_s`. Bob now knows that he can\nsafely publish the Monero transaction because either Alice will give him her portion of `K_s` or else she will reclaim\nher XTR using `K_r`, which will reveal her portion of the Monero key so that he can reclaim his XMR. Otherwise, enough time will pass\nthat he can claim the XTR using `K_l`. Once he has published the Monero transaction, Alice will give him her portion of `K_s`.\nBob can then claim his XTR revealing his portion of the Monero key, and then Alice can claim her XMR.\n\nThis approach to the problem requires a very complex initial negotiation between the parties. This negotiation will consist\nof many rounds of communication. In the [RFC], a variation on this approach is proposed that does not use adaptor signatures.\nIn theory, this will reduce the number of initial communication rounds significantly. However, this approach still needs to\nbe reviewed. We invite the community to check out the [RFC] and welcome any input on the design of these protocols.\n\n[implementation]: https://github.com/tari-project/tari/pull/3552\n[RFC]: https://github.com/tari-project/tari/pull/3623\n[Farcaster project]: https://github.com/farcaster-project/RFCs\n[Comit network]: https://github.com/comit-network/xmr-btc-swap",
        "title": "Monero-Tari Atomic Swap RFC",
        "date": "2021-12-01T00:00:00.000Z",
        "excerpt": "Hot on the heels of the Bitcoin-Tari Atomic Swap [implementation], we have written a [RFC] proposing two methods to perform Monero-Tari Atomic swaps. These atomic swaps are significantly more complex...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-11-25-update-65",
        "content": "\n## Layer 2 Progress\n\nThe Tari development community is hard at work on the Layer 2 [DAN], and this week we take a look at the Covenants RFC and quality of life improvements in the Tari mobile wallet [Aurora].\n\n[aurora]: https://aurora.tari.com\n[dan]: https://rfc.tari.com/RFC-0300_DAN.html#related-requests-for-comment\n\n### Covenants RFC\n\nPreviously we posted [the draft] for covenants on Tari. After some discussion, [RFC-0250 Covenants] was published for community feedback.\n\nLet's take a quick look at the proposal. Covenants allow the spender of a transaction output ([UTXO]) to place restrictions on how that output can subsequently be spent.\n\nWait - that sounds like [TariScript]? Not exactly - the script on a UTXO only restricts how it may be _spent in a transaction_. Once it is spent, the resulting output has no such restriction. That is the functionality covenants aim to provide.\n\nThe proposed implementation will add a `covenant` field to each transaction input and output. Each covenant is composed of [set operations], filtering the output set using a discreet set of rules. If at least one output in the set is matched by the filtering rules, the covenant is upheld and the output can be included in a new transaction and block.\n\nNormal transactions will have the identity (ie. empty) covenant - meaning that no restriction is applied.\n\nAn [NFT] royalty covenant would have to ensure a few things:\n\n- that the features that define the output are preserved (its unique id and metadata)\n- that the [TariScript] of the output is preserved (scripting a royalty payment)\n- and that the covenant itself is preserved (ensuring royalties on subsequent transfers)\n\nThis does lead to protocol and consensus changes - the covenant must be committed to in the output hash to prevent [malleability], and must be validated when entering the mempool and before being included in the blockchain.\n\nMore information on the proposed set operation functions and other examples are available [in the RFC].\n\nIf you have any feedback, please come discuss the Covenants RFC with us on IRC in `#tari-dev` on [Libera.Chat], our [Discord server], or [Telegram].\n\n[the draft]: https://gist.github.com/sdbondi/035ca1db7980d974a99e914e6f499a97\n[rfc-0250 covenants]: https://rfc.tari.com/RFC-0250_Covenants.html\n[in the rfc]: https://rfc.tari.com/RFC-0250_Covenants.html#set-operations\n[utxo]: https://rfc.tari.com/Glossary.html#unspent-transaction-outputs\n[nft]: https://rfc.tari.com/Glossary.html#non-fungible-token-nft\n[tariscript]: https://rfc.tari.com/Glossary.html#tariscript\n[malleability]: https://tlu.tarilabs.com/tari/TariScript_for_dummies#malleability\n[set operations]: https://en.wikipedia.org/wiki/Set_(mathematics)\n\n### Aurora Mobile Wallet\n\nUpcoming version `0.9` of the reference Tari mobile wallet includes a lovely new user experience when entering seed words for recovery.\n\nSince these words are part of [predefined lists], it makes sense to assist the user by filtering words as letters are typed.\n\nThat means a lot less typing! 2 to 4 letters are enough to find your word and tap the suggestion 😎\n\nSee it in action in this video:\n\n[predefined lists]: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#wordlist\n\n<div style=\"margin:2em\">\n    <video loop autoplay src=\"{{ site.baseurl }}/assets/vid/restore.mp4\" width=\"221\" style=\"border:1px #9330ff solid\">\n        Sorry, your browser doesn't support embedded videos.\n        <a href=\"{{ site.baseurl }}/assets/vid/restore.mp4\">Download it instead</a>.\n    </video>\n</div>\n\nYou can follow more Aurora development on GitHub:\n\n- [`wallet-android`](https://github.com/tari-project/wallet-android)\n- [`wallet-ios`](https://github.com/tari-project/wallet-ios)\n\n## Happy Thanksgiving 🦃\n\nWe'd like to wish everyone a very happy Thanksgiving. We are incredibly grateful for our community. May you be safe and blessed with your family and friends.\n\n### Hack on the future of Digital Assets @ Tari\n\nAs always, come join us to chat about ongoing development in the `dev` channel on our [Discord server], or on IRC in the `#tari-dev` channel on the [Libera.Chat] IRC network.\n\n[discord server]: https://discord.gg/tari\n[libera.chat]: https://libera.chat\n[telegram]: https://t.me/tariproject\n",
        "title": "Tari Development Update",
        "date": "2021-11-25T00:00:00.000Z",
        "excerpt": "Layer 2 Progress The Tari development community is hard at work on the Layer 2 [DAN], and this week we take a look at the Covenants RFC and quality of life improvements in the Tari mobile wallet...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-11-18-update-64",
        "content": "\n## Tari Atomic swaps\n\nWith the release of version 0.21.2, the Tari Console wallet now supports atomic swaps with multiple coins. \n[TariScript](https://tlu.tarilabs.com/tari/TariScript_for_dummies) allows us to implement several advanced payment ideas that are difficult or impossible in vanilla MimbleWimble, including [One-sided payments](https://www.tari.com/updates/2021-06-03-update-57.html)\nand [Atomic swaps](https://tlu.tarilabs.com/protocols/AtomicSwaps). \n\nMost of these advanced features were\npossible the moment TariScript launched on testnet, but let’s be honest:  Handcrafting transactions is a complex process. \n\nWith this release, we added support via CLI and GRPC commands to initiate, claim and refund atomic swaps with all crypto\ncoins that support [HTLCs](https://hackernoon.com/what-are-hashed-timelock-contracts-htlcs-application-in-lightning-network-payment-channels-14437eeb9345)\nwith a SHA256 pre-image. Any crypto coin that can unlock a payment using a SHA256 pre-image can carry out atomic swaps\nwith Tari, including Bitcoin, Litecoin, and many more. \n\nSo what does all this mean? Well, with this new release, all your\natomic swaps are just a command away. We have written a handy [guide](https://github.com/tari-project/tari/blob/development/docs/src/btc_atomic_swap.md)\ntaking you through a BTC-tXTR atomic swap step by step. The process for other coins is entirely analogous.\n\nLet us dig a bit deeper into how this all functions and what the process is. We can divide this whole \nprocess into the following steps:\n\n* The Tari initiation.\n* The Other coin initiation.\n* The other coin finalization.\n* The Tari finalization.\n* And if something goes wrong somewhere: Refunds. \n\nOne crucial step that is always hinted at but not always directly mentioned is that the two persons doing the atomic\nswaps need to communicate out of band with each other to exchange information.\n\n### Tari initiation\n\nThe first step consists of broadcasting a Tari HTLC transaction. Your wallet provides the information required to move forward, such as the pre-image, pre-image hash, and the hash of the output created on the\nblockchain. The pre-image needs must be kept secret as this is your key to claiming your coins on the other blockchain,\nand revealing it to the other person will break the security of the atomic swap. The hashed pre-image and the hash of\nthe output need to be provided to the counterparty. \n\nThe newly created output will be saved in your local wallet as a potential time-locked input. More on that later. \n\n### Other coin initiation\n\n Here is where the other person needs to commit to their funds on the other blockchain. This transaction creates an HTLC\n that has the same pre-image as the Tari one. This can be a complicated step as this is where they will need to craft custom transactions on the other blockchain, but luckily we have tools that will create all of this. \n\n### Other coin finalization\n\nThis is where you claim your coins from the other blockchain. Remember that secret pre-image created in the first step?\nAgain, this step could be complex, but luckily, we\nhave tools to simplify this by following the easy [steps](https://github.com/tari-project/tari/blob/development/docs/src/btc_atomic_swap.md). \n\n### Tari finalization\n\nFinally, the other person uses the secret pre-image that you just revealed in claiming your coins on the other\nblockchain. They can use this to claim the Tari you put up for the exchange. This is also just a signal step they have\nto call on their wallet using the pre-image and hash of the output. The wallet will search the blockchain for the output\nand transfer it to a wholly-owned UTXO. \n\n### Refunds\n\nThe refunds ensure that everyone can reclaim all their funds if something goes wrong. On the Tari\nside, the refunds are handled in one of two ways:\n\n* Automatic: This is where the wallet will automatically reclaim the funds for you. The wallet will store when this UTXO\nbecomes spendable, and when possible, it will try to spend this UTXO before spending any other UTXO. \n* Manual: This is where you can yourself issue the wallet with the instruction to reclaim the refunds immediately and\nrespond to a new UTXO given that the timelock has expired for them UTXO. \n",
        "title": "Atomic swaps",
        "date": "2021-11-18T00:00:00.000Z",
        "excerpt": "Tari Atomic swaps With the release of version 0.21.2, the Tari Console wallet now supports atomic swaps with multiple coins.  TariScript allows us to implement several advanced payment ideas that are...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-11-11-update-63",
        "content": "\n## Are we there yet?\n\nThings are really starting to buzz in the Tari development space.\n\nWe have the usual array of bug fixes and performance improvements. We also report on progress that's been made on multiple fronts, including Covenants, cross-chain atomic swaps and the provisionally-named DAN validator nodes.\n\n## What are we working on?\n\nAs described in [Wen Mainnet?]({% link _updates/2021-09-28-update-61.md %}), Tari has a complete set of Layer 1 features.\n\nThe current development focus is full steam ahead on Layer 2 features for the Digital Assets Network ([DAN](https://rfc.tari.com/RFC-0300_DAN.html#related-requests-for-comment)).\n\n### Covenants\n\n[Covenants](https://bitcoinops.org/en/topics/covenants/) are a method of placing restrictions on how a given [transaction output](https://rfc.tari.com/Glossary.html#unspent-transaction-outputs) can be spent. For example: you may want to specify that the original NFT creator receives a commission on each subsequent sale, or that Bob's crypto vault can only be spent to a specific address belonging to his niece.\n\nWork is progressing on [a draft for covenants implementation](https://gist.github.com/sdbondi/035ca1db7980d974a99e914e6f499a97) on Tari, which will soon be published as an RFC for community feedback.\n\nBarring any complications, implementation will start after the RFC period!\n\n### BTC Atomic Swaps\n\nWe recently published an [RFC for implementing BTC - XTR atomic swaps](https://rfc.tari.com/RFC-0240_AtomicSwap.html#description). These are trustless transactions that enable users to swap Tari (XTR) for Bitcoin (BTC) or vice versa, without requiring a 3rd party.\n\n_\"In an Atomic swap, both users lock up the funds to be exchanged on their respective chains in an HTLC-type contract.\"_\n\nHTLCs are [Hash Time Locked Contracts](https://en.bitcoin.it/wiki/Hash_Time_Locked_Contracts): scripts placed on transaction outputs that require the receiver to cryptographically prove the payment was received before the deadline, or the output is spent back to the sender when the time lock expires.\n\nThe initial development in sending and claiming these HTLC transactions is currently in review on [PR #3552](https://github.com/tari-project/tari/pull/3552).\n\n### Validator Node\n\n[Validator Nodes](https://rfc.tari.com/RFC-0302_ValidatorNodes.html) are the core of the Layer 2 DAN. They work as a committee to manage the registration and state of assets on behalf of Asset Issuers. Development on the Validator Node binaries is progressing on the [`validator-node`](https://github.com/tari-project/tari/tree/validator-node) branch. The current focus is on generating and spending the checkpoint transactions for asset transfers.\n\n### Tari Collectibles\n\n\"Collectibles\" is the current working name given to our new application for issuing assets and minting NFTs. It is a cross-platform GUI application using [Tauri](https://tauri.app) (what a fantastic name 👏) which is a new application builder allowing the use of web technologies to build the GUI. Similar to Electron, but developed in Rust and with a very strong focus on security.\n\nIf you know Javascript then come hack on this new app with us on GitHub at [tari-project/tari](https://github.com/tari-project/tari/tree/validator-node/applications/tari_collectibles)!\n\n### Tari Web Extension\n\nWe've just started working on a web extension _à la_ Metamask, to enable a Tari wallet in modern web browsers. It's still brand new, but the goal is to allow interactions with validator nodes and your Assets and Tokens from right in the browser!\n\nFollow or join its development on GitHub on the `validator-node` branch at [`applications/tari_web_extension`](https://github.com/tari-project/tari/tree/validator-node/applications/tari_web_extension).\n\n### Wallet Improvements\n\nMany performance improvements are in development on the Tari console wallet, as well as new features and improvements to the `libwallet` FFI library and the Aurora mobile apps on Android and iOS.\n\nFollow their development here:\n\n- [`wallet_ffi`](https://github.com/tari-project/tari/tree/development/base_layer/wallet_ffi)\n- [`wallet-android`](https://github.com/tari-project/wallet-android)\n- [`wallet-ios`](https://github.com/tari-project/wallet-ios)\n\n### Hack on the future of Digital Assets @ Tari\n\nAs always, come join us to chat about ongoing development in the `dev` channel on our [Discord server](https://discord.gg/tari), or on IRC in the `#tari-dev` channel on the [Libera.Chat](https://libera.chat) IRC network.\n",
        "title": "Tari Development Update",
        "date": "2021-11-11T00:00:00.000Z",
        "excerpt": "Are we there yet? Things are really starting to buzz in the Tari development space. We have the usual array of bug fixes and performance improvements. We also report on progress that's been made on...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-11-04-update-62",
        "content": "\n## New cipher seed scheme implemented for improved wallet recovery\n\nRelease 0.13.0 of Tari LibWallet introduces a new cipher seed scheme to be used for wallet seed phrase backup and\nrecovery. This scheme is inspired by the [aezeed](https://github.com/lightningnetwork/lnd/tree/master/aezeed) scheme\npioneered by the Lightning Network.\n\nThe previous scheme that Tari employed was a simple [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)\nbased scheme, where a 24 word seed phrase was employed. BIP39 defines a number of mnemonic word lists  used to encode the\nseed data. These word lists are carefully chosen so that the included words are unambiguous in their respective language.\nThe lists consist of 2048 words which means a single word can encode 11 bits of data. This means that a 24 word seed\nphrase can encode 33 bytes of data. The previous implementation of the seed phrase encoded 256-bit of entropy, from\nwhich a wallet's private keys were generated and the few remaining bits were used as a checksum to aid in validating if\nthe seed phrase was entered correctly. This seed phrase is extremely sensitive because every single secret key that the\nwallet generates can be derived from it.\n\nThe new cipher seed scheme provides three new features: versioning, included wallet birthday and encryption. The\nversioning allows the seed phrase scheme to be upgraded in the future while maintaining support for previous iterations.\nIncluding the wallet birthday in the seed phrase allows us to improve wallet recovery times. Now when you enter your seed\nphrase the wallet will not have to scan the entire blockchain to be sure it has recovered all your funds. The wallet\ncan use the included birthday to only scan the blockchain from that point forwards. Finally, the new scheme provides the\nability for the sensitive data encoded within the seed phrase to be encrypted with a passphrase making it much safer in\nthe case that your seed phrase is compromised.\n\nOur implementation of the [aezeed](https://github.com/lightningnetwork/lnd/tree/master/aezeed) scheme differs only in the\nencryption cipher we use. The aezeed scheme uses the fairly new [aez](https://web.cs.ucdavis.edu/~rogaway/aez/)\n[AEAD](https://en.wikipedia.org/wiki/Authenticated_encryption) cipher scheme. This scheme is an arbitrary input length\nblock cipher that allows for a custom [MAC](https://en.wikipedia.org/wiki/Message_authentication_code) length. Unfortunately,\nthere is not an audited Rust implementation of this scheme available and as such we implemented our version of this scheme\nusing the audited primitives provided by the [RustCrypto](https://github.com/RustCrypto) project.\n\nThe cipher seed scheme uses a 24 word seed phrase which gives us 33 bytes to work with. The unencrypted data included in\nscheme is as follows:\n\n|Field      | Size      | \n|---        |---        |\n| version   | 1 byte    |\n| birthday  | 2 bytes   |\n| entropy   | 16 bytes  |\n| MAC       | 5 bytes   |\n| salt      | 5 bytes   |\n| checksum  | 4 bytes   |\n\nThe birthday value will be expressed as the number of days that have passed since the [Unix Epoch](https://en.wikipedia.org/wiki/Unix_time).\nThis gives this scheme the lifetime of another 127 years. The entropy used is the same as is provided by a traditional\n12 word BIP39 seed phrase. The MAC is used to provide the AEAD properties of the scheme. It is used to verify that the\ndecrypted data is in fact the same data that was originally encrypted with the passphrase. It also gives some ability to\nconfirm that the plaintext associated data is the same as was present during the initial encryption.\n\nThe MAC is calculated in the MAC-then-Encrypt configuration, as is used in SSL, and is calculated as\n`Hash(birthday||entropy||version||salt||passphrase)`. The MAC is first calculated and then appended to birthday and\nentropy data. That data is then encrypted using the user provided passphrase. The salt and version data are included as\nplain text associated data. The salt is used as a nonce for the encryption process and also as salt for deriving the\nencryption key from the user's passphrase using [Argon2](https://en.wikipedia.org/wiki/Argon2). If a passphrase is not\nprovided by the user then a default string is used. Due to the fact that we have little space to spare in our scheme we\ncouldn't use a block cipher, like AES, which requires padding. Instead, we employ the ChaCha20 stream cipher for our\nencryption. Finally, the checksum is a CRC32 calculated using `version || encrypted data || salt` as input and is\nappended to thatdata to produce the 33 byte set of data that is encoded using the BIP39 mnenomic word lists. The final\nencrypted data looks as follows:\n\n|Field          | Size      | \n|---            |---        |\n| version       | 1 byte    |\n| ciphertext    | 23 bytes  |\n| salt          | 5 bytes   |\n| checksum      | 4 bytes   |",
        "title": "New cipher seed scheme implemented for improved wallet recovery",
        "date": "2021-11-04T00:00:00.000Z",
        "excerpt": "New cipher seed scheme implemented for improved wallet recovery Release 0.13.0 of Tari LibWallet introduces a new cipher seed scheme to be used for wallet seed phrase backup and recovery. This scheme...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-09-28-update-61",
        "content": "\n\"Wen mainnet, sir?\"\n\nThe genuinely most frequently asked question in the Tari telegram group is \"wen mainnet\" or variations on that theme:\n\n\"I've been waiting since 2018!\" (ed: That's not even a question.)\n\n\"Why are you guys so slow?\"\n\n\"Who does testnet for over a year?\" (spoiler: we do).\n\nAllow me to share my thoughts on why Tari is in no rush to launch mainnet. And why this approach is the right thing for\nthe community.\n\nThe _raison d'etre_ for Tari, excuse my French, is the Digital Assets Network (DAN). That's not ready yet. There are\nmany tough problems to solve in this realm before we can issue scalable, easy-to-use, performant assets on Tari.\nSolving these problems has us breaking new ground in one way or another, so progress is slow. Really slow.\nAnd we must get it right.\n\nToday, Tari has a complete set of Layer 1 features.\n\nThe communications network is integrated into Tor so that Tari mobile wallets can participate as first-class citizens in\nthe network.\n\nThe Tari overlay DHT network allows wallets and nodes to identify themselves with _just_ their public keys or node IDs\n(no IP addresses!), increasing privacy.\n\nWhen you rejoin the network, Tari's store-and-forward feature makes it so that your kindly network neighbours deliver any messages\nthat came for you while you were away.\n\nTariScript brings Bitcoin-like scripting functionality into Mimblewimble.\n\nTariScript is particularly neat because it enables you to send funds to offline recipients or \"tip jars\", all possible\nwith our one-sided payments feature. TariScript is also the foundation for atomic swaps, multi-sig and most importantly,\nscalable side chains.\n\nIf you've downloaded Aurora or built the console wallet, you already know that it's a joyful experience. The UX is\nfantastic by any measure, but especially by cryptocurrency standards.\n\nCould we launch mainnet with this set of features? Sure. But I must ask, why? What would we gain?\n\nTari's mission is to be the digital assets platform on the internet.\n\nA project only has **one** main net launch[^1]. If we go live now, we lose out on the biggest single opportunity to bring\nattention to the project when we don't have our star player ready to take the field. By the time the DAN is complete,\nany excitement from the broader crypto and mainstream audiences will have dissipated.\n\nStaying in testnet offers our codebase a significantly undervalued long-term benefit. We can make substantial and\nfundamental changes to our consensus code with minimal risk. We can deploy these changes without worrying about\nbackwards compatibility. We can implement new features and protocols that enable the DAN without lugging millions of\nlines of legacy code around for (literally) ever. We can simply rip up our testnet and start a new one with a clean,\nunencumbered code base.\n\nIf you're as excited about Tari as we are, help us get to our ultimate goal and get involved! Comment on our RFCs,\ncontribute code, docs, or answer questions in our [Telegram group](https://t.me/tariproject) or our shiny new\n[Discord server](https://discord.gg/tari).\n\nTari Labs is a steward of the Tari project, and they are hiring! If you're a Rust developer, designer, or front-end\nengineer and want to bring the future of digital assets into the present, [they want to talk](https://tarilabs.com/contribute/).\n\n[^1]: Unless your name is Dan Larimer.\n\n\n",
        "title": "Wen Mainnet?",
        "date": "2021-09-28T00:00:00.000Z",
        "excerpt": "\"Wen mainnet, sir?\" The genuinely most frequently asked question in the Tari telegram group is \"wen mainnet\" or variations on that theme: \"I've been waiting since 2018!\" (ed: That's not even a...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-08-24-update-60",
        "content": "\n## Testnet SHA mining pool\n\nThe development community has set up a test SHA3 mining pool at [https://miningcore.tarilabs.com/](https://miningcore.tarilabs.com/). See [here](https://github.com/tari-project/tari#tari-sha3-mining) for instructions on setting up the `tari_mining_node` to mine against it.\n\n## Tari Base Node 0.9.5\n\nTari base node and console wallet v0.9.5 have been released. This version includes minor fixes, but mainly fixes a regression caused by v0.9.4 that caused nodes to get into an invalid state after a reorg.\n\nBinaries are available on the [download page](https://www.tari.com/downloads/)\n\nPlease note that all base nodes should delete their database and resync the blockchain as part of this update.\n\n## Release notes\n\n#### Bug Fixes\n\n- show warnings on console (#3225) ([3291021c](https://github.com/tari-project/tari/commit/3291021c6e63778d4fa14ca6cb10c51681d8a5f5))\n- edge-case fixes for wallet peer switching in console wallet (#3226) ([f577df8e](https://github.com/tari-project/tari/commit/f577df8e9b34c6a823cc555b0fecfa2153ddd7e0))\n- chain error caused by zero-conf transactions and reorgs (#3223) ([f0404273](https://github.com/tari-project/tari/commit/f04042732a78bf3dc98d1aee7bf5b032e398010c))\n- bug in wallet base node peer switching (#3217) ([878c317b](https://github.com/tari-project/tari/commit/878c317be9226da342cef439af2bc0024d1eb77f))\n- division by zero ([8a988e1c](https://github.com/tari-project/tari/commit/8a988e1cd5bd4c49660819494949305963d08173))\n- improve p2p RPC robustness (#3208) ([211dcfdb](https://github.com/tari-project/tari/commit/211dcfdb70eb774f9f2c3cdd080d6db7a24cb46c))\n- **wallet:** add NodeId to console wallet Who Am I tab (#3213) ([706ff5e5](https://github.com/tari-project/tari/commit/706ff5e59185f8088add19ac8654f29cc4ab1145))\n- **wallet_ffi:** fix division by zero during recovery (#3214) ([abd3d849](https://github.com/tari-project/tari/commit/abd3d84965651285c72ecbcca1c401f3e54ad28c))\n\n#### Features\n\n- add `ping()` to all comms RPC clients (#3227) ([b5b62238](https://github.com/tari-project/tari/commit/b5b62238cf7512abb38803c426369ebbcc8fe540))\n\n#### Breaking Changes\n\n- base nodes should delete their database and resync\n",
        "title": "Tari Base Node 0.9.5 Released",
        "date": "2021-08-24T00:00:00.000Z",
        "excerpt": "Testnet SHA mining pool The development community has set up a test SHA3 mining pool at https://miningcore.tarilabs.com/. See here for instructions on setting up the  to mine against it. Tari Base...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-07-20-update-59",
        "content": "\n## Tari Update\n\nTwo weeks ago the Weatherwax testnet was launched and is currently at height 8120. The Android and iOS apps are still on the Stibbons network but will be updated soon.\n\nTo test out the new network, which enables additional functionality via\n[TariScript](https://rfc.tari.com/RFC-0201_TariScript.html), a stress test was performed. Six console wallets each sent 6000\ntransactions to 10 receiving console wallets, totalling 36000 transactions.\n\nWe were looking for a number of things during the stress test.\n\n- Were all transactions mined?\n- Did the wallets end up with the correct status?\n- Were there any chain splits or reorgs that could not be recovered?\n- Did the transactions reach all the miners?\n\nThe main aim of the stress test is to find bugs and inefficiencies that can be fixed, and to determine reasonable settings for rate limiting and banning nodes.\n\n### Overall results\n\nThe results were very good. The main finding was that many nodes banned each other due to message flooding. This has a knock on effect on transaction propagation and reorgs. When nodes get banned, small chain forks occur and when they are unbanned, the strongest chain wins. The largest reorg was 17 blocks, and all nodes handled this without any errors. This is a great result.\n\nThe stats were:\n\nSender wallet | wallet 01 | wallet 02 | wallet 03 | wallet 04 | wallet 05 | wallet 06 | Totals or Avg\n-- | --: | --: | --: | --: | --: | --: | --:\nTransactions submitted | 6000 | 6000 | 6000 | 6000 | 6000 | 6000 | 36000\nSubmit time (min.) | 101 | 76 | 70 | 88 | 88 | 79 | 84\nHighest single txn send count | 79 | 54 | 54 | 68 | 71 | 53 | 379\nEnd status: Broadcast | 21 | 0 | 4 | 23 | 0 | 0 | 48\nInvalidated | 0 | - | 0 | 0 | - | - | 0\nEnd status: MinedUnconfirmed | 0 | 6 | 3 | 0 | 1 | 0 | 10\nInvalidated | - | 0 | 1 | - | 0 | - | 1\nEnd status: MinedConfirmed | 5979 | 5994 | 5993 | 5977 | 5999 | 6000 | 35942\nInvalidated | 7 | 0 | 3 | 2 | 0 | 0 | 12\nMinedConfirmed & Valid | 5972 | 5994 | 5990 | 5975 | 5999 | 6000 | 35930\nBlocks to mine all | 420 | 472 | 472 | 481 | 418 | 473 | 456\nMined success ratio | 99.533% | 99.900% | 99.833% | 99.583% | 99.983% | 100.000% | 99.806%\n\nThe first stress test block (#5681) was mined Thu, 15 Jul 2021 16:16:35 +0000, and the last stress test block (#6162) was mined Fri, 16 Jul 2021 08:27:59 +0000, thus lasting just under 16.5 hours.\n\n### Were all transactions mined?\n\nOut of the 36000 transactions, 48 were still in the broadcast stage, meaning that they were sent to a base node, but for some reason did not make it into the chain. This is most likely to a reorg, and the wallet should probably retry these.\n\n### Did the wallets end up with the correct status\n\n35,930 out of 36,000 transactions were mined within 16.5hrs, translating to a success rate of 99.806%. This makes this the most successful stress test of the Tari network to date. However, we're still chasing that elusive 100% goal.\n\n### Were there any chain splits that could not be recovered\n\nThere were none. We were very pleased to see the nodes reorg to stronger chains and continue processing blocks.\n\n### Did the transactions reach all the miners\n\nAlthough the vast majority of transactions were mined, there were times when some nodes had full mempools, but empty or lean blocks were being added to the chain. This means that the miners mining them were not aware of the transactions in the mempool. We believe this is mainly due to the banning issue. We are actively investigating this and will be the focus of our next stress test.\n\n**Note:** The final batch of transactions was mined from block #6081 onwards by manually connecting a miner to base nodes that still had unmined transactions in their mempools. Transactions that were mined with this manual intervention totalled 11,764 or 32.7%.\n\n![image](https://user-images.githubusercontent.com/39146854/126472120-015bac24-b7d4-46cd-bb55-1f8014b0955f.png)\n### The way forward\n\nThe next stress test will seek to mitigate the banning issue and improve consistency in mempool populations across the network.\n\nAfter that will be to repeat the test using one-sided payments (non-interactive transactions using TariScript). This is exciting since it will be the first test of TariScript in \"real world\" conditions.\n",
        "title": "Tari Update",
        "date": "2021-07-21T00:00:00.000Z",
        "excerpt": "Tari Update Two weeks ago the Weatherwax testnet was launched and is currently at height 8120. The Android and iOS apps are still on the Stibbons network but will be updated soon. To test out the new...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-07-07-update-58",
        "content": "\n## Tari Base Node v0.9.0 - Weatherwax Testnet, Now With TariScript\n\nToday the Tari development community merged and released a build of the Tari base node and console wallets that include `TariScript`. `TariScript` is described\nin [RFC-0201](https://rfc.tari.com/RFC-0201_TariScript.html) and is the first extension to Mimblewimble that Tari is implementing. This release is the first time these features will be available for testing (unless you compiled from source). Note that the block and transaction structure is significantly different from the current `Stibbons` testnet, so the two testnets are incompatible.\nThe two testnets will also run in parallel until the Android and iOS mobile apps are updated.\n\n## 0.9.0 (2021-07-07)\n\n#### Bug Fixes\n\n- fix missing edge case in header sync (#3060) ([0f0fb856](https://github.com/tari-project/tari/commit/0f0fb856e9369d9c7e172fc59ee64d31dff4637f))\n- remove unstable impl trait from Tari comms (#3056) ([08b019f0](https://github.com/tari-project/tari/commit/08b019f03793f7677b72452e01bead7db89ffa18))\n- fix db update error (#3063) ([b95d558f](https://github.com/tari-project/tari/commit/b95d558f318d045da9e1172cb802555ae3eb5a47))\n- remove unimplemented Blake pow algo variant (#3047) ([347973e3](https://github.com/tari-project/tari/commit/347973e3e8fdd39bb74d978d14ff414c04a39212), breaks [#](https://github.com/tari-project/tari/issues/))\n- fix small issues related to #3020 (#3026) ([da1d7579](https://github.com/tari-project/tari/commit/da1d75790fcb4eb9a71b7822c3ede3d9ba598241))\n- update connectivity manager defaults (#3031) ([229830e5](https://github.com/tari-project/tari/commit/229830e595c6b3c97011547d18885e2c0a3e3f19))\n- check minimum number of headers for calc-timing (#3009) ([b3522027](https://github.com/tari-project/tari/commit/b3522027b824dd8bb50a7183397adba082fdf28e))\n- fix `Unique Constraint` bug when requesting a coinbase output at same height (#3004) ([537db06f](https://github.com/tari-project/tari/commit/537db06f33c49942d42e83fd6838f4fd405028d0))\n- cancel faux transaction when imported UTXO is invalidated (#2984) ([472c3086](https://github.com/tari-project/tari/commit/472c30865cfa5a3cc648bffe22f6ec6e7aa22572))\n- update console wallet on one sided payment import (#2983) ([f45cdc46](https://github.com/tari-project/tari/commit/f45cdc46f8485ea8978dd05edafa26d374c98fdc))\n- fix prune mode (#2952) ([f7dc3a44](https://github.com/tari-project/tari/commit/f7dc3a44d2f57102024605cc6f4c93bb326b292a))\n- fix ChainStorageError after a reorg with new block (#2915) ([7e99ea59](https://github.com/tari-project/tari/commit/7e99ea59ec11f19ba47e62729c3ee8b500d16c2e))\n- improve error messages in tari applications (#2951) ([e04c884e](https://github.com/tari-project/tari/commit/e04c884eb4c7aaf124fa5da5d80ecfc4b00817e1))\n- merge dev, update peer seeds (#2974) ([94ffd185](https://github.com/tari-project/tari/commit/94ffd185ff4ee9ce5575f28ae28e73464342b657))\n- implement cucumber tests for one-sided recovery and scanning (#2955) ([b55d99fe](https://github.com/tari-project/tari/commit/b55d99fe3b08b34485bf1a9429cfad32a3fac84f))\n- update rust nightly toolchain (#2957) ([812a1611](https://github.com/tari-project/tari/commit/812a1611a924b977a79bd5e7fe16eb986649adce))\n- update failing rust tests (#2961) ([ed17fee3](https://github.com/tari-project/tari/commit/ed17fee3e34d3985794af621ba131e066849abec))\n- **wallet:** increment wallet key manager index during recovery (#2973) ([c9fdeb3d](https://github.com/tari-project/tari/commit/c9fdeb3da90a297a75a53ddbea6823f3e6520b8d))\n\n#### Breaking Changes\n\n- remove unimplemented Blake pow algo variant (#3047) ([347973e3](https://github.com/tari-project/tari/commit/347973e3e8fdd39bb74d978d14ff414c04a39212)\n- **ffi:** `wallet_create` takes seed words for recovery (#2986) ([a2c6b17d](https://github.com/tari-project/tari/commit/a2c6b17de6fd8ac14a5379b0c44d34c1e1e71e2d)\n\n#### Features\n\n- bundle openssl dependency (#3038) ([7fd5c286](https://github.com/tari-project/tari/commit/7fd5c2865b4093d0c89341ee49062ebf75d5eb5c))\n- bundle sqlite dependency (#3036) ([7bd13411](https://github.com/tari-project/tari/commit/7bd1341159e8879ba9768b2268696f22b575fbe6))\n- add tari script transaction data structures (#3064) ([266b5f1c](https://github.com/tari-project/tari/commit/266b5f1cede2e23603ab1d7eab2e1b5fc577537b))\n- implement metadata comsig on txn output (#3057) ([8ecbb1f2](https://github.com/tari-project/tari/commit/8ecbb1f231da38f2e838c8acc79165b5b0a27136))\n- software auto updates for base node (#3039) ([cf33cdb5](https://github.com/tari-project/tari/commit/cf33cdb5403736f67ea71f958e3ac06413c3f8e7))\n- add zero conf tx (#3043) ([742dd9e6](https://github.com/tari-project/tari/commit/742dd9e6c9fc8c85bb6969e19489a4120d9cc9d1))\n- network separation and protocol versioning implementation (#3030) ([2c9f6999](https://github.com/tari-project/tari/commit/2c9f69991f7cfcbda113a55ceeacdf2c13d90da3))\n- add filtering of abandoned coinbase txs to console wallet (#3032) ([ae15fd9c](https://github.com/tari-project/tari/commit/ae15fd9c6203f8a6fe40be411fe3e4e590270ef7))\n- add input_mr and witness_mr to header (#3041) ([65552cbd](https://github.com/tari-project/tari/commit/65552cbd7b826e76a63ca50e53c41e8986eb9860))\n- Change script_signature type to ComSig (#3016) ([adb4a640](https://github.com/tari-project/tari/commit/adb4a64000f991df06454e86c303728af881241d))\n- update app state when base node is set by command/script mode (#3019) ([4a499564](https://github.com/tari-project/tari/commit/4a499564d59162db25693f194f00eb4bd91f0700))\n- add sender signature to txn output (#3020) ([7901b3ca](https://github.com/tari-project/tari/commit/7901b3ca2a6096e0f9148181b7a07ed16209d168))\n- display local time instead of UTC. Add new wallet commands. (#2994) ([b3760202](https://github.com/tari-project/tari/commit/b3760202992676b8874a155775472820e6a22932))\n- mininal merkle proof for monero pow data (#2996) ([ac062e57](https://github.com/tari-project/tari/commit/ac062e57903d493e09bff0ccee36660f7c088782))\n- modify gamma calculation for TariScript ([c88d789e](https://github.com/tari-project/tari/commit/c88d789e0e8ee2180279debb59f0d53e15db3b66))\n- fix birthday attack vulnerability in tari script offset (#2956) ([5174de0d](https://github.com/tari-project/tari/commit/5174de0d562b3ff444bceebeacbf3917b74dce85))\n- improve LWMA (#2960) ([db303e8c](https://github.com/tari-project/tari/commit/db303e8ca9632c6a6634e52cbfb6a79cd3e43a29))\n- **ffi:** `wallet_create` takes seed words for recovery (#2986) ([a2c6b17d](https://github.com/tari-project/tari/commit/a2c6b17de6fd8ac14a5379b0c44d34c1e1e71e2d))\n- **wallet:**\n  - add maturity to transaction detail (#3042) ([9b281cec](https://github.com/tari-project/tari/commit/9b281cec339fea5cad48ca84cb5698302792373f))\n  - ensure recovery will not overwrite existing wallet (#2992) ([70c21294](https://github.com/tari-project/tari/commit/70c21294fa87da8198e8b79f8b49d61bd6bee721))\n",
        "title": "Tari Base Node v0.9.0 Released",
        "date": "2021-07-07T00:00:00.000Z",
        "excerpt": "Tari Base Node v0.9.0 - Weatherwax Testnet, Now With TariScript Today the Tari development community merged and released a build of the Tari base node and console wallets that include .  is described...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-06-03-update-57",
        "content": "\n## Non-Interactive One Sided Payments with TariScript\n\nThis week the development community successfully tested sending non-interactive payments on the `tari-script` branch of Tari. Although still experimental at\nthis stage, the ability to send a transaction without the receiving wallet being online enables a number of use cases, including donations and multiparty payments. Previously these payments could still be done but could take much longer if either party was offline for a period.\n\nAlthough Mimblewimble achieves scaling through the pruning of outputs as they are spent, the participants in a transaction must interact to generate the signature on the kernel. One challenge in achieving this is that parties may not be online at the same time.\n\nLet's look at the process of assembling a transaction between Alice and Bob where Alice is sending Bob 1 TXTR (testnet Tari).\n\nStep 1: Alice creates her half of the transaction and sends it to Bob.\nStep 2: Bob updates his transaction and sends it back to Alice.\nStep 3: Alice then completes the transaction and broadcasts it to the network.\n\nFor more detail, see the [Mimblewimble Transactions Explained](https://tlu.tarilabs.com/protocols/mimblewimble-1/MainReport.html)\n\nIn this process, if Bob is offline for step 1, or Alice is offline for step 2, the process could take a long time. Tari has a Store-and-Forward mechanism to handle this scenario, but Alice and Bob must come online within 3 days to receive the transaction.\n\nWhat if you didn't want to run a wallet node to receive funds? For example, say you wanted to accept donations or send money to an address for your children to accept when they are older. In these situations, it may not be viable to run a wallet node.\n\nThis is where one-sided payments come in. One-sided payments are enabled by TariScript, and are explained in detail in [RFC-0201](https://rfc.tari.com/RFC-0201_TariScript.html#one-sided-payment).\nUsing a one-sided payment, Alice could build and broadcast the transaction to the network, and Bob at a later date could scan the blockchain and find his payments. The scanning process works similar to standard wallet recovery but requires that Alice build the transaction correctly.\n\nRight now if you want to try out one-sided payments, you will need to build the `tari-script` branch and run the `tari_console_wallet`. On the `Send` tab, you can either send transactions normally with `S`, or using one-sided payments using `O`.\n\n![Sending a transaction in Tari Console Wallet](../assets/updates/img/update-57-tari-console-wallet-one-sided.png)\n\nGive it a try and let us know in [Telegram](https://t.me/tariproject) or [Twitter](https://twitter.com/Tari) what your experience is.\n",
        "title": "Non-interactive One-sided Payments with TariScript",
        "date": "2021-06-03T00:00:00.000Z",
        "excerpt": "Non-Interactive One Sided Payments with TariScript This week the development community successfully tested sending non-interactive payments on the  branch of Tari. Although still experimental at this...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-05-10-update-56",
        "content": "\n## Tari Base Node v0.8.10 Released\n\nTari Base Node v0.8.10 has been released. This is a minor release with some fixes to bugs and possible vulnerabilities.\n\n## Test merge mining pool\n\nA test mining pool has been released at [https://testpool.tari.com/](https://testpool.tari.com/) for testing merge mining with XMR. To connect to it, use the following settings in `xmrig`:\n\n```\n \"pools\": [\n        {\n            \"url\": \"testpool.tari.com:5555\",\n            \"user\": \"<YOUR_TARI_ADDRESS>:<YOUR_STAGE_NET_MONERO_ADDRESS>\",\n            \"pass\": \"<IDENTIFIER>:<EMAILADDRESS>\",\n            ...\n        }\n    ],\n```\n\nChoose an identifier and email address. It's still in pre-alpha stage, so email delivery is not guaranteed.\n\nFor the testnet Tari, you can get the address from the `Public Key` field on the `Receive` tab of the `tari_console_wallet` or by long pressing on `Copy Emoji ID` on the `My Profile` page of the Tari Aurora mobile apps. In this example, I'll use `1E1CD11B750CD94BDD40916368E1F31119821B8F1B3FE132778B267676C8A955`\n\nYou'll need a stagenet Monero wallet address, or you can use the following address: `5AVbkiuchCWiMdF15PzVjsaTtDf8BmG9LQKDEJAdokjuYZJCdJUsoTvDGHMAXcKMhYYvTvQ5y29ozWitA8NECHRsFazgqqz`\n\nFor example:\n\n```\n \"pools\": [\n        {\n            \"url\": \"testpool.tari.com:5555\",\n            \"user\": \"1E1CD11B750CD94BDD40916368E1F31119821B8F1B3FE132778B267676C8A955:5AVbkiuchCWiMdF15PzVjsaTtDf8BmG9LQKDEJAdokjuYZJCdJUsoTvDGHMAXcKMhYYvTvQ5y29ozWitA8NECHRsFazgqqz\",\n            \"pass\": \"testminer:no-reply@example.com\",\n            ...\n        }\n    ],\n```\n\n## Changes included in v0.8.10\n\n### Base Node\n\n- [#2902](https://github.com/tari-project/tari/pull/2902) [base-node] Update Base Node Service monitor to shutdown correctly (#2902)\n- [#2874](https://github.com/tari-project/tari/pull/2874) [base-node] Refactor chain storage and rule out some target diff bugs\n- [#2875](https://github.com/tari-project/tari/pull/2875) [base-node] Insert pruned output audit\n- [#2878](https://github.com/tari-project/tari/pull/2878) [base-node] Emission math audit\n\n### Wallet\n\n- [#2891](https://github.com/tari-project/tari/pull/2891) [wallet] Fixes possible duration overflow in crossterm loop\n- [#2883](https://github.com/tari-project/tari/pull/2883) [wallet] Update connectivity status when base node changes\n\n### Other\n\n- [#2900](https://github.com/tari-project/tari/pull/2900) [tests] Fix cucumber test (#2900)\n- [#2888](https://github.com/tari-project/tari/pull/2888) [common] Consolidate config files into one\n- [#2881](https://github.com/tari-project/tari/pull/2881) [tests] Add transaction washer util script\n- [#2879](https://github.com/tari-project/tari/pull/2879) [common] Fix potential overflow and improve performance of n_leaves\n",
        "title": "Tari Base Node v0.8.10, Test Mining Pool",
        "date": "2021-05-10T00:00:00.000Z",
        "excerpt": "Tari Base Node v0.8.10 Released Tari Base Node v0.8.10 has been released. This is a minor release with some fixes to bugs and possible vulnerabilities. Test merge mining pool A test mining pool has...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-05-03-update-55",
        "content": "\n## Tari Base Node v0.8.9 Released\n\nTari Base Node v0.8.9 has been released. In this release, we have some performance improvements to the UTXO sync methods. This makes wallet recovery faster and also improves the speed of pruned mode's initial block download. There are also a few improvements to help debug and prevent network forks due to target difficulty.\n\nTari script development is progressing but is still in a pre-alpha stage. If you'd like to try it out, you'll need to download and run the [tari-script](https://github.com/tari-project/tari/tree/tari-script) branch. The first set of functionality the development community is working on is allowing payments to be made without the need for interaction with the other party. These are currently referred to as \"one-sided payments\" in the [RFCs](https://rfc.tari.com) and other documentation. Try it out and let us know what you think.\n\nChanges since v0.8.8:\n\n## Base Node\n\n- [#2870](https://github.com/tari-project/tari/pull/2870) [base-node] Fixes and tidies up prune mode cleanup\n- [#2857](https://github.com/tari-project/tari/pull/2857) [base-node] Optimise pruned UTXO sync streaming protocol\n- [#2868](https://github.com/tari-project/tari/pull/2868) [base-node] Test to reproduce target difficulty problem\n\n## Wallet\n\n- [#2867](https://github.com/tari-project/tari/pull/2867) [wallet] Add option to write unblinded UTXOs to CSV file\n- [#2862](https://github.com/tari-project/tari/pull/2862) [wallet] Add mined height to display of mined transactions in Console Wallet\n\n## Common\n\n- [#2876](https://github.com/tari-project/tari/pull/2876) [common] Fix incorrect boolean condition\n- [#2873](https://github.com/tari-project/tari/pull/2873) [tests] Fix case of cucumber\n- [#2837](https://github.com/tari-project/tari/pull/2837) [docs] Clarify one sided payment\n- [#2871](https://github.com/tari-project/tari/pull/2871) [tests] Update tests to use sha3\n- [#2855](https://github.com/tari-project/tari/pull/2855) [tests] Fix re-org test\n",
        "title": "Tari Base Node v0.8.9 Released",
        "date": "2021-05-03T00:00:00.000Z",
        "excerpt": "Tari Base Node v0.8.9 Released Tari Base Node v0.8.9 has been released. In this release, we have some performance improvements to the UTXO sync methods. This makes wallet recovery faster and also...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-04-21-update-54",
        "content": "\n## Tari Merge Mining Pool \n\nEarly support for Tari Merge Mining has been added to the [Tari fork of nodejs-pool](https://github.com/tari-project/nodejs-pool).\n\nIf you are adventurous and would like to run your own merge mining pool on your local machine, or deploy it on a public server you can\nfind some basic instructions to get you started in the [README.md](https://github.com/tari-project/nodejs-pool/blob/tari/README.md#tari-merge-mining).\n\nIf one or two evenings of devops doesn't appeal to you, we'll be making our deployment of nodejs-pool available for anyone to use in \nthe coming days. You'll be able to connect your miner (typically xmrig) to the pool. Just provide concatenated (tari:monero) wallet\naddresses and earn both testnet coins. \n\nFor example, if your _Tari_ address is `c6037038cce673cf1c1e26e7b7609ffbbba297eae4caf3ce7123a949c7af0162` and your _monero_ address is `581EfC8NL2yLZyavVrY2dGZNsqBzzcU5yE8iLrFwPLkQHxUckaWy8vjeLntrynGoBwLeKTBdgJ2rR66ZiqKogkhpS8DAMR3`\nyour xmrig config will be as follows: \n```json\n{\n  \"url\": \"address-to-pool.com:5555\",\n  \"user\": \"c6037038cce673cf1c1e26e7b7609ffbbba297eae4caf3ce7123a949c7af0162:581EfC8NL2yLZyavVrY2dGZNsqBzzcU5yE8iLrFwPLkQHxUckaWy8vjeLntrynGoBwLeKTBdgJ2rR66ZiqKogkhpS8DAMR3\",\n  \"pass\": \"miner-mcgee:mmg1999@gmail.com\",\n  \"coin\": \"monero\",\n  \"enabled\": true\n}\n```\n\nWe're excited to for the community to try this out!\n",
        "title": "Tari Merge Mining added to nodejs-pool",
        "date": "2021-04-21T00:00:00.000Z",
        "excerpt": "Tari Merge Mining Pool  Early support for Tari Merge Mining has been added to the Tari fork of nodejs-pool. If you are adventurous and would like to run your own merge mining pool on your local...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-04-14-update-53",
        "content": "\n## Tari Base Node v0.8.8 Released\n\nTari Base Node v0.8.8 has been released. It is a minor release, but includes a fix that should prevent network splits due to blocks being overwritten\nin the LMDB database by competing threads. The development community noticed that base nodes would calculate the target difficulty incorrectly when there was a large number of transactions in blocks. This increased the time taken to propagate blocks and resulted in a number of small one block reorgs.\nIt was also possible to start mining on a base node while it was syncing, causing an unpredictable state in the database. These issues have been fixed in this release.\n\nChanges since v0.8.7\n\n## Base node\n\n- [#2840](https://github.com/tari-project/tari/pull/2840) [base-node] Always output message when base node exits with an error\n- [#2830](https://github.com/tari-project/tari/pull/2830) [base-node] Add rpc sessions to base node status line\n\n## Wallet\n\n- [#2839](https://github.com/tari-project/tari/pull/2839) [wallet] Fix console wallet menu spacing\n- [#2816](https://github.com/tari-project/tari/pull/2816) [wallet] Improve wallet recovery resiliency\n- [#2834](https://github.com/tari-project/tari/pull/2834) [wallet] Add wallet recovery cucumber test, seed words to file\n\n## Other\n\n- [#2829](https://github.com/tari-project/tari/pull/2829) [common] Add database concurrency check\n",
        "title": "Tari Base Node v0.8.8 Released",
        "date": "2021-04-14T00:00:00.000Z",
        "excerpt": "Tari Base Node v0.8.8 Released Tari Base Node v0.8.8 has been released. It is a minor release, but includes a fix that should prevent network splits due to blocks being overwritten in the LMDB...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-04-02-update-52",
        "content": "\n## Tari Base Node v0.8.7 Released\n\nVersion 0.8.7 of Tari Base Node and related executables has been released. This is minor release with many fixes. Rewinding and reorging got a bit of attention with allowing to reorg past the pruning horizon, and also a fix to handle reorgs larger than 1000 blocks. These scenarios may be unlikely in\nmainnet when it's released, but it is still fairly easy to test and confirm these two scenarios in testnet.\n\nWork is continuing on Tari Script and you can follow the pull requests to the `tari-script` branch [here](https://github.com/tari-project/tari/pulls).\n\nChanges since v0.8.6\n\n### Wallet\n\n- [#2825](https://github.com/tari-project/tari/pull/2825) [wallet] Correctly log RPC error messages\n- [#2824](https://github.com/tari-project/tari/pull/2824) [wallet] Output error message for ConfigError\n- [#2818](https://github.com/tari-project/tari/pull/2818) [wallet] get_transaction_info no longer errors if any transaction is not found\n- [#2819](https://github.com/tari-project/tari/pull/2819) [wallet] Clear UI before starting UI loop\n- [#2798](https://github.com/tari-project/tari/pull/2798) [wallet] Add MinedUnconfirmed to command mode wait stage\n- [#2793](https://github.com/tari-project/tari/pull/2793) [wallet] Add menu to console wallet\n- [#2765](https://github.com/tari-project/tari/pull/2765) [wallet] Friendly incorrect password message\n- [#2753](https://github.com/tari-project/tari/pull/2753) [wallet] Update base node service to use RPC\n- [#2762](https://github.com/tari-project/tari/pull/2762) [wallet] Implement wallet recovery process in LibWallet FFI\n- [#2761](https://github.com/tari-project/tari/pull/2761) [wallet] Differentiate \"funds pending\" case in UTXO selection\n- [#2748](https://github.com/tari-project/tari/pull/2748) [wallet] Added saf message duration to configuration\n\n### Base Node\n\n- [#2814](https://github.com/tari-project/tari/pull/2814) [base-node] Add previous hash check to sync validator\n- [#2759](https://github.com/tari-project/tari/pull/2759) [base-node] Fix handling of large chain reorgs in header sync\n- [#2813](https://github.com/tari-project/tari/pull/2813) [base-node] Add rewind-blockchain and improve header-stats command\n- [#2795](https://github.com/tari-project/tari/pull/2795) [base-node] Update mempool consensus validator to check weight excluding coinbase\n- [#2738](https://github.com/tari-project/tari/pull/2738) [base-node] Rewind prune mode behind horizon\n- [#2768](https://github.com/tari-project/tari/pull/2768) [base-node] Add transaction consensus validator\n- [#2764](https://github.com/tari-project/tari/pull/2764) [base-node] Remove reorgs from total tx count\n- [#2755](https://github.com/tari-project/tari/pull/2755) [base-node] Node bootstraps after initial sync if all other nodes are h=0\n- [#2751](https://github.com/tari-project/tari/pull/2751) [base-node] Minor fix for list-headers\n\n### Mining\n\n- [#2807](https://github.com/tari-project/tari/pull/2807) [merge-mining] Added getLastBlockHeader cucumber test\n- [#2792](https://github.com/tari-project/tari/pull/2792) [mining-node] Added additional command line arguments\n- [#2791](https://github.com/tari-project/tari/pull/2791) [merge-mining] Add stdout information\n- [#2767](https://github.com/tari-project/tari/pull/2767) [mmproxy] Expanded cucumber tests for merged mining proxy\n- [#2743](https://github.com/tari-project/tari/pull/2743) [merge-mining] Fix logic flaw in proxy_request_to_monerod\n\n### Other\n\n- [#2826](https://github.com/tari-project/tari/pull/2826) [common] Add rpc_max_simultaneous_sessions setting to config\n- [#2823](https://github.com/tari-project/tari/pull/2823) [chore] Fix import\n- [#2822](https://github.com/tari-project/tari/pull/2822) [chore] Update prettier paths\n- [#2815](https://github.com/tari-project/tari/pull/2815) [comms] Connection manager requester not exposed on CommsNode\n- [#2820](https://github.com/tari-project/tari/pull/2820) [chore] Use prettier for integration tests\n- [#2821](https://github.com/tari-project/tari/pull/2821) [other] Add memory net summary\n- [#2757](https://github.com/tari-project/tari/pull/2757) [ci] Add all-targets to clippy\n- [#2796](https://github.com/tari-project/tari/pull/2796) [docs] Add WalletNotify info to config samples\n- [#2773](https://github.com/tari-project/tari/pull/2773) [tests] Add custom log file paths for wallet and mmproxy\n- [#2763](https://github.com/tari-project/tari/pull/2763) [tests] Update mempool waits to be dynamic\n- [#2769](https://github.com/tari-project/tari/pull/2769) [ci] Increase Cucumber CI to include all tests except \"long running\"\n- [#2747](https://github.com/tari-project/tari/pull/2747) [docs] Update rfc 201 for coinbase\n- [#2760](https://github.com/tari-project/tari/pull/2760) [chore] Removed some unused dependencies\n- [#2576](https://github.com/tari-project/tari/pull/2576) [common] Increase flood ban config\n- [#2572](https://github.com/tari-project/tari/pull/2572) [tests] Add cucumber test verify meddling with MMR sizes\n- [#2754](https://github.com/tari-project/tari/pull/2754) [common] Emit rerun-if-changed directives for include protos\n- [#2745](https://github.com/tari-project/tari/pull/2745) [ci] Point Circle CI status badge to development branch only\n- [#2744](https://github.com/tari-project/tari/pull/2744) [docs] Minor Fixes\n- [#2740](https://github.com/tari-project/tari/pull/2740) [chore] Remove the text_message_service from the wallet (#2740)\n- [#2739](https://github.com/tari-project/tari/pull/2739) [docs] Document the NO_OP TariScript vulnerability\n",
        "title": "Tari Base Node v0.8.7 Released",
        "date": "2021-04-02T00:00:00.000Z",
        "excerpt": "Tari Base Node v0.8.7 Released Version 0.8.7 of Tari Base Node and related executables has been released. This is minor release with many fixes. Rewinding and reorging got a bit of attention with...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-03-24-update-51",
        "content": "\n## Tari Console Wallet\n\nUntil recently, there was a wallet to hold your testnet tXTR packaged into the Tari base node. This built-in wallet was\nuseful for early testing, but interacting with it only through commands was limited. There are also the much prettier mobile app wallets, where the design is aimed at simplifying the process of sending funds. The standalone console based `tari_console_wallet` allows a user more insight and advanced\nfeatures, and also provides a place for the developers to implement features quicker, among other things.\n\nApart from the standard wallet functions, here are some other features exposed by the `tari_console_wallet`:\n\n### GRPC interface\n\nThe `tari_console_wallet` exposes a [gRPC interface](https://github.com/tari-project/tari/blob/development/applications/tari_app_grpc/proto/wallet.proto) for other applications, like mining pools, to interact. The two mining applications, `tari_mining_node` and `tari_merge_mining_proxy` call onto this interface to generate coinbase transactions when assembling blocks. You can also initiate transactions and query the balance or transactions via this interface.\n\nThe wallet can also be run in the background with no interface by starting it with `--daemon-mode`, or just `-d`.\n\n### Command mode\n\nThe `tari_console_wallet` can be used to run scripted commands using the `--command` command line argument. This allows a user to `get-balance` or `send-tari`. The development community often pushes a lot of transactions onto the network for testing using the `coin-split` and `make-it-rain` commands.\n\n### WalletNotify\n\nThe console wallet has also implemented `WalletNotify` functionality. This enables you to specify a script or program to be called when specific transaction events occur. For example, you could send a slack notification when a new transaction is received, or send an API request when a transaction is confirmed.\n\nThis setting can be set in the `config.toml` file with a `notify` key in the `[wallet]` section, which should be a string pointing to the script path. This script will be triggered with relevant arguments whenever these transaction events are detected:\n\n- a new transaction is received\n- a received transaction is mined, but still below the confirmation threshold\n- a received transaction has been mined and reached the configured number of confirmations\n- a transaction has been cancelled\n- a new transaction is sent\n\nYou can see an example notify script in the [Tari github repository](https://github.com/tari-project/tari/blob/8904bff7075a88c1613c474b0c03a67e220d7844/applications/tari_console_wallet/src/notifier/notify_example.sh).\n\nWe're excited to see what kind of cool integrations the Tari community comes up with!\n",
        "title": "More on the Tari Console Wallet",
        "date": "2021-03-24T00:00:00.000Z",
        "excerpt": "Tari Console Wallet Until recently, there was a wallet to hold your testnet tXTR packaged into the Tari base node. This built-in wallet was useful for early testing, but interacting with it only...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-03-15-update-50",
        "content": "\n## Tari is going green!\nNo, we're not switching to Proof of Stake. (LOL - [as if that would make a difference](https://www.truthcoin.info/blog/pow-cheapest)).\n\nBut we _are_ using Cucumber for Behavior Driven Development (BDD).\n\nYou may have noticed a lot of PR's and commits with the word \"cucumber\" in them. Tari uses [Cucumber](https://cucumber.io/), and specifically [Cucumber.js](https://github.com/cucumber/cucumber-js) to easily specify test scenarios in plain text. The tests can be found under the [integration_tests/features](https://github.com/tari-project/tari/tree/development/integration_tests/features) folder. The tests spin up base nodes, merge mining proxies and miners in a local, low difficulty network and interact with them via GRPC, simulating various scenarios that might happen on testnet.\n\nThe plain text method of specifying tests makes it easy to read, write and verify correctness of the tests.\n\nHere's a simple example that tests submitting blocks:\n\n```gherkin\n\nScenario: Mining example\n  Given I have 3 seed nodes\n  And I have a base node NODE_A connected to all seed nodes\n  When I mine 20 blocks on NODE_A\n  Then all nodes are at height 20\n\n```\n\nIn Cucumber tests, each line is a step, and will start with one of `Given`, `When` or `Then`. `And` can also be used to make the test easier to read, in which case it \nuses the keyword from the previous step. The `Given` keyword is used to set up the scenario, `When` is used to describe an action being performed, and `Then` is used to test \nwhether what we expected to happen, happened. ([Learn more about Gherkin syntax](https://cucumber.io/docs/gherkin/reference/))\n\nIn the above example we first set up 3 seed nodes. Every scenario runs in its own isolated local network, so in this case, we start by creating 3 nodes.\nWhen the test runs, it will run this Javascript definition found in [integration_tests/features/support/steps.js](https://github.com/tari-project/tari/blob/development/integration_tests/features/support/steps.js):\n\n```javascript\nGiven('I have {int} seed nodes', async function (n) {\n   ...\n});\n```\n\nNote: You don't need to know Javascript to write tests as long as you're using existing steps definitions, and there are a lot of those already defined. \n\n\n```gherkin\n  ...\n  And I have a base node NODE_A connected to all seed nodes\n  When I mine 20 blocks on NODE_A\n  ...\n```\n\nIn the next two steps we create a base node and name it `NODE_A` and then mine 20 blocks. The difficulty for this network is capped with a low maximum that allows us to create\nblocks very quickly. When the test runs, 20 blocks will be created and submitted to `NODE_A`. \n\n\n```gherkin\n  ...\n  Then all nodes are at height 20\n```\n\nThe last step we check that network behaved as we expected it to. We're expecting that the blocks were propagated to all four nodes on the network. If any of the nodes is not at height 20, the test will fail. For those interested, here's the simplified Javascript step definition that runs:\n\n```javascript\nThen('all nodes are at height {int}', async function (height) {\n    await this.forEachClientAsync(async (client, name) => {\n        const currTip = await client.getTipHeight();\n        expect(currTip).to.equal(height);\n    })\n});\n\n```\n\nInstructions on running the tests are available in the [README](https://github.com/tari-project/tari/tree/development/integration_tests) in the `integration_tests` folder.\n\nThe tests verify many scenarios, including [transaction propagation](https://github.com/tari-project/tari/blob/development/integration_tests/features/Mempool.feature), [re-orgs](https://github.com/tari-project/tari/blob/development/integration_tests/features/Reorgs.feature), [block propagation](https://github.com/tari-project/tari/blob/development/integration_tests/features/Propagation.feature) and [syncing](https://github.com/tari-project/tari/blob/development/integration_tests/features/Sync.feature),  and even [sending thousands of transactions](https://github.com/tari-project/tari/blob/development/integration_tests/features/StressTest.feature).\n\nThere's not much more to it, and this is a really simple entry point to contribute. If you get stuck, pop into the #tari-dev IRC on ~~freenode~~ Libera.Chat and ask a question.\n",
        "title": "Tari is going green",
        "date": "2021-03-17T00:00:00.000Z",
        "excerpt": "Tari is going green! No, we're not switching to Proof of Stake. (LOL - as if that would make a difference). But we are using Cucumber for Behavior Driven Development (BDD). You may have noticed a lot...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-03-10-update-49",
        "content": "\n## Tari Release v0.8.6\n\nThis release contains a fix for nodes running with a pruning horizon ([#2677](https://github.com/tari-project/tari/pull/2677)), as well as the final separation of wallet from the base node.\n\nBinaries are available [here](https://www.tari.com/downloads)\n\n## Changes since v0.8.5:\n\n### Base Node\n\n- [#2735](https://github.com/tari-project/tari/pull/2735) [base-node] Add messages in last 60s to status\n- [#2733](https://github.com/tari-project/tari/pull/2733) [base-node] get-block command accepts height or hash\n- [#2736](https://github.com/tari-project/tari/pull/2736) [base-node] Fix state machine never bootstraps with empty network\n- [#2677](https://github.com/tari-project/tari/pull/2677) [base-node] Fix UTXO horizon sum calculation\n- [#2715](https://github.com/tari-project/tari/pull/2715) [base-node] Remove wallet from base node\n- [#2709](https://github.com/tari-project/tari/pull/2709) [base-node] Removed miner from base node\n- [#2705](https://github.com/tari-project/tari/pull/2705) [base-node] Create minimal log4rs sample for seed nodes\n- [#2646](https://github.com/tari-project/tari/pull/2646) [base-node] Add GPRC call to search mempool\n\n### Wallet\n\n- [#2741](https://github.com/tari-project/tari/pull/2741) [wallet] Fix duplicate coinbase key generation, derive from height\n- [#2731](https://github.com/tari-project/tari/pull/2731) [wallet] Add list-utxos and count-utxos to command mode\n- [#2730](https://github.com/tari-project/tari/pull/2730) [wallet] Fix `make-it-rain` bug\n- [#2724](https://github.com/tari-project/tari/pull/2724) [wallet] Add whois command\n- [#2722](https://github.com/tari-project/tari/pull/2722) [wallet] Wallet should not broadcast invalid transactions\n- [#2708](https://github.com/tari-project/tari/pull/2708) [wallet] Fix base node selection UI not visible\n- [#2707](https://github.com/tari-project/tari/pull/2707) [wallet] Allow transactions sent to self\n\n### Merge Mining\n\n- [#2692](https://github.com/tari-project/tari/pull/2692) [merge-mining] Submit_block AUX data includes tari block hash\n\n### Other\n\n- [#2742](https://github.com/tari-project/tari/pull/2742) [tests] Fix rate_limit test flakiness\n- [#2732](https://github.com/tari-project/tari/pull/2732) [common] Expiry of SAF messages\n- [#2737](https://github.com/tari-project/tari/pull/2737) [tests] Tweak Cucumber stress tests to make them more stable\n- [#2728](https://github.com/tari-project/tari/pull/2728) [docs] Write up of wallet to wallet negotiation with TariScript\n- [#2726](https://github.com/tari-project/tari/pull/2726) [tests] Add custom log path for cucumber tests\n- [#2727](https://github.com/tari-project/tari/pull/2727) [tests] Update cucumber stress test timeouts\n- [#2720](https://github.com/tari-project/tari/pull/2720) [tests] Fix failing cucumber tests\n- [#2717](https://github.com/tari-project/tari/pull/2717) [tests] Fixed clippy errors and warnings for `cargo clippy --all-targets`\n- [#2719](https://github.com/tari-project/tari/pull/2719) [tests] Update Cucumber stress test to be a Scenario Outline\n- [#2723](https://github.com/tari-project/tari/pull/2723) [common] Add explicit rejection reason to RPC handshake\n- [#2687](https://github.com/tari-project/tari/pull/2687) [tests] Fix commslayer tests\n- [#2703](https://github.com/tari-project/tari/pull/2703) [common] Update README for Tari Mining Node\n- [#2690](https://github.com/tari-project/tari/pull/2690) [common] Use rusttls for dnssec for peer seeds\n",
        "title": "Tari Release v0.8.6",
        "date": "2021-03-12T00:00:00.000Z",
        "excerpt": "Tari Release v0.8.6 This release contains a fix for nodes running with a pruning horizon (#2677), as well as the final separation of wallet from the base node. Binaries are available here Changes...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-03-02-update-48",
        "content": "\n## Tari Release v0.8.5\n\nThis release is a minor release mainly containing fixes and updates to the wallet libraries that the mobile Tari Aurora apps use.\n\nBinaries are available [here](https://www.tari.com/downloads)\n\n## Tari Script RFC up for comments\n\n[RFC 201](https://rfc.tari.com/RFC-0201_TariScript.html) and [RFC 202](https://rfc.tari.com/RFC-0202_TariScriptOpcodes.html) relating to Tari Script have recently been merged into the development branch. In RFC stage they are still up for scrutiny and comment. The development community will start implementing these in the near future, so it's a great time to read through them and have your say.\n\n## Changes since v0.8.4\n\n### Base Node\n\n- [#2711](https://github.com/tari-project/tari/pull/2711) [base-node] Set default for blocks_behind_before_considered_lagging to 0\n- [#2680](https://github.com/tari-project/tari/pull/2680) [base-node] Change list-headers to view chain_headers instead\n- [#2674](https://github.com/tari-project/tari/pull/2674) [base-node] Add delay_lagging option to config to delay the time a node will go from listening to lagging\n\n### Wallet\n\n- [#2700](https://github.com/tari-project/tari/pull/2700) [wallet] Add discover-peer to console wallet command mode\n- [#2695](https://github.com/tari-project/tari/pull/2695) [wallet] Register coinbase in Console Wallet TUI\n- [#2693](https://github.com/tari-project/tari/pull/2693) [wallet] Add stream to console wallet grpc server\n\n### Merge Mining\n\n- [#2691](https://github.com/tari-project/tari/pull/2691) [merge-mining] Update XMRig version installation\n- [#2699](https://github.com/tari-project/tari/pull/2699) [merge-mining] Restored proxy to functional state\n\n### Other\n\n- [#2713](https://github.com/tari-project/tari/pull/2713) [tests] More CI integration test improvements\n- [#2712](https://github.com/tari-project/tari/pull/2712) [tests] Make Cucumber stop async\n- [#2710](https://github.com/tari-project/tari/pull/2710) [tests] Add cucumber reports and tests clean up\n- [#2688](https://github.com/tari-project/tari/pull/2688) [tests] Update ignore reason in tests\n- [#2704](https://github.com/tari-project/tari/pull/2704) Build all tari binaries and include in artifacts and disable feature builds with a single CPU build\n- [#2702](https://github.com/tari-project/tari/pull/2702) [chore] Fix merge issue\n- [#2686](https://github.com/tari-project/tari/pull/2686) [tests] Implement `stress test` cucumber test\n- [#2698](https://github.com/tari-project/tari/pull/2698) [tests] Fix wallet_ffi test\n- [#2696](https://github.com/tari-project/tari/pull/2696) [ci] Fix windows CI after intrin file was moved\n- [#2701](https://github.com/tari-project/tari/pull/2701) [chore] NPM audit fix\n",
        "title": "Tari Release v0.8.5",
        "date": "2021-03-02T00:00:00.000Z",
        "excerpt": "Tari Release v0.8.5 This release is a minor release mainly containing fixes and updates to the wallet libraries that the mobile Tari Aurora apps use. Binaries are available here Tari Script RFC up...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-02-18-update-47",
        "content": "\n## Tari Release v0.8.4\n\nThis release adds the stand alone SHA3 miner `tari_mining_node` to the installers. Some stability fixes were added to prevent store and forward message floods.\n\nBinaries are available [here](https://www.tari.com/downloads)\n\n## Tari Mining Node\n\nTo mine with the `tari_mining_node`, you'll need to start a `tari_base_node` and a `tari_console_wallet` with GRPC enabled (both are enabled by default). The mining node mines at least 50% faster than the previous miner included in the base node. You can specify the number of threads to mine by changing the `num_mining_threads` under the `[mining_node]` section of the config.\n\n## Changes since v0.8.2\n\n### Base Node\n\n- [#2635](https://github.com/tari-project/tari/pull/2635) [base-node] Add user agent to peer display info (#2635)\n- [#2626](https://github.com/tari-project/tari/pull/2626) [base-node] Add duplicate input_output tx validator\n\n### Wallet\n\n- [#2656](https://github.com/tari-project/tari/pull/2656) [wallet] Fixed timelocked balance\n- [#2632](https://github.com/tari-project/tari/pull/2632) [wallet] Update TXO validation protocol to use RPC interface to base node\n- [#2624](https://github.com/tari-project/tari/pull/2624) [wallet] Set confirmations required via libwallet and config\n- [#2644](https://github.com/tari-project/tari/pull/2644) [wallet] Add unique constraint to commitment in outputs table\n- [#2637](https://github.com/tari-project/tari/pull/2637) [wallet] Update Transaction Receiver protocol to persist transaction earlier\n- [#2625](https://github.com/tari-project/tari/pull/2625) [wallet] Remove the Tor identity getter from the FFI\n- [#2614](https://github.com/tari-project/tari/pull/2614) [wallet] New Transaction Validation protocol for Wallet\n- [#2619](https://github.com/tari-project/tari/pull/2619) [wallet] Add tx sending mechanism to wallet\n- [#2658](https://github.com/tari-project/tari/pull/2658) [wallet] Fix wallet startup\n\n### Mining Node\n\n- [#2652](https://github.com/tari-project/tari/pull/2652) [mining-node] Recreated symlinks without extension\n- [#2649](https://github.com/tari-project/tari/pull/2649) [mining-node] Add mining node to distribution\n\n### Merge Mining Proxy\n\n- [#2631](https://github.com/tari-project/tari/pull/2631) [mmproxy] Fix missing Content-Type header in some json responses\n- [#2616](https://github.com/tari-project/tari/pull/2616) [merge-mining] submit_block returns OK if block was submitted for tari or monero\n\n### Other\n\n- [#2655](https://github.com/tari-project/tari/pull/2655) [tests] Remove cancelled output excluded test\n- [#2647](https://github.com/tari-project/tari/pull/2647) [tests] Minor improvements to DHT logging\n- [#2653](https://github.com/tari-project/tari/pull/2653) [tests] Speed up `Transaction Info` Cucumber test\n- [#2643](https://github.com/tari-project/tari/pull/2643) [common] Dont propagate messages we have already\n- [#2612](https://github.com/tari-project/tari/pull/2612) [ci] Optimize integration tests\n- [#2651](https://github.com/tari-project/tari/pull/2651) [tests] Fix num confirmations test backend\n- [#2641](https://github.com/tari-project/tari/pull/2641) [common] Retry peers that have been marked as offline after a length of time\n- [#2650](https://github.com/tari-project/tari/pull/2650) [ci] Allow CI to use latest mdbook\n- [#2627](https://github.com/tari-project/tari/pull/2627) [tests] Double spend test for mempool transaction selection\n- [#2623](https://github.com/tari-project/tari/pull/2623) [chore] Add extra logging to help investigate fee mismatch\n- [#2630](https://github.com/tari-project/tari/pull/2630) [common] Shorter ban for RPC negotiation timeout in header sync, RPC timeout configurable\n- [#2629](https://github.com/tari-project/tari/pull/2629) [chore] Clean up duplicate check\n- [#2628](https://github.com/tari-project/tari/pull/2628) [tests] Add test_find_duplicate_input\n- [#2648](https://github.com/tari-project/tari/pull/2648) [ci] Run cargo test with verbose output\n- [#2638](https://github.com/tari-project/tari/pull/2638) [common] Ban peers that flood messages\n- [#2636](https://github.com/tari-project/tari/pull/2636) [explorer] Add a nodejs block explorer\n- [#2634](https://github.com/tari-project/tari/pull/2634) [fix] Dont store messages of a banned peer\n- [#2613](https://github.com/tari-project/tari/pull/2613) [tests] Add unit tests for lock heights\n- [#2660](https://github.com/tari-project/tari/pull/2660) [tests] Fix flaky test\n- [#2659](https://github.com/tari-project/tari/pull/2659) [common] Fix Windows runtime startup issues\n",
        "title": "Tari Release v0.8.4",
        "date": "2021-02-18T00:00:00.000Z",
        "excerpt": "Tari Release v0.8.4 This release adds the stand alone SHA3 miner  to the installers. Some stability fixes were added to prevent store and forward message floods. Binaries are available here Tari...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-02-09-update-46",
        "content": "\n## Tari Release v0.8.2\n\nVersion 0.8.2 has been released. This release was mainly to fix a bug in the target block time that was set too low in the Stibbons Testnet, which\nresulted in a short network split.\n\n### Wallet Notify in Console wallet\n\nThe ability to run some code whenever a wallet receives or sends a transactions, commonly referred to as \"Wallet Notify\", after the config setting in `bitcoind`,\nallows for some very simple integrations. This function is now available in the Tari Console Wallet. For example, you could write a script that sends an email or posts to your favorite chat app whenever your wallet receives, sends or completes a transaction.\n\n### Changes since v0.8.1:\n\nConsole Wallet:\n\n- [#2618](https://github.com/tari-project/tari/pull/2618) [console-wallet] Implement WalletNotify for console wallet TUI mode\n- [#2590](https://github.com/tari-project/tari/pull/2590) [console-wallet] Add filter to exclude not yet mature utxo's from transaction creation\n- [#2610](https://github.com/tari-project/tari/pull/2610) [console-wallet] View QR code on console wallet on low res screens\n- [#2597](https://github.com/tari-project/tari/pull/2597) [console-wallet] Add TXO validation to console wallet\n\nBase Node:\n\n- [#2615](https://github.com/tari-project/tari/pull/2615) [base-node] Cucumber test for GRPC method relating to block explorer\n- [#2609](https://github.com/tari-project/tari/pull/2609) [base-node] Restore get_network_difficulty GRPC method\n- [#2604](https://github.com/tari-project/tari/pull/2604) [base-node] Move capping of target difficulty\n- [#2596](https://github.com/tari-project/tari/pull/2596) [base-node] Update default pruning horizon to 1000\n\nMerge mining proxy:\n\n- [#2595](https://github.com/tari-project/tari/pull/2595) [MM_Proxy] Submit to origin daemon configuration\n- [#2593](https://github.com/tari-project/tari/pull/2593) Added Wallet Identify GRPC Methods, updated tests\n\nOther:\n\n- [#2607](https://github.com/tari-project/tari/pull/2607) [chore] Fix tests\n- [#2601](https://github.com/tari-project/tari/pull/2601) [chore] Add seed node names to preset config\n- [#2600](https://github.com/tari-project/tari/pull/2600) [chore] Remove unmaintained bigint dep\n- [#2598](https://github.com/tari-project/tari/pull/2598) [tests] Fix tests breaking due to Fee vs Sent amount validation\n- [#2599](https://github.com/tari-project/tari/pull/2599) [tests] Add cucumber integration test txn status\n- [#2571](https://github.com/tari-project/tari/pull/2571) [chore] Remove test net temp code\n- [#2570](https://github.com/tari-project/tari/pull/2570) [chore] Wallet db migration cleanup\n- [#2611](https://github.com/tari-project/tari/pull/2611) [chore] Fix tests\n- [#2480](https://github.com/tari-project/tari/pull/2480) [docs] Update pool mining on mainnet readme\n",
        "title": "Tari Release v0.8.2",
        "date": "2021-02-09T00:00:00.000Z",
        "excerpt": "Tari Release v0.8.2 Version 0.8.2 has been released. This release was mainly to fix a bug in the target block time that was set too low in the Stibbons Testnet, which resulted in a short network...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-02-01-update-45",
        "content": "\n## Stibbons Testnet Reset\n\nVersion 0.8.1 has been released a new genesis block, starting a new testnet: Stibbons. If you have an existing\nRidcully node, it's best to remove it completely and start a fresh node.\n\n### Console Wallet\n\n- Wallets can now be recovered using seed words [#2560](https://github.com/tari-project/tari/pull/2560)\n- Better transaction handling when switching base nodes [#2558](https://github.com/tari-project/tari/pull/2558)\n\n### Base Node\n\n- Pruned mode, a core feature of Mimblewimble, has been fixed and allows fast synching of the blockchain while also\n  using less storage space than a full archival node. [#2544](https://github.com/tari-project/tari/pull/2544)\n- The maximum number of RandomX virtual machines can now be set in the config to enable running on low memory machines. [#2567](https://github.com/tari-project/tari/pull/2567)\n\n### SHA3 Mining Node\n\n- The stand alone SHA3 miner logic has been improved to boost mining hash rate [#2539](https://github.com/tari-project/tari/pull/2539)\n\n### All changes since v0.7.2\n\n- [#2587](https://github.com/tari-project/tari/pull/2587) Correct block times\n- [#2572](https://github.com/tari-project/tari/pull/2572) Fix console wallet runtime calls\n- [#2559](https://github.com/tari-project/tari/pull/2559) Add Cucumber to CI\n- [#2574](https://github.com/tari-project/tari/pull/2574) Update libwallet build for Github actions\n- [#2583](https://github.com/tari-project/tari/pull/2583) Remove \"add one to port\" hack in console wallet\n- [#2585](https://github.com/tari-project/tari/pull/2585) Move generated proto files to OUT_DIR\n- [#2584](https://github.com/tari-project/tari/pull/2584) Update fee vs amount being sent validation\n- [#2578](https://github.com/tari-project/tari/pull/2578) Fix submit block in integration test\n- [#2576](https://github.com/tari-project/tari/pull/2576) Remove Ridcully references from Stibbons code\n- [#2582](https://github.com/tari-project/tari/pull/2582) Remove generated proto files from tari_core\n- [#2577](https://github.com/tari-project/tari/pull/2577) Fix for auotmated wallet startup\n- [#2544](https://github.com/tari-project/tari/pull/2544) Stibbons Testnet\n- [#2569](https://github.com/tari-project/tari/pull/2569) Update timestamp for Stibbons\n- [#2567](https://github.com/tari-project/tari/pull/2567) Add ability to set maximum number of RandomX VMs\n- [#2568](https://github.com/tari-project/tari/pull/2568) Fix off-by-one error in target difficulty\n- [#2566](https://github.com/tari-project/tari/pull/2566) Assign wallet GRPC port for cucumber tests\n- [#2565](https://github.com/tari-project/tari/pull/2565) Refactor wallet bootup to not cause confusion\n- [#2564](https://github.com/tari-project/tari/pull/2564) Fix cucumber tests for Windows use\n- [#2561](https://github.com/tari-project/tari/pull/2561) Add WalletTransfer feature to cucumber tests\n- [#2560](https://github.com/tari-project/tari/pull/2560) Implement wallet recovery from seed words\n- [#2550](https://github.com/tari-project/tari/pull/2550) Encrypt Node_id and Tor_id at rest\n- [#2563](https://github.com/tari-project/tari/pull/2563) Update default wallet confirmation time\n- [#2562](https://github.com/tari-project/tari/pull/2562) Fix returned field name in getTransactionInfo call\n- [#2558](https://github.com/tari-project/tari/pull/2558) Implement TXO validation on Base Node switching in LibWallet\n- [#2557](https://github.com/tari-project/tari/pull/2557) Run cucumber tests using release mode\n- [#2553](https://github.com/tari-project/tari/pull/2553) Added getVersion call to wallet GRPC\n- [#2555](https://github.com/tari-project/tari/pull/2555) Up stibbons lock height\n- [#2545](https://github.com/tari-project/tari/pull/2545) Implement new Transaction Broadcast Protocol using base node RPC\n- [#2511](https://github.com/tari-project/tari/pull/2511) Add chain height to list-connections output\n- [#2549](https://github.com/tari-project/tari/pull/2549) Update ReadMe for iOS build on Big Sur\n- [#2542](https://github.com/tari-project/tari/pull/2542) [Merge Mining] Remove merge mining template on successful submission\n- [#2548](https://github.com/tari-project/tari/pull/2548) Remove unused sys-info dependency\n- [#2516](https://github.com/tari-project/tari/pull/2516) from mikethetike/mb-pruned2\n- [#2539](https://github.com/tari-project/tari/pull/2539) Boost mining speeds\n",
        "title": "Tari Release v0.8.1",
        "date": "2021-02-01T00:00:00.000Z",
        "excerpt": "Stibbons Testnet Reset Version 0.8.1 has been released a new genesis block, starting a new testnet: Stibbons. If you have an existing Ridcully node, it's best to remove it completely and start a...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-01-25-update-44",
        "content": "\nThis Thursday 29 Jan 2021 will be the start of the Stibbons test net.\nRidcully will be retired shortly afterwards. The main reason for the reset is\nthe addition of kernel and output counts to the block headers to enable\nbetter synching with a pruning horizon.\n\nSome other changes:\n\n- The coinbase lock height will increase to 60\n- The default confirmation time in wallets will be 6 blocks\n- The pruning horizon will be 1000 blocks and will be enabled by default. Full\n  archival nodes can still be run, by removing the pruning horizon setting from\n  the config.\n",
        "title": "Stibbons Testnet Reset",
        "date": "2021-01-25T00:00:00.000Z",
        "excerpt": "This Thursday 29 Jan 2021 will be the start of the Stibbons test net. Ridcully will be retired shortly afterwards. The main reason for the reset is the addition of kernel and output counts to the...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2021-01-18-update-43",
        "content": "\nVersion 0.7.2 brings a number of major changes. Most notably block sync speed has been increased dramatically with the merging of [#2436](https://github.com/tari-project/tari/pull/2436) for SHA3 blocks and [#2483](https://github.com/tari-project/tari/pull/2483) for RandomX blocks. The blockchain database structure\nhas changed, so you'll need to delete your `db` folder and sync from scratch.\n\nNodes are now downloading seeds via DNS at `seeds.ridcully.tari.com`.\n\nA standalone SHA3 miner was also [merged](https://github.com/tari-project/tari/pull/2513), fixing a lot of the bugs in the miner included in the base node. In the near future the wallet and miner in the base node will be removed entirely.\n\n## Some other major changes:\n\n- [#2477](https://github.com/tari-project/tari/pull/2477) Integrate Rewindable outputs into Transactions.\n  This is a precursor to wallet recovery. By storing information in the bullet proof, a wallet will be able scan the blockchain to find UTXOs that belong to it.\n- [#2496](https://github.com/tari-project/tari/pull/2496) Remove Pending and Orphan pool from Mempool. These extra pools were open to abuse and only catered\n  for advanced scenarios, which were not yet implemented. At a later stage they may be added back, but for now the community decided to remove them to simplify\n  development and testing.\n- [#2494](https://github.com/tari-project/tari/pull/2494) Add console wallet passphrase encryption.\n",
        "title": "Tari Base Node v0.7.2 released",
        "date": "2021-01-18T00:00:00.000Z",
        "excerpt": "Version 0.7.2 brings a number of major changes. Most notably block sync speed has been increased dramatically with the merging of #2436 for SHA3 blocks and #2483 for RandomX blocks. The blockchain...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-11-25-update-42",
        "content": "\nAfter the Ridcully testnet reset, the community has been able to find and fix some critical bugs. Release v0.6.1 brings\na number of fixes including an important fix to the process of recovering from an unsuccessful reorg. This should make the\nnetwork more stable and prevent network segregation due to banning.\n\nThe community has also implemented a number of fixes and features in the console wallet, including showing the balance and custom fees.\n\nDistributing seed peers via DNS is included in this release, but there are no official DNS seeds yet. If you'd like to test it out on your own DNS, the format is specified [here](https://github.com/tari-project/tari/pull/2319).\n\n## Major changes since v0.6.0\n\n- [#2431](https://github.com/tari-project/tari/pull/2431) Database refactor to replace MMR checkpoints with a more efficient and simpler approach; fix reorg failures\n- [#2352](https://github.com/tari-project/tari/pull/2352) Add DNS seed support in base node\n- [#2383](https://github.com/tari-project/tari/pull/2383) Implement daemon-mode in `tari_base_node`. Starts the base node in a non-interactive mode when the `--daemon-mode` argument is present\n- [#2419](https://github.com/tari-project/tari/pull/2419) Allow specifying a custom fee in the console wallet\n\n## Minor changes since v0.6.0\n\n- [#2448](https://github.com/tari-project/tari/pull/2448) Add OpenSSL to Windows install, runtime\n- [#2434](https://github.com/tari-project/tari/pull/2434) Add supervisord setup notes\n- [#2439](https://github.com/tari-project/tari/pull/2439) Provide initial sync status to merge mining proxy\n- [#2377](https://github.com/tari-project/tari/pull/2377) Message malleability detect and ban\n- [#2447](https://github.com/tari-project/tari/pull/2447) Fix for xmrig powershell script\n- [#2440](https://github.com/tari-project/tari/pull/2440) Stagenet Setup Guide Corrections\n- [#2444](https://github.com/tari-project/tari/pull/2444) DHT connectivity waits for comms connectivity before starting\n- [#2427](https://github.com/tari-project/tari/pull/2427) Update merge mining runtime, README, Win install\n- [#2420](https://github.com/tari-project/tari/pull/2420) Show base node chain tip and sync status in the console wallet\n- [#2421](https://github.com/tari-project/tari/pull/2421) Fix QR code rendering in the console wallet\n- [#2423](https://github.com/tari-project/tari/pull/2423) Plumb in the balance in the console wallet\n- [#2415](https://github.com/tari-project/tari/pull/2415) Prevent loop in peer sync by storing all peers attempted\n- [#2407](https://github.com/tari-project/tari/pull/2407) Simplify automated stress test\n- [#2397](https://github.com/tari-project/tari/pull/2397) Fix preset config files\n- [#2400](https://github.com/tari-project/tari/pull/2400) Implement wallet base node service\n- [#2403](https://github.com/tari-project/tari/pull/2403) Add exclusive file locks to Wallet, Chain and Peer db’s\n- [#2408](https://github.com/tari-project/tari/pull/2408) Fix wallet conversion error for a valid tx status\n- [#2356](https://github.com/tari-project/tari/pull/2356) Combine validation code to use same function in pruned and archive mode.\n- [#2371](https://github.com/tari-project/tari/pull/2371) Add configurable BN service request timeouts\n- [#2430](https://github.com/tari-project/tari/pull/2430) Implement entry and persistence of custom base node in console wallet\n",
        "title": "Tari base node v0.6.1 released",
        "date": "2020-11-25T00:00:00.000Z",
        "excerpt": "After the Ridcully testnet reset, the community has been able to find and fix some critical bugs. Release v0.6.1 brings a number of fixes including an important fix to the process of recovering from...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-10-27-update-41",
        "content": "\n## Testnet Ridcully released with base node v0.6.0\n\nThe current testnet Rincewind has reached its end. Ridcully will replace it starting with a new genesis block. If you have a previous base node, you\nshould uninstall it first and do a clean install of v0.6.0. The install packages are available [on the downloads page](https://www.tari.com/downloads/).\n\n## Major changes since v0.5.8\n\n- Removal of Blake proof of work algorithm\n- Addition of Sha3 proof of work algorithm\n- Reset genesis block for testnet Ridcully\n- Remove linked kernel field from kernel\n- Remove metadata field from kernel\n- Add config option to disable wallet in Base Node [PR](https://github.com/tari-project/tari/pull/2379)\n- Remove DhtJoin reply and only send join when node comes online [PR](https://github.com/tari-project/tari/pull/2361)\n\n## Minor changes since v0.5.8\n\n- Set port + 1 for base node wallet in TCP mode [PR](https://github.com/tari-project/tari/pull/2359)\n- Simplify and improve thread config [PR](https://github.com/tari-project/tari/pull/2367)\n- Reduce base node service request timeout [PR](https://github.com/tari-project/tari/pull/2368)\n- Increase short term ban duration [PR](https://github.com/tari-project/tari/pull/2372)\n- Clean up errors in DHT pipeline [PR](https://github.com/tari-project/tari/pull/2362)\n- Various improvements to network discovery [PR](https://github.com/tari-project/tari/pull/2373)\n- Bug fix for offline connectivity state [PR](https://github.com/tari-project/tari/pull/2376)\n- Remove cyclic ban if online [PR](https://github.com/tari-project/tari/pull/2375)\n- Fix for network discovery state machine spin loop [PR](https://github.com/tari-project/tari/pull/2378)\n- Fix transaction service bug with tx send/receive cancellation [PR](https://github.com/tari-project/tari/pull/2354)\n- Base node block sync RPC service [PR](https://github.com/tari-project/tari/pull/2348)\n- Add more integration tests [PR](https://github.com/tari-project/tari/pull/2358)\n\n## Console wallet changes since v0.5.8\n\n- Display connected peers in TUI [PR](https://github.com/tari-project/tari/pull/2353)\n- Implement pending transaction cancellation in the TUI app [PR](https://github.com/tari-project/tari/pull/2374)\n\n## libwallet changes since v0.16.7\n\n- Add a client key-value store to the wallet and wallet_ffi [PR](https://github.com/tari-project/tari/pull/2363)\n",
        "title": "Tari base node v0.6.0 released. New testnet Ridcully!",
        "date": "2020-10-27T00:00:00.000Z",
        "excerpt": "Testnet Ridcully released with base node v0.6.0 The current testnet Rincewind has reached its end. Ridcully will replace it starting with a new genesis block. If you have a previous base node, you...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-10-19-update-40",
        "content": "\nThis week we saw nodes with version v0.5.6 and higher upgrade to new consensus rules at block 120,000. There were also contributions to distributing seed peers via DNS and some more work done on the console wallet.\n\n## Testnet reset 28 October 2020\n\nIt's been about 6 months on the current testnet and the development community has uncovered a lot of bugs, but a reset has been long overdue. The next release (planned around 28 October 2020) will start from height 0 with a new genesis block. This means that any testnet tXTR that you have in your wallet will disappear, so it's probably best to exchange it for some goods at the [TTL store](https://store.tarilabs.com/) before then. If you have any questions, feel free to ask on the Telegram or IRC channels.\n\n## NodeJS integration tests\n\n[PR 2339](https://github.com/tari-project/tari/pull/2339) adds the beginnings of some much needed integration tests in NodeJS. This is a great place to help out if you have Javascript skills and would like to get involved.\n\n## Tari Base Node v0.5.8 released\n\nRelease v0.5.8 is a minor release that includes some changes to the wallet console application.\n\n## Major changes since 0.5.6\n\n- Console Wallet Automation for send and make-it-rain\n  [PR](https://github.com/tari-project/tari/pull/2291)\n\n- Added a check after\n  block sync that the difficulty advertised by peers is at least as high as the\n  actual difficulty of the synced chain.\n  [PR](https://github.com/tari-project/tari/pull/2334)\n\n- Implement transaction sending in the TUI and introduce an asynchronous\n  event monitor to update TUI state based on wallet backend events.\n  [PR](https://github.com/tari-project/tari/pull/2351)\n\n- Fix `target_diff` calculation. There was a bug in the calculation of target difficulty\n  introduced in v0.5.6 where the current block time was included in the difficulty window.\n\n## Minor changes since v0.5.6\n\n- Added a DNS seed resolver that parses TXT records to obtain seed node\n  details (PublicKey, Addresses) tuple. This has not been integrated with any\n  Tari applications yet. [PR](https://github.com/tari-project/tari/pull/2319)\n\n- Small refactor of `fetch_headers`\n  [PR](https://github.com/tari-project/tari/pull/2338)\n\n- Change Tor archive location for Windows install\n  [PR](https://github.com/tari-project/tari/pull/2345)\n\n- Add node.js integration tests\n  [PR](https://github.com/tari-project/tari/pull/2339)\n\n- Expose latency for last call for client RPC connections\n  [PR](https://github.com/tari-project/tari/pull/2340)\n\n- Update TUI Transaction listing and Contact management\n  [PR](https://github.com/tari-project/tari/pull/2337)\n\n- Migrate the now deprecated and unmaintained dirs dependency to dirs-next\n  [PR](https://github.com/tari-project/tari/pull/2350)\n",
        "title": "Tari base node v0.5.8 released",
        "date": "2020-10-19T00:00:00.000Z",
        "excerpt": "This week we saw nodes with version v0.5.6 and higher upgrade to new consensus rules at block 120,000. There were also contributions to distributing seed peers via DNS and some more work done on the...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-10-12-update-39",
        "content": "\n## Tari Base Node v0.5.6 released with hard fork changes\n\nRelease v0.5.6 comes with a number of improvements to the distributed hash table (DHT) network and block propagation\nstrategy. These aim to solve the problem of nodes getting isolated from the network.\n\nThis version also has some consensus rule changes that some into effect on block 120,000. This should be mined some\ntime on Sunday 18th October. These changes will fork the chain, so we encourage all testnet node operators and miners\nto upgrade to v0.5.6 as soon as possible. The rule changes fix, among others, an issue on the monero block difficulty calculation\nand switching the emission curve to pure integer-based math.\n\n### Major features since v0.5.5\n\n- Propagate block hashes to all connected nodes [PR](https://github.com/tari-project/tari/pull/2232)\n- Fixed difficulty calculation on Monero proof of work blocks [PR](https://github.com/tari-project/tari/pull/2250)\n- Remove floating-point calculation from achieved difficulty [PR](https://github.com/tari-project/tari/pull/2190)\n- Introduce peer syncing and network discovery to improve a node's overall knowledge of the network [PR](https://github.com/tari-project/tari/pull/2252)\n- Improve `Closest` broadcast strategy and use it for SAF transaction broadcast [PR](https://github.com/tari-project/tari/pull/2290)\n- Implement variation of block percentage between proof of work algorithms [PR](https://github.com/tari-project/tari/pull/2231)\n- Use an integer-based emission curve to replace floating-point emission curve after testnet block 120000 [PR](https://github.com/tari-project/tari/pull/2246)\n\n### Minor changes since v0.5.5\n\n- Allow client application to control when transaction broadcast protocols are restarted [PR](https://github.com/tari-project/tari/pull/2221)\n- Expose kernel excess, public nonce, and signature via wallet FFI [PR](https://github.com/tari-project/tari/pull/2230)\n- Fix possible inflation bug [PR](https://github.com/tari-project/tari/pull/2251)\n- Only update mempool after block sync is complete [PR](https://github.com/tari-project/tari/pull/2242)\n- Add the ability to search for blocks containing transaction kernels via GRPC [PR](https://github.com/tari-project/tari/pull/2245)\n- Refactored to get the actual reason a tx failed to be logged [PR](https://github.com/tari-project/tari/pull/2260)\n- Reduce ban time for sync peers [PR](https://github.com/tari-project/tari/pull/2249)\n- Decouple Mempool and BlockchainDatabase [PR](https://github.com/tari-project/tari/pull/2257)\n- Optimisation for MMR + clippy fixes [PR](https://github.com/tari-project/tari/pull/2265)\n- Delay UTXO validation process until after initial blockchain sync has been achieved [PR](https://github.com/tari-project/tari/pull/2243)\n- Implement tools to produce network graphs in memory net examples [PR](https://github.com/tari-project/tari/pull/2258)\n- Add daily binary build for Tari Base Node with S3 upload [PR](https://github.com/tari-project/tari/pull/2270)\n- Allow fee to be larger than the amount per configuration setting, to allow spending dust in some edge cases [PR](https://github.com/tari-project/tari/pull/2262)\n- Fix Name collision in `types.proto` [PR](https://github.com/tari-project/tari/pull/2266)\n- Add reason peer is banned [PR](https://github.com/tari-project/tari/pull2272), [PR](https://github.com/tari-project/tari/pull/2285)\n- Implement STXO validation in the wallet’s Output Manager Service [PR](https://github.com/tari-project/tari/pull/2264)\n- Handle runtime error by removing an unnecessary dial-peer command, otherwise, when sometimes it is not successful, the code panics [PR](https://github.com/tari-project/tari/pull/2282)\n- Add examples for Service Framework [PR](https://github.com/tari-project/tari/pull/2276)\n- Fix target difficulty for block 1 on rincewind [PR](https://github.com/tari-project/tari/pull/2284)\n- Cache orphan pool results in memory [PR](https://github.com/tari-project/tari/pull/2287)\n- Refactor basenode/wallet/p2p initialization [PR](https://github.com/tari-project/tari/pull/2280)\n- Add the Mempool RPC service [PR](https://github.com/tari-project/tari/pull/2301)\n- Add `unban-all-peers` command [PR](https://github.com/tari-project/tari/pull/2310)\n- Add list-banned-peers command to base node [PR](https://github.com/tari-project/tari/pull/2312)\n- DHT RPC get_peers returns all peers and \"on connect\" mode for NetworkDiscovery [PR](https://github.com/tari-project/tari/pull/2306)\n- Add recovery mode [PR](https://github.com/tari-project/tari/pull/2214)\n- Add chain tip tracking of all peers [PR](https://github.com/tari-project/tari/pull/2318)\n- Allow the chain meta service to react to banned peers by removing them from its internal collection [PR](https://github.com/tari-project/tari/pull/2314)\n- Base node shuts down cleanly\n",
        "title": "Tari base node v0.5.6 released",
        "date": "2020-10-12T00:00:00.000Z",
        "excerpt": "Tari Base Node v0.5.6 released with hard fork changes Release v0.5.6 comes with a number of improvements to the distributed hash table (DHT) network and block propagation strategy. These aim to solve...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-10-04-update-38",
        "content": "\n## tl;dr\n\nThere were a lot of bugs fixed last week, most notably an elusive error with merge mining and RandomX.\n\nThere’s still a bit of polish required on the merge mining side, but it is improving every week.\n\nRight now you can solo mine against a single Tari base node and monerod.\nMining pool integration is up next.\n\nThere was also a fix that eliminates ties in difficulty when the hash rate is low.\nWork continues on stabilizing the network and preventing network splits.\n\n## Other PR highlights this week\n\n### \\#2309: Integrate connectivity manager for Liveness service\n\nThe Liveness service drives the chain metadata service which in turn allows the base node state machine to determine if it needs to transition to sync mode.\n\nThis change uses connectivity manager to select a random subset of active connections for each ping/pong round. Selecting active connections is extremely cheap and can be done often. Banned peers cannot be selected as connectivity immediately disconnects and removes the peer from active connections once banned.\n\nOnce implemented, this change will improve the stability and robustness of the network.\n\n### \\#2306: DHT RPC get_peers returns all peers and \"on connect\" mode for NetworkDiscovery\n\nNodes will now request a full list of peers when connecting to the network to get a fuller picture of the overall  \nnetwork.\n\nWhen implemented, this change will reduce the chance of partitions occurring in the network and increasing overall network stability.\n\n### \\#2310: Added `unban-all-peers` command\n\nYou can now \"unban all peers\" from the CLI interface\n\n### \\#2288: Clean up all the remaining clippy warnings\n\nThe Tari codebase now has the Rust compiler stamp of approval :)\n",
        "title": "Tari core developer update",
        "date": "2020-10-04T00:00:00.000Z",
        "excerpt": "tl;dr There were a lot of bugs fixed last week, most notably an elusive error with merge mining and RandomX. There’s still a bit of polish required on the merge mining side, but it is improving every...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-09-21-update-37",
        "content": "\nIt's been a few hairy weeks since the last update. We had testnet stop for a while and saw some large reorgs since adding\nmerge-mined Monero blocks to the chain. Although the large forks weren't intended, it allowed us to find and fix a number\nof bugs. There's still some work to be done, but the network is getting more resilient all the time.\n\nHere are some of the highlights since v0.5.3\n\n- Many fixes and updates to tari_merge_mining_proxy. This program proxies requests from RandomX miners to\n  _monerod_ in order to allow mining tXTR and Monero at the same time.\n- Implement transaction negotiation message resending in the wallet.\n- Implement LMDB automatic resizing during sync.\n",
        "title": "Tari core developer update",
        "date": "2020-09-24T00:00:00.000Z",
        "excerpt": "It's been a few hairy weeks since the last update. We had testnet stop for a while and saw some large reorgs since adding merge-mined Monero blocks to the chain. Although the large forks weren't...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-09-04-update-36",
        "content": "\n![I ❤️ Hybrid](../assets/img/hybrid.jpg)\n\nWe mined our first Monero block yesterday! We're so proud!\n\n![Well done](https://media.giphy.com/media/e2QYPpUe8WmpG/giphy.gif)\n\n\nHere she is:\n\n```\nHeader hash: 5ff50c2ee49223f032f764cc1b57b3c4c8867872bea64d65ea471e86c4714100\nVersion: 1\nBlock height: 89446\nPrevious block hash: b45ba1914101be859f2cae9b32a2bbb4fd0a78a47c9de2b0c3d7c125ff9b0b26\nTimestamp: Thu, 03 Sep 2020 10:00:23 +0000\nMerkle roots:\nOutputs: 22a4b5f7c8529b84ebecafa886ec4e8ae161bf94c0dfe0c54e95098bb7508b4b\nRange proofs: 8d24cba436b79260cd6bc8944b7ea8c555ea5dc8144a230cf0ab45d5e3f044cc\nKernels: e49809795e2e85a6600d816fffa102dad4bef1737ae5199f6e49387731ecf96b\nTotal offset: 0000000000000000000000000000000000000000000000000000000000000000\nNonce: 0\nProof of work:\nMining algorithm: Monero, Target difficulty: 1\nTotal accumulated difficulty:\nMonero=2, Blake=784656795120530\nPow data: 0c000000000000000c00000000000000b6be505f0000000092cdcd89a4b04c9b1d9b266babacdf346665ed505b4f6803b7ca1db1e21db1ab24190000400000000000000031623133396433363739353636343434663334636634336364343031323737353034323530666266636661353536623930323537643961346163393361653637010082644c37d8746a8e2f56287e7e0ba83514a586441d21790799d2910d7ff139bf010000000000000082644c37d8746a8e2f56287e7e0ba83514a586441d21790799d2910d7ff139bf020000000000000031080a0000000000010000000000000000000000f5070a00000000000100000000000000ea7b0d796c0900000100000084726e1f99d25c208ec4709a1c309fc846a91ff9770f8c796ed4479bcb92e7ed030000000000000000000000a78030673641fd907837ca364f890a5b869cde4d97d16f97d7f3adaff30bc4eb0100000008000000000000004b4cc744aabc95b30300000000000000000000006a835cdff2bd64dbdce655f9f21e06e2365cd3d593946ede62deabc7bd21a22200000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000\n```\n\nSo cute! She weighed in a little light with a target difficulty of 2 and a height of\n[89446](https://explore.tari.com/block/89446), but the block and mother chain are healthy and doing great.\n\nSo now you can go ahead and earn testnet Tari _and_ testnet Monero if you so desire.\n\nTo start merge mining with Monero, you need to set up XMRig. There are some\n[instructions on how to do this in the Tari repo](https://github.com/tari-project/tari/tree/development/applications/tari_merge_mining_proxy).\nThey could use a little love, so once you're up and running, why not\n[contribute a PR](https://github.com/tari-project/tari/edit/development/applications/tari_merge_mining_proxy/README.md)\nand improve them a little bit? Your fellow community members will love you for it, just as we all love little Blocky446.\n",
        "title": "It's a monero block!",
        "date": "2020-09-04T00:00:00.000Z",
        "excerpt": "!I ❤️ Hybrid We mined our first Monero block yesterday! We're so proud! !Well done Here she is:  So cute! She weighed in a little light with a target difficulty of 2 and a height of 89446, but the...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-08-21-update-35",
        "content": "\n## Major changes since v0.4.2\n\n- Add option to sync with a pruning horizon (Experimental)\n- New application `tari_merge_mining_proxy` which XMRig can be connected\n  to in order to merge mine Monero blocks. (Experimental)\n- Correctly setup wallet default onion and local forwarding ports ([#2150](https://github.com/tari-project/tari/pull/2150))\n\n## Minor features and bug fixes since v0.4.2\n\n- Migrate to `thiserror` and remove `derive-error`\n- Present an emission curve algorithm that uses only integer math\n- Add user agent to peer in `list-peers` and `list-connections` commands\n- Various comms layer improvements\n- Reorganize GRPC files\n- Add the functionality for an external application to request a complete\n  Coinbase transaction from the wallet by providing the reward, fees and block\n  height at which this coinbase will appear.\n- Fix Windows Tor installation script ([#2115](https://github.com/tari-project/tari/pull/2115)).\n- Removed admin requirements from Windows installation\n- Add search via kernel, STXO and UTXO functions to the backend and to the CLI\n- Add extra validation to `wallet_get_pending_X_transaction_by_id`\n- Added support for OS-assigned proxied listening address ([#2138](https://github.com/tari-project/tari/pull/2138))\n- Add support for optional rolling log files to FFI library ([#2133](https://github.com/tari-project/tari/pull/2133))\n- Multiple OutboundProtocolExited events for the same peer are acceptable\n  and should not cause a panic. ([#2132](https://github.com/tari-project/tari/pull/2132))\n- Fix Tor download URL for the Windows installation ([#2148](https://github.com/tari-project/tari/pull/2148))\n- Fix mining ON/OFF toggle delayed response ([#2096](https://github.com/tari-project/tari/pull/2096))\n\n## Other\n\n- First iteration on the tari comms RPC protocol\n",
        "title": "Tari Base Node v0.5.3 Released",
        "date": "2020-08-21T00:00:00.000Z",
        "excerpt": "Major changes since v0.4.2 - Add option to sync with a pruning horizon (Experimental) - New application  which XMRig can be connected   to in order to merge mine Monero blocks. (Experimental) -...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-08-14-update-34",
        "content": "\nIt's nearly there! After\n[two](/2019/10/14/tari-protocol-discussion-47.html)\n[rounds](/2020/06/12/tari-protocol-discussion-52.html) of intense community discussion, the final proposal for the Tari\nproof-of-work strategy has been released as an [RFC].\n\nThis means that the proposal is open for comment, and is thus subject to change, but short of any compelling arguments\nto the contrary, it's very likely that Tari's proof of work will be implemented as described in the RFC.\n\nIn summary, the RFC proposes the following:\n\nTari will employ a hybrid mining approach. It will comprise two mining algorithms, with an average combined target block\ntime of 120 s, to match Monero's block interval.\n\nThe first algorithm is CPU-friendly: Monero merged-mining using RandomX. On average, 60% of blocks will be mined using\nRandomX.\n\nThe second algorithm is a Tari-only, independent, \"GPU-friendly\" SHA-3-based proof-of-work algorithm. An\naverage of 40% of Tari blocks will be found using this algorithm.\n\nThe [RFC] has more details on how and why these algorithms were selected.\n\nThanks also go out to\n[@HansieOdendaal](https://github.com/hansieodendaal), who performed several deep dives on PoW response simulations. For\nthose that are interested, his reports are all available ([1](https://demo.codimd.org/s/S1rTlu9-P),\n[2](https://demo.codimd.org/s/HkU4-vmAU),\n[3](https://demo.codimd.org/s/rJ0y2U7RI),\n[4](https://demo.codimd.org/s/r15okbz08)) for your reading pleasure.\n\n[RFC]: https://rfc.tari.com/RFC-0131_Mining.html\n\n",
        "title": "Final proof-of-work proposal open for comment",
        "date": "2020-08-14T00:00:00.000Z",
        "excerpt": "It's nearly there! After two rounds of intense community discussion, the final proposal for the Tari proof-of-work strategy has been released as an [RFC]. This means that the proposal is open for...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-08-04-update-33",
        "content": "\n## Pruned mode\n\nYou can now run your base node in pruned mode. Pruned mode is an important feature of Mimblewimble that significantly\nreduces the size required to store the block chain by removing spent transactions.\n\nThe feature is still experimental and there's still work to be done, but if you want to test it so long, you'll need to\nrun the latest source and update your config.\n\nMore instructions are in the repo.\n\n## Merge mining\n\nThere were some more contributions to merge mining and the stand alone wallet\n\n## Other\n\n[@sdbondi](https://github.com/sdbondi) proposed implementing a more bounded and structured approach to protocols on\n  the Tari p2p network in order to make development and testing easier.\n\n",
        "title": "Developer update",
        "date": "2020-08-04T00:00:00.000Z",
        "excerpt": "Pruned mode You can now run your base node in pruned mode. Pruned mode is an important feature of Mimblewimble that significantly reduces the size required to store the block chain by removing spent...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-07-22-update-32",
        "content": "\nThe mobile community is working on the following features to make Aurora even better:\n\n* Automated backups and wallet restore is currently in beta testing. A full roll-out of this highly anticipated\n  feature is expected in the next week or so, barring any unexpected roadblocks.\n* The Android version of Aurora is also getting its own automated release process on Github actions. When live, this\n  will free up several hours a week for the lead maintainer to focus on building awesome features for Aurora rather than\n  wrestling with the Android build process and the Play store.\n* The Aurora community is currently discussing some new designs for the transaction feed, which aims to bring more\n  information about your transactions front and centre and,\n* (I love this one) a Nav bar to help you find several great features that are currently hidden away a little bit.\n\nThings are also moving on the protocol and base node front:\n\n* Work has started on cleanly separating the wallet process from the base node executable. This feature will take some\n  effort and so is an ongoing process.\n* A few of the core protocol contributors have started working on a merge mining implementation for Monero. This is\n  likely to take a few months, so even though the overall proof-of-work strategy has not been finalised yet, merge\n  mining will be in the picture, so it makes sense to get a head start on that.\n* There's also some work going on looking at a few reliability edge cases that popped up during the last stress test.\n",
        "title": "Developer update",
        "date": "2020-07-22T00:00:00.000Z",
        "excerpt": "The mobile community is working on the following features to make Aurora even better:  Automated backups and wallet restore is currently in beta testing. A full roll-out of this highly anticipated  ...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-07-16-update-31",
        "content": "\nHere's one for the tech nerds.\n\nTari core protocol contributor,\n[@sdbondi](https://github.com/sdbondi) has written\n[Part I](https://www.tari.com/lessons/06_tari_comms_i.html) of a deep dive into the Tari P2P messaging system.\n\nThis tutorial covers the transports that are used, how a peer connection is built and maintained, how Tor integration\nworks, what the Tari messaging protocol looks like, and how to build a communications stack.\n\nEven if you aren't super technical, give this lesson a quick read; it will give you an sense of what goes into\nbuilding a completely private, peer-to-peer network on the internet.\n\nICYMI there are also several other tutorials on the site:\n\n* [How to run a Tari Node on Windows 10](https://www.tari.com/lessons/00a_Execute_Tari_Node_Windows_10.html)\n* [Learning the Tari Codebase](https://www.tari.com/lessons/00_introduction.html)\n* [Introduction to Keys](https://www.tari.com/lessons/01_keys.html)\n* [How Tari Works - Part I](https://www.tari.com/lessons/02_how_tari_works.html)\n* [Signing a Message](https://www.tari.com/lessons/03_signatures.html)\n* [How Tari Works - Part II](https://www.tari.com/lessons/04_how_tari_works_ii.html)\n* [Working with Emoji Id](https://www.tari.com/lessons/05_emoji_id.html)\n\n",
        "title": "New Tari lesson available",
        "date": "2020-07-16T00:00:00.000Z",
        "excerpt": "Here's one for the tech nerds. Tari core protocol contributor, @sdbondi has written Part I of a deep dive into the Tari P2P messaging system. This tutorial covers the transports that are used, how a...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-07-07-update-30",
        "content": "\n## Stress test 3 results\n\nStarting at block 50868 on July 9 at 14:11 (UTC), Tari core developer\n[@Hansieodendaaal](https://github.com/hansieodendaal) bombarded testnet with over 38000 transactions.\n\nA full Tari block can currently accommodate around 650 transactions, so this represented a significant flood of the\nnetwork.\n\nUltimately, here's what happened:\n\n|                                                          |     TX |    % |\n|:---------------------------------------------------------|-------:|-----:|\n| Transactions sent                                        | 38,160 |      |\n| Transactions successfully broadcast                      | 32,936 |  86% |\n| Transactions mined (out of total)                        | 32,922 |  86% |\n| Transactions mined (inc retries, out of those broadcast) | 32,922 | 100% |\n\nHere are the key takeaways:\n\n* Of the transactions that were broadcast, nearly all of them were ultimately mined. Our accounting here is not perfect\n  -- a full audit of the transaction list will take longer, but it looks like it may well have been 100%.\n* 14% of the transactions did not get broadcast. This meant they were stuck in \"pending\" mode somewhere. The core devs\n  are still investigating what happened, but it looks like it may have been because one of the receiving wallets\n  was not reachable at any point during the test. This may explain the majority of the transaction failures, but it's\n  still speculation at this point.\n* 1,500 transactions were only broadcast and mined at the \"second bite of the cherry\", once the sending wallets decided\n  to retry the transactions. This indicates that the peer-to-peer process is not perfect yet, but is reasonably\n  eventually consistent.\n\nOverall this represents a significant improvement over the last stress test. A quick trip down memory lane:\n\n* The first stress test was a disaster. A bug in the message deduplication code resulted in the test essentially DDOSing\n  the network. Only 5% of transactions were mined in that test.\n* The second test went much better; there was no inadvertent DDOSing, but the test highlighted areas in the code that\n  blocked up the main execution thread and prevented efficient message handling. Default message buffers were also much\n  too small, resulting in many dropped messages. In that test, the majority of transactions were broadcast, but only 25%\n  were eventually mined.\n* This test had 86% of transactions broadcast, and all of those were mined.\n\nThe community is still poring over the GB of logs produced in the tests, but some early themes for improving the results\nfor the next test are emerging:\n\n* If a node is running, but cannot talk to the network for some reason, it should make more noise. This is particularly\n  true of the seed nodes, that Aurora clients rely on to communicate with the network.\n* Buffer sizes can be further tweaked to reduce bottlenecks.\n* Find out where transactions are getting stuck in the signing protocol to move that 86% towards 100%.\n\nA more detailed analysis was posted on [IRC](https://yac.metalworks.tarilabs.com/uploads/db5bdb18712f1152/Stress%20test%20of%2020200710%20Analysis.md).",
        "title": "Stress test results",
        "date": "2020-07-14T00:00:00.000Z",
        "excerpt": "Stress test 3 results Starting at block 50868 on July 9 at 14:11 (UTC), Tari core developer @Hansieodendaaal bombarded testnet with over 38000 transactions. A full Tari block can currently...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-07-07-update-29",
        "content": "\nHello Tariland! Here's a quick note to keep you all abreast of what the dev community is currently involved in.\n\n## Another stress test incoming\n\nThe Tari developer community will be running another stress test on the Tari Testnet on Wednesday, 8 July. The network\nwill be highly congested for the duration of the test, so you can expect longer than usual transaction times and\n(possibly) failed transactions.\n\nThe core dev contributors have been working tirelessly to make the network more robust and if things go perfectly, there\nwill be a massive dump of transactions and then 5 - 6 hours of full blocks as they get mined out. Performance under\nheavy congestion has improved dramatically in each test so far, and so there's some cautious optimism that the network\nwill handle this test gracefully. 🤞\n\n## Mobile developments\n\nThe mobile community is currently working on wallet encryption. This is a key feature for obvious reasons.\n\nThere have been a few reports trickling in that the Aurora iOS app is crashing sporadically. This is on the dev\ncommunity's radar, so bear with us while that gets sorted out.\n\n## Core protocol developments\n\nYou know how the last 20% takes 80% of the time? Pruning mode is definitely an example of that little truism, but things\nare moving forward slowly but surely.\n\nThere's also a lot going on under the hood to support wallet encryption, and finally, preliminary work has begun on\nseparating the wallet and the base node into two separate processes.\n\nThe Proof-of-work debate is reaching a conclusion, and it looks like rough community consensus will be reached soon. You\ncan catch up on that conversation on Freenode IRC at #tari-dev.\n",
        "title": "Developer community update",
        "date": "2020-07-07T00:00:00.000Z",
        "excerpt": "Hello Tariland! Here's a quick note to keep you all abreast of what the dev community is currently involved in. Another stress test incoming The Tari developer community will be running another...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-06-29-update-28",
        "content": "\nTo call the current release cycle sub-optimal would be rubbing salt into a non-zero gradient wound.\n\nUntil recently, the process was something like\n\n* The dev community on #tari-dev would notice that the codebase's chakras were properly aligned, it was a Tuesday, or\n  that it had been three weeks since the last release. Sometimes a combination of all three.\n* This would trigger a flurry of activity involving manually building a set of binaries, OSX packages and Windows\n  installers.\n* These builds would then be uploaded to the Tari website and everyone would heave a big sigh of relief before noticing\n  that it was already Thursday and the chakras were all mis-aligned again.\n\nToday the flow is so much better:\n\n* The dev community on #tari-dev notices that the codebase's chakras are properly aligned, it's a Tuesday, or that it's\n  been three weeks since the last release. Sometimes a combination of all three.\n* The lead maintainer tags the new version and pushes the tag to Github.\n* Magic happens.\n* New binaries appear on the Tari downloads page.\n\nThis process has saved many hours of manual labour among dev community and freed up much needed time for them to work on\ntheir Hearthstone laddering and CT meme game.\n\nThat said, things aren't perfect yet.\n\nThere are only automated builds for:\n* Mobile libraries\n* GNU/Linux executables\n* OSX executables (not the full package installer, just the node binary)\n\nStill missing are:\n* Windows binaries / installers\n* OSX installer packages\n\n(_Psst_: If you're a script wizard and develop on a Mac or Windows machine and want to contribute/improve the Github\nactions to fill these gaps, let us know!)\n\n## So why is this important?\n\nGranted, while it's not the most mentally taxing collectible card game out there, Hearthstone is still very popular, and\nif you're not tracking the meta, your deck will be absolutely crushed.\n\nIt's also pretty helpful in fixing the **\"I keep getting illegal instruction crashes\"** issue that has been affecting\nquite a few people.\n\nLet's pause for a second and let me mansplain what's happening if you get this error.\n\nAs you might imagine, Tari's code employs a lot of intensive number crunching. Let's say there's some code that requires\nus to multiply two columns of numbers together. We could have the compiler generate a loop and call `MUL` (for multiply)\nfor every pair. Every CPU knows how to do this. But we're building the code on a machine with a cool new instruction,\n`FANCY_MUL` that can do this in one go, and it's 100x faster than the loop version. Obviously, we want to use this instruction and\nthe compiler just happens to be smart enough to recognise that it can replace the loop with one instruction. So it does just that\nand the Tari community releases these blazing fast binaries that run so well on newish machines.\n\nClever Tari devs!\n\nBut now you come along and run that code on your older machine. Everything works fine until it hits the `FANCY_MUL`\ninstruction. Your CPU says \"I don't know what that is! Screw it!\" and whiny rage quits. Your OS is only slightly more polite and\ndumps an `Illegal Instruction (core dumped)` error into your terminal before quitting.\n\nStupid Tari devs!\n\nThis is where the automated builds can help. Not only do automated builds save a ton of time, it's now also fairly simple to configure a bunch of builds\nfor a range of architectures and CPUs! In fact, if you hop over to <https://tari.com/downloads>, you'll see a few new entries.\n\nThere are tari base node binaries for\n\n* older than 7 years (look for links containing `x86_64`)\n* 4-7 year old CPUs (look for links with `ivybridge`)\n* recent CPUs (`skylake`)\n\nThere are plans to refine the process and add even more architectures and supported chipsets in the future, but this is a great start. In particular, if\nyou've been getting the `Illegal instruction` error on Linux, _please_ try and run the [x86_64 safe version](https://tari-binaries.s3.amazonaws.com/linux/tari_base_node-ubuntu-x86-64-safe-0.4.2.bz2)\nand let us know if the problem goes away. The dev community really relies on the wider community to test this sort of thing.\n\n",
        "title": "Automating base node builds",
        "date": "2020-06-29T00:00:00.000Z",
        "excerpt": "To call the current release cycle sub-optimal would be rubbing salt into a non-zero gradient wound. Until recently, the process was something like  The dev community on #tari-dev would notice that...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-06-26-update-27",
        "content": "\n🎉🎉🎉 Tari Base Node v0.4.2 is\n[available for download now](https://tari.com/downloads) 🍾🍾🍾\n\nThis release has some **breaking peer-to-peer changes**, so you are strongly encouraged to **upgrade as soon as\npossible** so that your node's performance stays in tip-top shape.\n\nOlder nodes (from v0.2.4 and up) will still synchronise the block chain, but they won't understand the new block\npropagation improvements and so will always be lagging behind their peers.\n\nNow let's lift the hood and peer at some of the highlights:\n\n## Block propagation improvements\n\nAs of v0.4.2 nodes propagate a block hash (33 bytes) instead of the full block. This will significantly reduce network\nbandwidth usage for block propagation (For math nerds, full block messages drop from 𝒪(n²) to 𝒪(n)). If every node is\npropagating to 10 peers on average, that's roughly a 90% bandwidth reduction.\n\nOn receipt of a block hash a node checks if it has the block. If so, it simply ignores the message. Otherwise, it\nrequests the full block from the peer that sent the hash.\n\n## Resolve peer DNS addresses with Tor if it is available\n\nThis is a privacy enhancing change that applies to nodes running in TCP mode with Tor support. Previously, connecting to\na peer's DNS address would use the system's DNS resolution and that can be exploited to de-anonymise users.\n\n## New emoji set support 😀👍🏽🤣!\n\nv0.4.2 brings the new emoji set into the base node CLI. This will resolve any issues you have copying and pasting emoji\nids from Aurora v0.2.0 and up into the node CLI.\n\nThere's more detail on the emoji set changes in\n[a previous dev update](https://www.tari.com/updates/2020-06-10-update-23.html).\n\n## gRPC support for base nodes\n\nThe base nodes now support gRPC. This will allow us to decouple the wallet and base node executables. To see the gRPC\ninterface in action, you can peruse the\n[Block Explorer Source Code](https://github.com/tari-project/blockchain-explorer-api), which makes heavy use of gRPC.\n\n## Initial Mempool sync\n\nOn startup, a node will now try and sync its mempool with a peer. Previously, mempools only filled up organically via\ntransaction propagation. This is fine for most nodes, but if you're a miner, you really want to know about existing\ntransactions when you start up so that you can mine full blocks.\n\n## `get-block` now has a format specifier\n\n`get-block` adds a format specifier which allows the user to print blocks in text or json format. The latter is useful\nin testing.\n\n### Example:\n\n`>> get-block 1 text  // OR get-block 1`\n\n```text\n----------------- Block -----------------\n--- Header ---\nVersion: 1\nBlock height: 1\nPrevious block hash:\n4a5af9e5dd60c2ab012ef8d75a465c6864b0e59c258f3ea76ea45ae93a332fac\nTimestamp: Sun, 26 Apr 2020 07:15:47 +0000\nMerkle roots:\nOutputs:\n2d15a802253ee980a841130cae89dd4b1536a8ab4b9f218337bb097936df48c9\nRange proofs:\nd6122998802c2f47de31a21e5912656f4b9744d88584c680e2412f588e4fca18\nKernels:\na455d1c3574c7283eeef45905897b8013edd36121ab4a00c6589ed58218013f4\nTotal offset:\n0000000000000000000000000000000000000000000000000000000000000000\nNonce: 11608557920783722845\nProof of work:\nMining algorithm: Blake, Target difficulty: 60000000\nTotal accumulated difficulty:\nMonero=1, Blake=2\nPow data:\n\n---  Body  ---\n--- Transaction Kernels ---\nKernel 0:\nFee: 0 µT\nLock height: 0\nFeatures: COINBASE_KERNEL\nExcess: 9cef94920fefc544e181c296150acad6171f141ef2c68a1eb290a009d0e22909\nExcess signature:\n{\"public_nonce\":\"0842cd1d3ed1171c880157f2316df8ca0ed84cd6628259b3548d368ca4f79313\",\"signature\":\"fe4bd3b639a47dd24aa4408ee4fbfc02ec0a17558dde15b2d392a82a56697503\"}\nMeta_info: None\nLinked_kernel: None\n\n--- Inputs (0) ---\n--- Outputs (1) ---\n68367c184428a77feadfc2c64caab4ca3997ab18bdcea12250ac174fa8018329\n[OutputFeatures { flags: COINBASE_OUTPUT, maturity: 61 }] Proof:\nf0be62d27d39d09a..89a81a0901399805\n```\n\n`>> get-block 1 JSON`\n\n```json\n{\n  \"header\": {\n    \"version\": 1,\n    \"height\": 1,\n    \"prev_hash\": \"4a5af9e5dd60c2ab012ef8d75a465c6864b0e59c258f3ea76ea45ae93a332fac\",\n    \"timestamp\": 1587885347,\n    \"output_mr\": \"2d15a802253ee980a841130cae89dd4b1536a8ab4b9f218337bb097936df48c9\",\n    \"range_proof_mr\": \"d6122998802c2f47de31a21e5912656f4b9744d88584c680e2412f588e4fca18\",\n    \"kernel_mr\": \"a455d1c3574c7283eeef45905897b8013edd36121ab4a00c6589ed58218013f4\",\n    \"total_kernel_offset\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n    \"nonce\": 11608557920783722845,\n    \"pow\": {\n      \"accumulated_monero_difficulty\": 1,\n      \"accumulated_blake_difficulty\": 2,\n      \"target_difficulty\": 60000000,\n      \"pow_algo\": \"Blake\",\n      \"pow_data\": []\n    }\n  },\n  \"body\": {\n    \"sorted\": true,\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"features\": {\n          \"flags\": {\n            \"bits\": 1\n          },\n          \"maturity\": 61\n        },\n        \"commitment\": \"68367c184428a77feadfc2c64caab4ca3997ab18bdcea12250ac174fa8018329\",\n        \"proof\": \"f0be62d27d39d09a9f528..<SNIP>..a0901399805\"\n      }\n    ],\n    \"kernels\": [\n      {\n        \"features\": {\n          \"bits\": 1\n        },\n        \"fee\": 0,\n        \"lock_height\": 0,\n        \"meta_info\": null,\n        \"linked_kernel\": null,\n        \"excess\": \"9cef94920fefc544e181c296150acad6171f141ef2c68a1eb290a009d0e22909\",\n        \"excess_sig\": {\n          \"public_nonce\": \"0842cd1d3ed1171c880157f2316df8ca0ed84cd6628259b3548d368ca4f79313\",\n          \"signature\": \"fe4bd3b639a47dd24aa4408ee4fbfc02ec0a17558dde15b2d392a82a56697503\"\n        }\n      }\n    ]\n  }\n}   \n```\n\n### And lots more\n\nThe full release notes are on\n[GitHub](https://github.com/tari-project/tari/releases/tag/v0.4.2).\n\n",
        "title": "Tari Base node v0.4.2 release notes",
        "date": "2020-06-26T00:00:00.000Z",
        "excerpt": "🎉🎉🎉 Tari Base Node v0.4.2 is available for download now 🍾🍾🍾 This release has some breaking peer-to-peer changes, so you are strongly encouraged to upgrade as soon as possible so that your...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-06-25-update-26",
        "content": "\n## Welcoming your new emoji overlords\n\nAttention, Aurorans! Users on this newest version will not be able to transact with users from earlier versions, and vice versa.\n\nWhy? Because your Emoji ID will change.\n\n![Screenshot]({{ site.base_url }}/assets/img/posts/update-image1.gif)\n\n\nThe emoji set used for addresses was changed to thwart Telegram, which has a nasty habit of borking many Emoji IDs pasted there by changing their gender (and thus their underlying unicode). Some emoji weren’t supported on older Android devices either. To learn more about what changed and the fates of individual emojis, check out [Cayle’s post on the topic]({{ site.base_url }}/updates/2020-06-10-update-23.html). \n \n## Back up and restore from the cloud\n\nIf you’re not into emojis, one might hope you’re still into securing your fake money. Hit the gear icon on the profile screen to back up your wallet to iCloud or Google Drive (on iOS and Android respectively), so you can restore it onto a different device if your phone is lost or broken. \n\n\n## Android battery life improvements\n\n\nIn this day and age, there’s one thing people of all political stripes seem to be able to agree on: battery life. We want more of it. Aurora’s new low power mode on Android should help deliver just that when the app is in the background.\n\n## A Private Aurora\n\nThere’s now a privacy-flavored version of the Android app available to download thanks to the initiative of contributor [Andrii](https://github.com/nyarian). The Tari Aurora private release removes all requests to central servers (Tari tXTR faucet, Tari push notification server, Tari Matomo analytics server and Tari Sentry bug reporting server) from the regular release. It also removes the Google APIs used for backup and restore feature, which means there's no backup and restore support in the private release as of v0.2.0. You also won't be able to get free tXTR since a request needs to be made to the Tari central faucet server. The private release APK can be downloaded here: [https://github.com/tari-project/wallet-android/releases/tag/v0.2.0-jniLibs-0.13.0](https://github.com/tari-project/wallet-android/releases/tag/v0.2.0-jniLibs-0.13.0)\n\n## What else?\n\nOther iOS updates:\n\n*   Improved Emoji ID extraction from clipboard\n*   Improved reminder notifications asking you to open the app to accept incoming tXTR in the event that your phone fails to automatically accept it\n\nOther Android updates:\n\n*   Better UI support for smaller screen sizes\n*   Ability to remove a contact name from transaction detail screen\n*   Reduced application bundle size\n*   Better network connectivity\n",
        "title": "Aurora Wallet 0.2.0 Release notes",
        "date": "2020-06-25T00:00:00.000Z",
        "excerpt": "Welcoming your new emoji overlords Attention, Aurorans! Users on this newest version will not be able to transact with users from earlier versions, and vice versa. Why? Because your Emoji ID will...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-06-18-update-25",
        "content": "\n## 2001 spaced oddities\n\nIt took 11 months of coding to merge the first 1,000 PRs into the Tari codebase.\nIt took just another 7 months to merge the next 1,000.\n\nYes, there have been over TWO THOUSAND contributions to the tari protocol codebase since the core protocol project\nreally kicked off in December 2018.\n\n👏👏👏 A big round of thanks and appreciation to all the contributors that have worked so hard to get this project to\nwhere it is today. 👏👏👏\n\n## It's block exploring time\n\nThe MVP for the Tari Block explorer is [now live](https://explore.tari.com).\n\n![Everybody gets a block explorer]({{ site.base_url }}/assets/img/posts/oprah_explorer.jpg)\n\nAnd it looks pretty good:\n\n![Screenshot]({{ site.base_url }}/assets/img/posts/be_explorer.jpg)\n\nAs usual all the code is open source, if you'd like to check out the\n[backend API](https://github.com/tari-project/blockchain-explorer-api) or\n[front-end code](https://github.com/tari-project/block-explorer-frontend).\n\nIf you've been wanting to contribute code to the Tari project, but were a bit nervous about Rust, blockchains and\ncryptography, then look no further than these two repos! It's all node.js and ReactJS goodness, and there are plenty of\ntweaks and rough edges that cold use your help.\n",
        "title": "Another odyssey of sorts",
        "date": "2020-06-18T00:00:00.000Z",
        "excerpt": "2001 spaced oddities It took 11 months of coding to merge the first 1,000 PRs into the Tari codebase. It took just another 7 months to merge the next 1,000. Yes, there have been over TWO THOUSAND...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-06-17-update-24",
        "content": "\nIt's been a while since the last developer update. But that's not because development has eased up. There are a few\n_yuge_ updates and features in the works, but they're taking a little longer to get out the door than was originally\nanticipated.\n\nThe various contributors have been in their hovels / burrows / cages (I assume that's where developers live) putting on\nthe final touches to these big new features:\n\n* New emoji set (we discussed this quite a bit in the\n  [last update](https://www.tari.com/updates/2020-06-10-update-23.html)).\n* Aurora wallet backups and restores, for both Android and iOS. Yup, your tXTR are still worthless, but 1,500,000 x 0 is\n  better than 0 x 0 for some people.\n* Low Power mode for Aurora Android. Yes! You asked for it, the mobile contributors are delivering!\n* More efficient block propagation between nodes (reducing block-related bandwidth up to 90% in some cases).\n* Not enough?\n\n![Are you not ENTERTAINED?!](http://www.quickmeme.com/img/a5/a53f26725588e6f02eee7fd1275ee15d869f44ff1f56c4ff27d2c9e97b4205dd.jpg)\n\n* Well how about pruned mode? Pruned mode dramatically reduces the amount of data needed for initial block download when\n  starting up a fresh node. The pruned mode sync implementation is about 80% done.\n* Oh wait, there's more! I don't want to give the game away, but it rhymes with \"rock hack sporer\".\n\n### Reminder - Merge mining discussion\n\nThe Tari community is continuing the discussion on Proof of Work algorithms on Freenode IRC in #tari-dev. If you have an\nopinion, let's hear it. For context, the full transcript of the community meeting on this topic is on\n[tari.com](https://www.tari.com/2020/06/12/tari-protocol-discussion-52.html).\n",
        "title": "Bumper changes a-coming",
        "date": "2020-06-17T00:00:00.000Z",
        "excerpt": "It's been a while since the last developer update. But that's not because development has eased up. There are a few yuge updates and features in the works, but they're taking a little longer to get...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-06-10-update-23",
        "content": "\n## Emoji set changes\n\nWe've merged changes into the core emoji set! The reasons for this are:\n\n* Some emoji weren't supported on older Android devices.\n* A few emoji have issues when being copied / pasted into common chat apps.\n\nThe set we've now proposed has been thoroughly tested and has minimal issues in most common chat apps.\n\n### So what does this mean? ###\n\nIt means your emoji ID is going to change. _Sorry._ 😿\n\nBut nothing else really changes, and nothing really breaks.\n\nHere's why:\n\nYour emoji id is an encoding of your node or wallet id on the network. The underlying node id isn't going to change (unless you re-install the app from scratch), just its\nrepresentation.Think of it like this - If you use Google to translate what you ate for breakfast from English to Portuguese, the words on the screen change, but the underlying\nmeaning hasn't changed. That's basically what this emoji set update represents.\n\nSo this means that you keep your testnet funds, and everything works as before. You contacts will automatically update to reflect their new emoji ids too.\n\nIn fact, the only thing that _won't_ work is if you paste an emoji id into your wallet that was copied from an older version of the app, and vice versa. And even if _that_ happens,\nthe new version of Aurora will detect the older format and warn you about it.\n\n### What's actually changing?\n\nOk, so here are the emojis that have been _removed_ (131 in total). If they aren't displaying on your device properly as you read this, you'll understand why they were removed:\n\n```text\n😀 🤣 😊 😘 🤗 🤩 🤔 🙄 😮 🤐 😴 😛 🤤 🙃 🤑 😤 😨 🤯 😬 🤪 😵 🤢 🤮 🤠 🤡 🤫 \n🤭 🤓 🤖 😺 👶 👩 👨 👮 🤴 👸 🧜 🙅 🙋 🤦 🤷 💇 🏃 💃 🧗 🛀 🛌 👤 🏄 🚴 🤹 💏 \n👪 💪 👈 👍 ✋ 👊 👐 🙏 🤝 💅 👂 🧠 👄 💖 💙 💥 💫 🧣 🧤 🧦 👜 🧢 🐒 🦁 🦄 🐫 \n🦒 🐇 🐔 🦆 🦀 🦋 🌲 🥑 🥕 🥜 🧀 🍖 🍿 ⛺ 🚔 ⛽ ⛵ 🛫 🛸 ⌛ ⏰ 🕙 🌛 ⛅ ✨ 🏅 \n⚽ 🥊 🎯 ⛳ 🔈 🎶 📻 🥁 🔍 📖 📅 🔒 🏹 🏧 ⛔ ✅ ❌ ❓ ❕ 🆗 🆘 ⬛ 🔶 🔵 🚩 🎌 🏴\n```\n\nThese are newly introduced into the set (131 in total):\n```text\n🌊 🌙 🌝 🌟 🌠 🌰 🌴 🌷 🌹 🌻 🍀 🍁 🍅 🍆 🍈 🍊 🍋 🍍 🍐 🍑 🍗 🍚 🍠 🍣 🍩 🍭 \n🍯 🍳 🍵 🍶 🍸 🍹 🍼 🎂 🎃 🎄 🎓 🎠 🎥 🎩 🎪 🎬 🎭 🎰 🎱 🎳 🎵 🎷 🎼 🎽 🎿 🏉 \n🏥 🏦 🏭 🏰 🐀 🐉 🐊 🐎 🐐 🐓 🐖 🐗 🐙 🐛 🐜 🐝 🐞 🐢 🐣 🐨 🐩 🐪 🐬 🐯 🐰 🐲 \n🐵 🐺 🐻 🐼 🐽 🐾 👅 👒 👓 👘 👚 👛 👞 👟 👠 👡 👢 👣 👹 👾 👿 💀 💄 💈 💋 💐 \n💕 💘 💭 💰 💳 💸 💼 📈 📉 📣 🔌 🔎 🔩 🔪 🔫 🔬 🔮 🔱 🗽 😇 😹 😻 😿 🚓 🚗 🚨 🛁\n```\n\nAnd these are unchanged (125 in total):\n```text\n😂 😉 😎 😍 😱 😷 😈 👻 👽 💩 👀 💔 💌 💤 💣 💦 💨 👔 👕 👖 👗 👙 🎒 👑 💍 💎 \n🐶 🐴 🐮 🐷 🐑 🐘 🐭 🐸 🐍 🐳 🐚 🐌 🌸 🌵 🍇 🍉 🍌 🍎 🍒 🍓 🌽 🍄 🍞 🍔 🍟 🍕 \n🍦 🍪 🍰 🍫 🍬 🍷 🍺 🍴 🌍 🌋 🏠 🎡 🎢 🎨 🚂 🚌 🚑 🚒 🚕 🚜 🚲 🚦 🚧 🚢 💺 🚁 \n🚀 🚪 🚽 🚿 🌞 🌀 🌈 🌂 🔥 🎈 🎉 🎀 🎁 🏆 🏀 🏈 🎾 🎣 🎮 🎲 🔔 🎤 🎧 🎸 🎹 🎺 \n🎻 📱 🔋 💻 📷 🔭 📡 💡 🔦 📚 📝 📌 📎 🔑 🔨 🔧 💉 💊 🚫 💯 🏁\n```\n\n### When will this happen?\n\nThese changes will be introduced in the next minor release of the mobile (0.2.0) and base node (0.4.0) apps and we'll let you know when those drop so that everyone can upgrade\nexpeditiously; most likely late next week, but we'll keep you posted.\n\n## Stress testing - part II\n\nThe developer community ran a second testnet stress test this week. (Say that 10 ten times quickly).\n\nThe test dumped 48,000 transactions onto the Tari network in the space of a few minutes. Things went much better than the first test (that test amounted to a self-inflicted DDoS\nattack):\n\n* A large majority of transactions got signed and broadcast.\n* A majority of transactions were broadcast on the network, with mempools filling up nicely.\n* Nodes did not fail under intense memory or CPU consumption, and blocks were successfully propagated through the network.\n\nEven though this was a vast improvement over the first test, the results are still not where we want them to be. If you're interested in the technical _minutae_, you can jump into\n\\#tari-dev and follow the conversation there.\n\nThe good news is that the remaining problems are somewhat self-evident. Several core contributors have already started to address those issues and we are hoping to see further\nmassive improvements in the next stress test.\n\n### Reminder - Telegram discussion this Friday\n\nThe Tari community will be discussing the Proof of Work for mainnet this friday. Join us and make your voice heard.\n\nFriday, June 12th @ 16:00 UTC (9:00 PDT, 12:00 EDT, 17:00 CET, 18:00 SAST) on Telegram or #Tari on Freenode* to discuss the proof-of-work algorithm for Tari.\n\n*There is a bridge routing messages from either platform to each other",
        "title": "Stress testing and emoji changes",
        "date": "2020-06-10T00:00:00.000Z",
        "excerpt": "Emoji set changes We've merged changes into the core emoji set! The reasons for this are:  Some emoji weren't supported on older Android devices.  A few emoji have issues when being copied / pasted...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-06-08-update-22",
        "content": "\nTari’s testnet is now a month old. As mainnet launch approaches, one of the undecided questions that we as a community must answer is: \n\nWhat does the proof-of-work algorithm for Tari mainnet look like?\n\nThe developer community discussed this topic [late last year](/2019/10/14/tari-protocol-discussion-47.html), but the broader Tari community has grown since then and we thought it would be prudent to re-open the discussion to determine whether the decision made in October still has broad consensus.\n\nThere are several options available to us:\n\n1. Merge mine with Monero\n2. Hybrid mining, with 50% - 75% of blocks being mined through Monero merge mining and the remainder using a CPU/GPU-friendly algorithm to mine Tari directly\n3. Hybrid mining: 50% - 75% of blocks merge mining Monero, and the remainder merge mining another coin\n4. Other\n\n### Option 1 is the Simplest\n\nTari can instantly leverage Monero’s hash-rate security; and given the relationship between the Monero and Tari communities, we are optimistic that Tari will get the support of several large Monero pool operators.\n\nHowever, there are significant risks to “putting all your eggs in one merge-mined basket”. Cheap 51% attacks are possible, as [this report](https://tlu.tarilabs.com/merged-mining/merged-mining-scene/MergedMiningIntroduction.html#51-attacks) and a few members of the Monero development community have pointed out.\n\n### Option 2 is the Next Easiest\n\nTestnet is already a Tari-only Proof-of-work chain. Mainnet could mitigate the merge-mined 51% attack risks by hybrid mining using a Tari-only algorithm in addition to Monero merge-mining.\n\nThe choice of algorithm, and overall contribution to the block emission is yet to be decided. Testnet uses a double Blake hashing algorithm, but this isn’t an optimal choice for several reasons.\n\nA better choice would be a “memory hard” hashing algorithm, like Argon2; or one that is likely to become an ASIC-based commodity in future, like SHA-3. \n\nAlgorithms that already have high hash rates on other coins, including SHA-256, Ethash, Scrypt and Equihash are not good choices.\n\n### Option 3 is Tougher\n\nMainly because it requires convincing an additional set of pool operators to support Tari. But it is not much more difficult to implement from a technical point of view.\n\nThe result of the Development Discussion back in October was to take Option 2. \n\n\n### Come Join the Tari Community \nFriday, June 12th @ 16:00 UTC (9:00 PDT, 12:00 EDT, 17:00 CET, 18:00 SAST) \non Telegram or #Tari on Freenode* to discuss the proof-of-work algorithm for Tari.\n\n*There is a bridge routing messages from either platform to each other",
        "title": "Monero merge-mining + Tari standalone. Is this still the consensus? Let’s make sure!",
        "date": "2020-06-08T00:00:00.000Z",
        "excerpt": "Tari’s testnet is now a month old. As mainnet launch approaches, one of the undecided questions that we as a community must answer is:  What does the proof-of-work algorithm for Tari mainnet look...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-06-05-update-21",
        "content": "\nPreviously, you could not receive or complete Tari Aurora transactions without opening the app in the foreground each time. Now, transactions will be able to silently complete in the background thanks to new app extension background sync functionality. If this process fails for any reason, you’ll receive a push notification. \n\nAnd if that’s not enough for you…\n\n\n**iOS v0.1.14** \n\n- The TTL Store is now available in an in-app browser\n- Share bug reports via other apps if your device’s default mail app is not setup\n- Fix that prevents multiple debug menus from being opened when shaking\n- Pull-to-refresh improvements on the transaction screen\n- Deep link fix for links with emojis (handling URL encoded emojis)\n- UI polish on various screens\n\n**Android v0.1.14**\n\n- The TTL Store is now available in an in-app browser.\n- A more responsive transaction list & improved UI stability overall.\n- Updates Tor proxy version to 0.2.4.7.\n- Various smaller bug-fixes and performance improvements. \n\n",
        "title": "New iOS and Android updates for Tari Aurora",
        "date": "2020-06-05T00:00:00.000Z",
        "excerpt": "Previously, you could not receive or complete Tari Aurora transactions without opening the app in the foreground each time. Now, transactions will be able to silently complete in the background...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-06-04-update-20",
        "content": "\n## Tari base node v0.3.0 release\n\nTari Base Node v0.3.0 is [available for download](https://tari.com/downloads)!\n\n**Note:** This release includes a breaking change to the local blockchain DB. A node upgrading to this version will need to delete its existing db and resync the blockchain.\n\n*Important:* You do not need to delete your wallet. Fake funds are SAFU.\n\nTo reset your database, follow these steps:\n\n1. Stop your node.\n1. Locate your Tari data folder. The default locations are `~/.tari` on Mac or Linux and `%USERPROFILE%\\.tari-testnet` under Windows.\n1. Delete the `rincewind/db` and `rincewind/peer_db` folders in their entirety. You can leave `dht.db`, and the `wallet` directory intact.\n4. Restart your node. Re-syncing takes an hour or more right now.\n\n## New Features in this release\n\n* Several of back-end changes (hence the need to reset the db) to accommodate pruned mode nodes.\n* Several new gRPC endpoints for use by the block explorer (and future wallets) (#1922)\n* Increase redundancy for Store and Forward messages (#1929). This PR increases the number of nodes\n  that will see and store a SAF message when it reaches the neighbourhood of the destination.\n* Have Messaging protocol substreams close after a period of inactivity (#1913)\n\n### Bug fixes\n\n* Fix mobile build by emitting `cargo:rerun-if-changed` directive automatically for protobuf (#1926)\n* Fix missing Source and Destination Pubkeys in FFI Transaction Cancellation callback return (#1933)\n\n\n",
        "title": "Base node v0.3.0 release",
        "date": "2020-06-04T00:00:00.000Z",
        "excerpt": "Tari base node v0.3.0 release Tari Base Node v0.3.0 is available for download! Note: This release includes a breaking change to the local blockchain DB. A node upgrading to this version will need to...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-06-02-update-19",
        "content": "\nGood news, everyone!\n\n## Version 0.3.0 of the base node code has been tagged\n\nWe've merged in some changes to the base node codebase that will improve network stability and resilience as well as making some changes to the DB structure needed to support\npruned mode. There will be an announcement when new binaries for this version are live and _it will require everyone running a base node to re-sync from the genesis block_. The\ncode base has been tagged with version 0.3.0.\n\nThere will be more details with that release, but essentially all you'll need to do is delete the `~/.tari/rincewind/db` and `~/.tari/rincewind/peer_db` folders.\n\nNote: If someone wants to tackle the\n[open issue](https://github.com/tari-project/tari/issues/1920) to do DB migration instead of requiring a full sync from scratch, please join the conversation there.\n\nAnother Note: These are _not_ consensus breaking changes, so there's no need to delete your wallets. Fake testnet funds should be SAFU.\n\n## Taribot running low\n\nThe testnet faucet, which is what Taribot uses to give new Aurora installers their first batch of Tari has totally run dry! This means that there have been at least 2,000\nindividual installs of the Aurora app in the last month. Some folks have repeatedly installed the app but it's still nevertheless a pleasant surprise to have this much activity on\nthe wallets in such a short period of time.\n\nThe good news is that we've added a new batch of UTXOs to the faucet to allow newcomers to continue to receive some tXTR and play with the wallet. The amount you'll receive now\nwill be 2,000 tXTR rather than 5,000.\n\n##  In other news\n\n* Pruned mode for base nodes is in the early testing phase - woohoo!\n* Several behind-the-scenes improvements to the wallet communication code have been merged.\n* Work on the wallet backup feature is continuing.\n* If you've been watching the\n  [block explorer](https://github.com/tari-project/block-explorer-frontend) repos, you'll notice lots of activity there too. If you're a front-end dev and want to chip in, look for\n  a \"Good first issue\" on Github.\n\n\n",
        "title": "Base node update",
        "date": "2020-06-02T00:00:00.000Z",
        "excerpt": "Good news, everyone! Version 0.3.0 of the base node code has been tagged We've merged in some changes to the base node codebase that will improve network stability and resilience as well as making...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-05-28-update-18",
        "content": "\n[![How to set up a Tari base node on Ubuntu](https://img.youtube.com/vi/at0szJ_9rIs/maxresdefault.jpg)](https://www.youtube.com/watch?v=at0szJ_9rIs)\n\n\n\nGet the answers to some interesting questions about Tari straight from the horse’s pony’s mouth as [Riccardo Spagni and Naveen Jain join the Monero Talk podcast](https://www.youtube.com/watch?v=at0szJ_9rIs&feature=youtu.be) to discuss all things Tari. \n\nIt’s a great insight into how things have gone from conception to testnet, the journey to create something people will find truly useful, how Monero benefits from Tari, and the importance of preserving liberty & privacy in the digital age.\n\nIf you’ve got questions about Tari, this video is 100% worth watching.\n\nSide note: play along by taking a shot every time Fluffypony sips whiskey.\n\n**Table of Contents**\n\n* How was the experience for conception to testnet launch? [2:25](https://youtu.be/at0szJ_9rIs?t=145)\n\n* What can people do on Tari today? [6:37](https://youtu.be/at0szJ_9rIs?t=397)\n\n* Are you just working on the code or are you thinking about bringing in partners to help Tari? [9:43](https://youtu.be/at0szJ_9rIs?t=583)\n\n* Is Big Neon still making progress [11:23](https://youtu.be/at0szJ_9rIs?t=683)\n\n* Why  would game developers look to Tari? [14:00](https://youtu.be/at0szJ_9rIs?t=840)\n\n* How does Monero benefit from Tari? [19:18](https://youtu.be/at0szJ_9rIs?t=1158)\n\n* People have expectations but everything Tari is doing is open source [30:25](https://youtu.be/at0szJ_9rIs?t=1825)\n\n* How about these people who are calling Tari Labs the Blockstream of Monero? [32:31](https://youtu.be/at0szJ_9rIs?t=1951)\n\n* The open source legal listing framework, what progress have we seen there? [36:46](https://youtu.be/at0szJ_9rIs?t=2206)\n\n* What is the emission schedule for Tari? [39:20](https://youtu.be/at0szJ_9rIs?t=2360)\n\n* How are you guys feeling about Monero these days? [45:33](https://youtu.be/at0szJ_9rIs?t=2733)\n",
        "title": "Fluffypony and Naveen Jain on Monero Talk",
        "date": "2020-05-28T00:00:00.000Z",
        "excerpt": "Get the answers to some interesting questions about Tari straight from the horse’s pony’s mouth as Riccardo Spagni and Naveen Jain join the Monero Talk podcast to discuss all things Tari.  It’s a...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-05-27-update-17",
        "content": "\nThe core developers have worked really hard the last three weeks improving the stability and robustness of the network. Things are a lot better but we won't know how _much_ better\nuntil we run another big stress test, which will likely be in the next 5-7 days.\n\nIn the meantime, here are the big ticket items that various contributors are working on:\n* Pruned mode for base nodes. In pruned mode, you won't have to do a full sync from the Genesis block, but can do a verifiable sync -- i.e. has essentially the same security\n  guarantees as a full sync -- from a point much closer to the chain tip.\n* On Aurora, the wallet backup and recovery feature is in development.\n* The block explorer code is starting to shape up. Hopefully a first release of this will be ready in a few weeks.\n* The smart contract platform is starting to take shape. a Very fuzzy and protozoic shape, but you start to make out the outlines of something interesting.\n\ntl;dr the Tari community has been so busy that this was a recent conversation with a core dev:\n\n```text\ndev: \"Man. I haven't left my house in 8 weeks.\"\nme: \"I know. COVID-19 lockdowns suck!\"\ndev: \"What's COVID-19?\"\n```",
        "title": "What's cooking in the pipeline",
        "date": "2020-05-27T00:00:00.000Z",
        "excerpt": "The core developers have worked really hard the last three weeks improving the stability and robustness of the network. Things are a lot better but we won't know how much better until we run another...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Tari Aurora Update"
    },
    {
        "slug": "2020-05-26-update-16",
        "content": "\nThe Aurora wallet keeps getting better. Some really exciting new features in the latest Aurora wallet release. \n\n**iOS v0.1.13** \n\nSpring is a time for small pleasures: Flowers blooming. Birds chirping. Better visibility around network status and progress when you first send a transaction.\n\nOther changes aside from the new animation above:\n\n* Canceled and expired transactions now appear in your list\n* Ordering items from the TTL store now requires fewer steps\n* Emoji IDs that don’t have contact names now appear in your Recent Transactions list.\n* Shaking the app to report a bug no longer opens multiple windows\n* Comms private key moved to phone’s keychain\n* Devices with no biometrics or passcode enabled can now bypass the warning to use the app (but c’mon you really should be using a passcode)\n* Onboarding UI polish\n\n**Android v0.1.13**\n\n* Added cancel transactions support!\n* Adds support for default note and amount support for deep links\n* Prevent the opening of debug screen in background mode.\n* An update for emoji processing - removes IBM ICU library and relies on the Tari emoji set. Save ±8MB from install size!\n",
        "title": "New iOS and Android updates for Tari Aurora",
        "date": "2020-05-26T00:00:00.000Z",
        "excerpt": "The Aurora wallet keeps getting better. Some really exciting new features in the latest Aurora wallet release.  iOS v0.1.13  Spring is a time for small pleasures: Flowers blooming. Birds chirping....",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Tari Aurora Update"
    },
    {
        "slug": "2020-05-22-update-15",
        "content": "v0.2.5 focuses on node stability and network performance.\n\n## Features\n\n* Add a `get-state-info` command to display current base node state (#1880)\n* Message tracking for testnet troubleshooting (#1881)\n* Added OSX section to README.md (#1888)\n* Add the `version` command to base node CLI\n* Add `get_cancelled_transaction_by_id` to FFI & update cancel callback\n* Adding `GetCalcTiming` function to gRPC service (#1872)\n\n## Performance improvements and bug fixes\n\n* Refactor the validators to ensure that each validation step only completes once (#1873).\n* Add local pub key to the source and dest fields for cancelled txs in FFI (#1893)\n* Switched the BlockEvent stream to Tokio broadcast (#1889). Reduce the memory footprint for block event broadcast\nchannel by using a tokio broadcast channel.\n* Chain metadata service not updating metadata on reorgs (#1890)\n* Update sending of Tx Reply & Finalise msgs to send SAF if Direct fails (#1876)\n* Limit unnecessary storage of messages with duplicate content. (#1862)\n* Fixed block_forward sync to add blocks via local interface to ensure that events trigger correctly.\n* Fixed a typo in mobile build script (#1875)\n* Replace deprecated bigint with uint (#1874)",
        "title": "v0.2.5 Release notes",
        "date": "2020-05-22T00:00:00.000Z",
        "excerpt": "v0.2.5 focuses on node stability and network performance. Features  Add a  command to display current base node state (#1880)  Message tracking for testnet troubleshooting (#1881)  Added OSX section...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-05-18-update-14",
        "content": "After the 0.2.4 release on Friday the network has been far more stable. This week we will continue to focus on improvements to network stability. Today's updates are primarily focused on improving the validation pipeline in the base node.\n\n## Improvements\n* Windows installer was updated for release 0.2.4 and uploaded to Tari.com\n* Adding GetCalcTiming function to grpc service for the base node\n    - Added in the GetCalcTiming grpc endpoint.\n    - Height lists and header responses were moved into the BlockHeader for better separation of responsibility\n* Replace deprecated `bigint` library with `uint`. Thanks for the community contribution from ordian!\n* Split is_stxo and is_utxo transaction validation check\n    - The verification of inputs was split into two separate checks to better handle an edge case where some invalid transactions could be accepted as orphaned transactions in the mempool, instead of being discarded. The invalid edge case transactions have an orphaned input and an input that exists in the STxO set and have been classified as an orphaned transaction.\n    - Another check was also added to ensure that the outputs created by the new transaction would not create UTxOs that exist in the STxO set.\n* Add check for duplicate transactional inputs and outputs in validators\n    - Adds a check for duplicate inputs and outputs in blocks for the validators\n    - There was no check other than via the database settings to ensure that inputs and outputs are not duplicates. This means a block can pass validation although it's not valid.\n\n## Bug fixes\n* Don't panic if the logger is initialized twice in the Wallet FFI. This was needed for the new iOS background service strategy.\n    ",
        "title": "Continuing on the long road to stability",
        "date": "2020-05-18T00:00:00.000Z",
        "excerpt": "After the 0.2.4 release on Friday the network has been far more stable. This week we will continue to focus on improvements to network stability. Today's updates are primarily focused on improving...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-05-15-update-13",
        "content": "\nWe're happy to announce v0.2.4 of the Tari base node has been tagged and binary versions will be available for\n[download](https://tari.com/downloads) shortly.\n\nMost improvements in this release are centred around removing redundant network traffic and improving peer-to-peer connectivity.\n\n## Improvements\n\nSome of the changes that have come in since the last release include:\n* Introduce temporary short term ban for peers that are providing chain metadata but do not respond to header and block requests.\n* The chain synchronisation mechanism is simpler and more robust. Previously it was possible that a node would unfairly ban a peer after an initial chain sync.\n* The `check_db` CLI command does more through checks, including block validation. Previously it was only checking the header chain.\n* Old store and forward messages are now removed from the DB after they have been queued to be sent to the destination node.\n* Connections are now closed earlier if a peer is banned.\n* Deprecated tables and code have been removed from wallet codebase.\n* The Store and Forward cache size now has a hard limit.\n* Add node version info to PingPong messages. This will help identify if network issues are related to peers running older software.\n* Introduce Hamming distance as distance metric. The XOR metric seems to cause clustering of nodes that are not able to communicate. Hamming distance seems to improve the clustering issue. The XOR metric is still the default, though will likely be replaced by the Hamming distance in an upcoming release following further testing.\n\nThe Transaction send logic in the wallet has been substantially streamlined:\n\n1. First a Direct send is attempted (previously the direct and SAF were both sent at the same time).\n2. A SAF message is only sent if a Discovery needs to be done or the Direct messages fails.\n3. A record is made in the DB if a direct send occurs because then we know the recipient DEFINITELY got the message and no repeat or SAF should be sent.\n4.  If only a SAF message was sent then the Recipient is registered for monitoring by the liveness service.\n5. If a PONG is received then only a Direct send is attempted as a repeat sending of the transaction (so SAF is sent on repeats).\n6. As soon as a Direct send is successful no further repeats will be sent.\n\n* Multiplex substream counts have been added. This allows the connectivity manager to kill dormant connections.\n\n## Bug fixes\n* Temporarily removed `randomx-rs` (which was causing illegal instruction crashes on some chipsets).\n* Log rollovers were writing to the wrong directory in some cases.\n* Don't panic if the logger is initialized twice in the Wallet FFI (#1863)\n* A few flaky tests were fixed.",
        "title": "Base Node v0.2.4 release",
        "date": "2020-05-15T00:00:00.000Z",
        "excerpt": "We're happy to announce v0.2.4 of the Tari base node has been tagged and binary versions will be available for download shortly. Most improvements in this release are centred around removing...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-05-14-update-12",
        "content": "\n### Update\n_These videos are obsolete as of January 2022 and have been taken down. You can find link to our new guides in\n[this update](/dibbler-install-guides/)._\n\n\n## Install guides\n\nThese instructional videos will guide you through setting up the Tari base node for Ubuntu, Windows, and Mac.\nIf you haven't already, head to the [downloads](https://tari.com/downloads) page to get the latest binaries before starting.\n\n## Ubuntu Installation\n\n[![How to set up a Tari base node on Ubuntu](https://img.youtube.com/vi/bfuDe3pyKmA/maxresdefault.jpg)](https://www.youtube.com/watch?v=bfuDe3pyKmA)\n\n### Installation Video\n\n[![Installation Video]({{site.baseurl}}/assets/updates/img/ubuntu-video.png)](https://www.youtube.com/watch?v=bfuDe3pyKmA)\n\n\n**Table of Contents**\n\n* How to setup a base node and install Tor [0:24](https://www.youtube.com/watch?v=bfuDe3pyKmA&t=24s)\n\n* Running the base node, exploring the CLI and syncing the blockchain [6:26](https://www.youtube.com/watch?v=bfuDe3pyKmA&t=386s)\n\n* Receiving a transaction [10:48](https://www.youtube.com/watch?v=bfuDe3pyKmA&t=763s)\n\n* Sending a transaction [16:59](https://www.youtube.com/watch?v=bfuDe3pyKmA&t=1019s)\n\n\n\n## Windows Installation\n\n[![How to set up a Tari base node on windows](https://img.youtube.com/vi/qRKJQE7Ku0w/maxresdefault.jpg)](https://www.youtube.com/watch?v=qRKJQE7Ku0w)\n\n### Installation Video\n\n[![Installation Video]({{site.baseurl}}/assets/updates/img/windows-video.png)](https://www.youtube.com/watch?v=qRKJQE7Ku0w)\n\n**Table of Contents**\n\n* Running the Installer [0:55](https://youtu.be/qRKJQE7Ku0w?t=55)\n\n* Installing SQLite and Tor [1:35](https://youtu.be/qRKJQE7Ku0w?t=95)\n\n* Staring up the Tari base node [5:27](https://youtu.be/qRKJQE7Ku0w?t=327)\n\n* Exploring the CLI & logs [7:07](https://youtu.be/qRKJQE7Ku0w?t=427)\n\n* Receiving a transaction [14:28](https://youtu.be/qRKJQE7Ku0w?t=868)\n\n* My balance [18:17](https://youtu.be/qRKJQE7Ku0w?t=1097)\n\n## Mac Installation\n\n[![How to set up a Tari base node on Mac](https://img.youtube.com/vi/e5Rvpag9wI8/maxresdefault.jpg)](https://www.youtube.com/watch?v=e5Rvpag9wI8)\n\n### Installation Video\n\n[![Installation Video]({{site.baseurl}}/assets/updates/img/mac-video.png)](https://www.youtube.com/watch?v=e5Rvpag9wI8)\n\n\n**Table of Contents**\n\n* Running the installer and starting the node [1:03](https://www.youtube.com/watch?v=e5Rvpag9wI8&feature=youtu.be&t=63)\n\n* Exploring the CLI and logs [3:17](https://www.youtube.com/watch?v=e5Rvpag9wI8&feature=youtu.be&t=197)\n\n* Receiving a transaction [10:48](https://www.youtube.com/watch?v=e5Rvpag9wI8&feature=youtu.be&t=648)\n\n* Sending a transaction [14:55](https://www.youtube.com/watch?v=e5Rvpag9wI8&feature=youtu.be&t=895)\n\n* How to restart the base node after installation [18:21](https://www.youtube.com/watch?v=e5Rvpag9wI8&feature=youtu.be&t=1101)\n\n\n\n",
        "title": "Base Node Installation Guide for Ubuntu, Windows, & Mac",
        "date": "2020-05-14T00:00:00.000Z",
        "excerpt": "Update These videos are obsolete as of January 2022 and have been taken down. You can find link to our new guides in this update. Install guides These instructional videos will guide you through...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-05-13-update-11",
        "content": "\nWork on the block explorer has started. The first step is building out a gRPC interface for the base node and the first set of calls are already in place. Of course gRPC is not only for block explorers. The goal is to decouple the wallet and CLI from the base node and have them run as separate processes.\n\nWork on the Tari smart contract platform has started picking up. If you're interested in joining the conversation, #tari-vn-dev is where discussions are taking place. For a broad overview of the community discussions on this topic, head over to [https://rfc.tari.com](https://rfc.tari.com).\n\nNode stability is still being addressed on a few fronts: Several changes to the base node message propagation strategy have been merged in already, but the biggest change -- a rewrite of the peer connection manager -- is still in progress. Wallet messaging has also been improved. These changes should make it into the next set of mobile releases.\n\nHave you ever wondered how phones receive Tari messages when they come back online without there being a central server to deliver them? This is done via Store and Forward.\n\nBasically, some of your peers on the network will keep a message on behalf of your device and then deliver it when you comes back online. But there's a fine line. Lean too heavily on guaranteeing that messages get delivered, and you can drown the network in traffic. Move too far in the other direction and messages get lost.\n\nWe're still trying to find that balance, and the next Aurora release will carry some tweaks that we hope will get the tuning a lot better.",
        "title": "Progress on gRPC, smart contracts and network stability",
        "date": "2020-05-13T00:00:00.000Z",
        "excerpt": "Work on the block explorer has started. The first step is building out a gRPC interface for the base node and the first set of calls are already in place. Of course gRPC is not only for block...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-05-11-update-8",
        "content": "\nWe ran a stress test late last week that exposed quite a few issues with how the base nodes relay messages. For those interested, a community member submitted 36,000 transactions to the network almost simultaneously and it wreaked a bit of havoc. Devs are still sifting through the debris of that test, but it has significantly affected overall network performance over the last few days. The network obviously needs to be able to handle traffic like that gracefully and this is why from the chat on #dev-tari, there's even more focus on network reliability this week.\n\nThe network troubles are also having knock-on effects with the Aurora wallets and The TTL Store.\n\nWe recommend upgrading your nodes to development HEAD (if you're compiling from source) or version 0.2.3 (coming shortly on tari.com) to include several improvements to the base nodes that were submitted over the weekend.\n\nSpeaking of Aurora, there have been over 500 unique downloads of the wallets since launch meaning that the mobile developers have tons of bug reports and crash feedback to work through.\n\n\n\n",
        "title": "Network performance issues, upgrade notes to 0.2.3",
        "date": "2020-05-11T00:00:00.000Z",
        "excerpt": "We ran a stress test late last week that exposed quite a few issues with how the base nodes relay messages. For those interested, a community member submitted 36,000 transactions to the network...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-05-11-update-9",
        "content": "\nNew Ubuntu and OSX node binaries have been uploaded to [tari.com/downloads](https://tari.com/downloads) - Please upgrade to v0.2.3",
        "title": "New Ubuntu and OSX node binaries",
        "date": "2020-05-11T00:00:00.000Z",
        "excerpt": "New Ubuntu and OSX node binaries have been uploaded to tari.com/downloads - Please upgrade to v0.2.3",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-05-10-update-10",
        "content": "\n**Tari Aurora 0.1.3 (iOS) / 0.1.11 (Android) Release Notes**\n\nThe Aurora wallet keeps getting better. Some really exciting new features in the latest Aurora wallet release.\n\n**Tari Aurora v0.1.3 (iOS)**\n\nShiny new features:\n\n * Cancel any transaction that hasn’t yet been accepted by the recipient\n * Long press the Emoji ID “Copy” button to copy the hex public key instead of emojis\n * Pull to refresh on your transaction list to re-sync it\n\nBoring but still useful:\n\n * Fallback to device PIN when Touch ID or Face ID is unavailable\n * Fix for UI issues on for smaller iPhones on transaction detail view\n * Fix for bug causing the app to crash when entering an amount to send\n * Last but not least, the animations in the onboarding flow have been refined to make the first-time user experience snazzier and more intuitive.\n\n**v0.1.11 (Android)**\n\nWHAT’S NEW\n\n * Implement “Cancel transaction” CTA (TX list updates, push notifications and TX details statuses is yet to come)\n * Add sentry.io crash reporting\n * Fix BigDecimal rounding bug, making it look like receivers were paying fees.\n * Other miscellaneous bug fixes",
        "title": "New iOS and Android updates for Tari Aurora",
        "date": "2020-05-10T00:00:00.000Z",
        "excerpt": "Tari Aurora 0.1.3 (iOS) / 0.1.11 (Android) Release Notes The Aurora wallet keeps getting better. Some really exciting new features in the latest Aurora wallet release. Tari Aurora v0.1.3 (iOS) Shiny...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Tari Aurora Update"
    },
    {
        "slug": "2020-05-08-update-7",
        "content": "\nHere are some of the tasty treats in store for the next iOS Aurora release:\n\nFeatures and UI changes\n\n*   You can now manually cancel transactions that get stuck in a pending state from the transaction detail view as long as the recipient hasn’t accepted it yet.\n*   Pull to refresh on the transaction list to force a re-sync with the base node.\n*   (Secret feature) Long press on the \"Copy Emoji ID\" button to copy the id in hexadecimal format. Base nodes and wallets will accept this format as emoji ID addresses.\n\nStability and bug fixes\n\n*   Emoji ID display behaviour fixes\n*   Fixes a bug causing the app to occasionally crash when entering an amount to send\n*   Fallback to device pin when Touch ID or Face ID is unavailable\n*   Onboarding UI improvements \n*   UI fixes for smaller iPhones on transaction detail view\n\n\n\n",
        "title": "Preview of the next iOS Aurora release",
        "date": "2020-05-08T00:00:00.000Z",
        "excerpt": "Here are some of the tasty treats in store for the next iOS Aurora release: Features and UI changes    You can now manually cancel transactions that get stuck in a pending state from the transaction...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "iOS Developer Update"
    },
    {
        "slug": "2020-05-07-update-6",
        "content": "\nSeveral changes and improvements have been implemented in the last few days, including two big mempool bugs and dynamic DB sizing in Windows 10 (no more \"insufficient disk space\" errors).\n\nThese fixes will roll out in the next binary release on Monday 11 May, but if you want to run the bleeding edge, they are already merged into the development branch of the tari repository ([https://github.com/tari-project/tari](https://github.com/tari-project/tari)).\n\nHere's what new since v0.2.1-23677a7:\n\n*   The get-mining-state command has been added to the CLI. You can now see what your miner is doing with: \\\n\t&#62;&#62; get-mining-state \\\n\tMining is ON \\\n\tMining hash rate is: 0.712515 MH/s\n*   Lots of improvements to the OSX and Windows installers.\n*   The LMDB database size is now dynamically managed. This fixes all the \"Insufficient disk space\" errors Windows 10 users were experiencing.\n*   Rudimentary gRPC support for the base node has been implemented. This will be super handy for things like block explorers and future versions of the wallet to extract information about the blockchain with a simple API.\n*   Both participants of a ping-pong request share chain metadata (chain height, difficulty etc) now. Previously, only the pong message contained metadata. This makes a BIG difference in letting nodes know if they've fallen behind the main chain.\n*   Explicitly configure base nodes as Archival nodes. Pruning mode is in development (so all nodes are currently archival nodes) and the pruning horizon parameter was causing some confusion. If this means nothing to you then don't worry about it 🙂\n*   Better logging around why blocks and transactions are rejected.\n*   Fixed a bug causing error: failed to run custom build command for 'prost-build v0.6.1' errors for some people.\n*   Reset failed connection attempts after joining then network. A peer's offline state would be removed when receiving a discovery/join. However, it's failed connection attempt count was not making it possible for a single failed connection attempt to mark the peer as offline.\n*   A change to how neighbours are determined in the DHT was implemented to try and reduce clustering and spontaneous partitions in the network. Also see below.\n*   Fix a bug where the mempool was permitting double-spend transactions to be submitted in candidate blocks.\n*   Added an event stream to the mempool that the miner can listen to. This allows better synchronisation between the mempool and miner. There was an issue where the miner was requesting new blocks before the mempool had processed all state changes resulting from a new block; meaning the miner was receiving stale data leading to the mining of invalid blocks.\n\nDespite these fixes, the network is still experiencing spontaneous partitions. The neighbour calculation change implemented recently will help, but there are two proposals that will likely fix this problem once and for all. Several contributors are looking in to this at the moment and will hopefully land in the May 18 release. For those interested in what's happening, I refer you to #tari-dev on Freenode IRC.\n\n\n\n",
        "title": "Mempool bug fixes and dynamic DB sizing errors in Windows 10",
        "date": "2020-05-07T00:00:00.000Z",
        "excerpt": "Several changes and improvements have been implemented in the last few days, including two big mempool bugs and dynamic DB sizing in Windows 10 (no more \"insufficient disk space\" errors). These fixes...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Protocol Update"
    },
    {
        "slug": "2020-05-06-update-5",
        "content": "\nThere's a new release of the Aurora Android Wallet in the Play Store as of this morning (v0.1.10-jniLibs-0.9.1).\n\nHere's what's new:\n\nFeatures and UI changes\n\n* In push notification titles, if the sender is in your address list, you'll see their alias instead of the emoji ID.\n* Now you can shake your device to go to the debug screen.\n* Transaction status messages are more specific about where you are in the transaction process.\n* You can exit from the app using the back button on the home page.\n* Foreground service notification click behavior is fixed. If you tap on the notification, you'll be taken directly to the app (quite a few of you have mentioned this issue).\n* Several other cosmetic improvements.\n\nStability and bug fixes\n\n* Fixed a UI bug that caused the transaction list to not scroll to top after a fling & scroll combination.\n* Fix for a transaction list interaction bug.\n* Implement a less strict internet connectivity check and fix the copy for one of the connection error dialogs.\n* Fix a crash on \"not authenticated state\" on home activity creation\n* Fix a home activity memory leak.\n* New Matomo events (see tari-project/wallet-android#271 for details).\n\nComing up\n\nThis is what the android wallet community is currently working on:\n\n* Transaction cancellation. You asked for it, the Android wallet community is delivering!\n* Better deep link interactions.\n* Improved bug reporting features.\n* Consistent emoji ID treatment and better copy-paste portability\n\nStuff we want to do, but are on the back burner for now (unless you're an android dev and want to dive in with a PR):\n\nReducing battery consumption\n* f-droid builds\n\nIn the meantime, the core protocol contributors are also smashing the bugs leading to stuck and pending transactions (stuck transaction issues are almost all due to problems on the blockchain P2P network. Once those are sorted out, you should see most transaction issues magically go away -- and battery consumption will most likely dramatically improve along with it; which is why we don't want to dive into that issue right away).\n\n\n",
        "title": "UI changes, bug fixes, and what's next",
        "date": "2020-05-06T00:00:00.000Z",
        "excerpt": "There's a new release of the Aurora Android Wallet in the Play Store as of this morning (v0.1.10-jniLibs-0.9.1). Here's what's new: Features and UI changes  In push notification titles, if the sender...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Protocol Update"
    },
    {
        "slug": "2020-05-05-update-4",
        "content": "\n\nNew tari base node binaries have been uploaded to [https://www.tari.com/downloads/]({{site.baseurl}}/downloads/). The main changes with these binaries are:\n\n* Update wallet to monitor Tx recipient for liveness and to resend Tx\n\nPreviously the transaction service would send a transaction once, directly and via store-and-forward, and then wait for a Reply from the Recipient. If the Transaction was lost it would never be resent and on the Sender’s side it would be a pending Tx until the client canceled it 3 days later.\n    \nThis change updates the Transaction Send protocol in the Transaction service to use the Liveness Service to monitor the recipient for liveness with periodic pings. If the recipient replies with a Pong but has not sent the Transaction Reply message the Sender will resend the transaction to the Recipient in case the original send did not make it to them.\n    \nFuture changes will apply this same strategy to the Recipient.\n\n* A more robust Runtime environment for Windows, installation instructions, and a new Inno installer script\n\n",
        "title": "New Tari base node binaries",
        "date": "2020-05-05T00:00:00.000Z",
        "excerpt": "New tari base node binaries have been uploaded to https://www.tari.com/downloads/. The main changes with these binaries are:  Update wallet to monitor Tx recipient for liveness and to resend Tx...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Protocol Update"
    },
    {
        "slug": "2020-05-04-update-3",
        "content": "\nThe dev community is continuing to work through the feedback and bug reports we’ve received so far. To date, they can be bucketed into a few main categories. The dev community has started working on most of these issues and we should see improvements in the next few releases.\n\n### Synchronisation issues: \n\nBlocks are not being broadcast around the network fast enough to prevent a large number of orphans. The main cause for this appears to be due to connections between nodes and wallets being dropped for no apparent reason, making the network far more partitioned and fractured than it should be. Fixing this issue is a very high priority.\n\nThe same issue is resulting in countersigned transactions not reaching their destinations, resulting in “Stuck in pending” transactions — particularly between wallets.\n\nThere are some incoming PRs that will be included in an upcoming release that will include “resend” logic for transactions. Combined with improved node connectivity, this should dramatically improve the stuck transaction issue.\n\n### Documentation\n\nThere are lots of tickets about installation issues. We’re tackling this on two fronts: a) making the installation process more seamless to begin with and b) Updating README’s and docs to cover the most common installation gotchas — Please help: If you’ve figured out an installation gotcha, or had someone from the community help you out, why not document your findings in a PR and become an official Tari contributor?\n\n### Mempool issues\n\nWe’ve picked up some bugs in the mempool code that’s resulting in it handing invalid blocks to miners. PRs with fixes should be incoming in the next day or two.\n\n### General wallet issues\n\n We’re aware that the wallet balance is being displayed incorrectly in some cases.\n Battery consumption is high on Android. We want to stabilize the app performance before tackling this.\nStuck and pending transactions (See above).\nEmoji ID copy and pasting. Some applications convert UTF-8 string to images, breaking emoji id transfers. \nAlso some emoji are not supported on older Android devices. \n\n### Release schedule\n\nWe plan to issue weekly releases on the Tari download page for base node binaries; and in the App store, unless severe issues force interim updates. The plan is to tag a release on Wednesdays for release the following Monday. This will allow those who wish to run bleeding edge versions to test the new release for issues for a few days (by compiling from source) ahead of the weekly release.\n\n",
        "title": "Bug update list",
        "date": "2020-05-04T00:00:00.000Z",
        "excerpt": "The dev community is continuing to work through the feedback and bug reports we’ve received so far. To date, they can be bucketed into a few main categories. The dev community has started working on...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Developer Update"
    },
    {
        "slug": "2020-05-01-update-2",
        "content": "\nA new Windows node binary has been uploaded  \n[https://www.tari.com/downloads/]({{site.baseurl}}/downloads/)\n\nThis release solves a major issue with windows nodes not communicating with &#42;nix-based nodes.\n",
        "title": "Windows node binary update",
        "date": "2020-05-01T00:00:00.000Z",
        "excerpt": "A new Windows node binary has been uploaded   https://www.tari.com/downloads/ This release solves a major issue with windows nodes not communicating with &#42;nix-based nodes.",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Protocol Update"
    },
    {
        "slug": "2020-04-30-update-1",
        "content": "\nFirstly, the response to the testnet launch has been amazing. I woke up to over 400 messages on telegram 🚒\n\nWe’re still processing the deluge of feedback, but I can give an update on the dev community’s priorities for the next 24-48 hours based on what we’ve read so far:\n\n### Network partition issues. \n\nWe’ve identified one issue that’s causing the bulk of the network partition issues: The windows node binary we released at launch has a bug that prevents it from talking to other (non-window) nodes. (Almost everyone develops on a Mac or Linux, so we missed this). We’ll be releasing a windows binary update in the next 12 hours that will fix this particular issue.\n\nThere are other network and Tor issues as well, which we’re continuing to investigate.\n\n### Documentation\n\nThere are lots of questions on node installation, particularly on Windows, so we’ll be updating the docs based on the feedback we’ve received.\n\n### Stuck and pending transactions in the app\n\nThese are almost all related to the networking issues discussed above, but we’re considering  additional improvements to  the app in upcoming releases, such as:\n* automatic resending of transactions, \n* canceling stuck txs (in CLI wallet currently)\n\n### Emoji Ids\n\nGenerally, the Emoji Id concept has been well received, but we’re hearing that Copy & pasting can be inconsistent. It seems like some apps convert emoji into images which breaks emoji id sharing. We’re looking into ways to make Emoji ID sharing robust. In the meantime, the QR code is a reliable means of getting your Tari address into people’s phones.  \n\nAnything we haven’t covered? Want to fix it yourself? Awesome! You can help make Tari better: [https://www.tari.com/#contribute]({{site.baseurl}}/#contribute)\n",
        "title": "Dev community priorities post launch",
        "date": "2020-04-30T00:00:00.000Z",
        "excerpt": "Firstly, the response to the testnet launch has been amazing. I woke up to over 400 messages on telegram 🚒 We’re still processing the deluge of feedback, but I can give an update on the dev...",
        "thumbnail": "/assets/updates/img/update-background.jpg",
        "og_image": "",
        "tag": "Protocol Update"
    }
]
